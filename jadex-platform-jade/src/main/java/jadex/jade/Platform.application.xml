<?xml version="1.0" encoding="UTF-8"?>
<!--
  JADE platform properties.
-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex-application"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-application
						http://jadex.sourceforge.net/jadex-application-2.0.xsd"
	name="Platform" package="jadex.jade">
	
	<imports>
		<import>jadex.jade.service.*</import>
		<import>jadex.jade.service.message.*</import>
		<import>java.util.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.bridge.servicelibrary.*</import>
		<import>jadex.bridge.service.clock.*</import>
		<import>jadex.bridge.service.threadpool.*</import>
		<import>jadex.bridge.service.execution.*</import>
		<import>jadex.commons.concurrent.*</import>
		<import>jadex.component.*</import>
		<import>jadex.bridge.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.base.service.remote.*</import>
	</imports>
	
	<arguments>
		<argument name="rma">true</argument>
		<argument name="local-port">1099</argument>
		<!-- Todo: jadex transport for jade - ->
		<argument name="jadextransport">
			"new jadex.base.service.message.transport.niotcpmtp.NIOTCPTransport($provider, 0)"
		</argument>-->
	</arguments>
	
	<componenttypes>
		<componenttype filename="jadex/application/KernelApplication.component.xml" name="kernel_application"/>
		<componenttype filename="jadex/micro/KernelMicro.component.xml" name="kernel_micro"/>
		<componenttype filename="jadex/bdi/KernelBDI.component.xml" name="kernel_bdi"/>
		<componenttype filename="jadex/bdibpmn/KernelBDIBPMN.component.xml" name="kernel_bdibpmn"/>
		<componenttype filename="jadex/bpmn/KernelBPMN.component.xml" name="kernel_bpmn"/>
		<componenttype filename="jadex/base/service/remote/RemoteServiceManagementAgent.class" name="rms"/>
		<componenttype filename="jadex/base/service/awareness/AwarenessAgent.class" name="awa"/>

		<!-- <componenttype filename="jadex/tools/jcc/JCC.agent.xml" name="jcc"/> -->
		<componenttype filename="jadex/tools/jcc/JCCAgent.class" name="jcc"/>
	</componenttypes>
	
	<services>
		<providedservice class="ILibraryService" proxytype="raw">
			new LibraryService($args.libpath, $component.getServiceProvider(), 
				SUtil.createHashMap(new Object[]{"componentviewer.viewerclass", RemoteServiceManagementService.REMOTE_EXCLUDED}, 
				new Object[]{"jadex.base.gui.componentviewer.libservice.LibServiceBrowser", new String[]{"getClassLoader"}})
				)
		</providedservice>
	
		<providedservice  class="IComponentManagementService" proxytype="raw">
			new ComponentManagementService($component.getExternalAccess(), $component.getComponentAdapter())
		</providedservice>
		
		<providedservice class="IComponentFactory" proxytype="raw">
			new ComponentComponentFactory($component.getServiceProvider())		
		</providedservice>
		
		<providedservice class="IMessageService" proxytype="raw">
			new MessageService($component.getServiceProvider(),
				new MessageType[]
				{
					new FIPAMessageType()
				})
		</providedservice>
		
		<providedservice class="IThreadPool" proxytype="raw">
			new ThreadPoolService(new ThreadPool(new DefaultThreadPoolStrategy(0, 20, 30000, 0)), $component.getServiceProvider())
		</providedservice>
		
		<providedservice class="IClockService" proxytype="raw">
			 new ClockService(new ClockCreationInfo(IClock.TYPE_SYSTEM, "simulation_clock", System.currentTimeMillis(), 100), $component.getServiceProvider(),
				SUtil.createHashMap(new Object[]{RemoteServiceManagementService.REMOTE_UNCACHED}, 
				new Object[]{new String[]{"getState", "getTime", "getTick", "getStarttime", "getDelta", "getDilation", "getNextTimer", "getTimers", "getClockType", "advanceEvent"}}))
		</providedservice>
		
		<providedservice class="IExecutionService" proxytype="raw">
			 new ExecutionService($component.getServiceProvider(), SUtil.createHashMap(new Object[]{
				RemoteServiceManagementService.REMOTE_UNCACHED}, new Object[]{new String[]{"isIdle", "getTasks"}}))
		</providedservice>
		
		<providedservice class="IDF" proxytype="raw">
			 new DirectoryFacilitatorService($component.getServiceProvider())
		</providedservice>
		
	</services>
	
	<applications>
		<application name="all kernels (rms, awa, jcc)">
			<components>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="awa" type="awa"/>
				<component name="jcc" type="jcc"/>
			</components>
		</application>
		<application name="all kernels (rms, jcc)">
			<components>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="jcc" type="jcc"/>
			</components>
		</application>
		<application name="testcases">
			<arguments>
				<argument name="rma">false</argument>
			</arguments>
			<components>
				<component name="kernel_application" type="kernel_application"/>
				<component name="kernel_micro" type="kernel_micro"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn"/>
				<component name="kernel_bpmn" type="kernel_bpmn"/>
				<component name="rms" type="rms"/>
			</components>
		</application>
	</applications>
</applicationtype>
