apply from: 'util.gradle'

def artifactselectionmarker = 'X'
def buildconfigsfile = 'buildconfigs.csv'
gradle.ext.publishdists='minimal,standard,pro,android,addon3d,addonws,addonsecure,addonmaven,addonmgmt,editorbpmn,editorgpmn,relaystandalone'

gradle.rootProject {
	def secpropfile = new File(settingsDir.getCanonicalPath() + File.separator + 'secret.properties')
	if (secpropfile.exists()) {
		def is = new FileInputStream(secpropfile)
		def secprops = new Properties();
		secprops.load(is)
		is.close()
		secprops.entrySet().each { entry ->
			gradle.rootProject.ext[entry.getKey()] = entry.getValue()
		}
	}
}

/* Read the buildconfigs.csv and generate data structures */
BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(settingsDir.getCanonicalPath() + File.separator + buildconfigsfile)))
def disttargets = new ArrayList<String>()
def allbuildartifacts = new HashSet<String>()
//def builddeps = new HashSet<String>()
gradle.ext.distartmap = new HashMap<String, Set<String>>();
boolean firstline = true
br.eachLine { line ->
	if (firstline)
	{
		line.split(',').each { tok ->
			if (tok.trim().length() > 0)
			{
				disttargets.add(tok)
				gradle.ext.distartmap.put(tok, new HashSet<String>())
			}
		}
		firstline = false;
	}
	else
	{
		String[] toks = line.split(',');
		if (JavaVersion.current() >= JavaVersion.VERSION_1_8 || !toks[0].endsWith('-java8'))
		{
			if (androidSdkExists() || !toks[0].contains('android'))
			{
				allbuildartifacts.add(':' + toks[0])
				for (int i = 1; i < toks.length; ++i)
				{
					if (artifactselectionmarker.equals(toks[i].trim().toUpperCase()))
					{
						Set<String> arts = gradle.ext.distartmap.get(disttargets.get(i - 1))
						arts.add(':' + toks[0]);
					}
				}
			}
		}
	}
}
br.close()
disttargets = null

/* Determine selected distributions */
gradle.ext.selecteddists = new ArrayList<String>()
String selectedstr = gradle.startParameter.getProjectProperties().get('dist')
selectedstr = selectedstr != null? selectedstr : 'everything'
selectedstr = gradle.ext.properties.containsKey(selectedstr)? gradle.ext.properties.get(selectedstr) : selectedstr 

selectedstr.split(',').each {
	gradle.ext.selecteddists.add(it.trim())
}
System.out.println('Selected distributions: ' + gradle.ext.selecteddists.toString())
gradle.ext.maindistartifacts = new HashSet()
gradle.ext.selecteddists.each {
	gradle.ext.maindistartifacts.addAll(gradle.ext.distartmap.get(it))
}

gradle.ext.includeartifacts = new HashSet<String>()

def depconfreader = new BufferedReader(new InputStreamReader(new FileInputStream(settingsDir.getAbsolutePath() + File.separator + 'dependencies.conf')))
def subproj = ''
def projdeps = new HashMap<String, Set<String>>()
depconfreader.eachLine { line ->
	if (line.startsWith('### '))
		subproj = line.substring(4)
	else
	{
		def deps = projdeps.get(subproj)
		if (deps == null)
		{
			deps = new HashSet<String>()
			projdeps.put(subproj, deps)
		}
		deps.add(line)	
	}
}
depconfreader.close()

/*gradle.ext.maindistartifacts.each { mainart ->
	addDependency(mainart, projdeps, gradle.ext.includeartifacts)
}*/

gradle.ext.selecteddists.each { seldist ->
	if (seldist.startsWith('addon')) {
		gradle.ext.distartmap.get(seldist).each { art ->
			addDependency(art, projdeps, gradle.ext.includeartifacts)
		}
	}
}
gradle.ext.includeartifacts.addAll(gradle.ext.maindistartifacts)

include gradle.ext.includeartifacts.toArray(new String[gradle.ext.includeartifacts.size()])


// the plugins depend on other projects to be deployed, so they have to be standalone
//'jadex-android-maven-plugin',
// android-specific modules:
/*if (androidSdkExists()) {
    include\
    'jadex-gradle-plugin',
    'jadex-android-antlr',
    'jadex-android-commons',
    'jadex-android-xmlpull',
    'jadex-android-bluetooth',
//    'jadex-android-integration-test',
//    'jadex-android-maven-plugin',
    'jadex-android-platformclient',
//    'jadex-android-testlauncher',

    'jadex-kernel-bdiv3-android',
    'jadex-platform-android',
    'jadex-platform-extension-webservice-android',
    'jadex-runtimetools-android'


    def pluginBootstrap = System.getProperty('gradlePluginBootstrap')

    if (!pluginBootstrap
            && !calledWithTask('uploadGradlePluginArchives')
            && !calledWithTask('buildGradlePluginArchives')
            && !calledWithTask('installGradlePluginArchives')) {
        include\
        'jadex-applications-android:jadex-applications-android-chat',
        'jadex-applications-android:jadex-applications-android-puzzle',
        'jadex-applications-android-demos',
        'jadex-android-platformapp'
    }

} else {
    logger.warn('Cannot compile android projects: No Android SDK found.\n' +
            'To include android projects in build, set ANDROID_HOME to your android sdk root.')
}*/

//include 'jadex-test'

def addDependency(artifact, projdeps, includeartifacts)
{
	if (!includeartifacts.contains(artifact))
	{
		includeartifacts.add(artifact)
		projdeps.get(artifact).each { artdep ->
			addDependency(artdep, projdeps, includeartifacts)
		}
	}
}
