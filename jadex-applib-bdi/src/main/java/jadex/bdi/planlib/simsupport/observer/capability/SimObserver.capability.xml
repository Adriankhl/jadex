<!--
	<H3>The AMS agent.</H3>
	The agent management system. It is actually represented by
	the AMS class. This agent allows the agent-oriented access
	(per message) to the AMS.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="SimObserver"
	package="jadex.bdi.planlib.simsupport.observer.capability">

	<imports>
		<import>java.util.*</import>
		<import>jadex.bridge.ILibraryService</import>
		<import>jadex.bdi.planlib.simsupport.environment.*</import>
		<import>jadex.bdi.planlib.simsupport.common.math.*</import>
		<import>jadex.bdi.planlib.simsupport.common.graphics.IViewport</import>
		<import>jadex.bdi.planlib.simsupport.common.graphics.drawable.*</import>
	</imports>

	<beliefs>
		<!-- Name of the environment -->
		<belief name="environment_name" class="String" exported="true">
			<fact>null</fact>
		</belief>
		
		<!-- Offer canvas access for building a custom GUI. -->
		<belief name="custom_gui" class="Boolean" exported="true">
			<fact>new Boolean(false)</fact>
		</belief>
		
		<!-- Custom plugins to load into the standard GUI. -->
		<beliefset name="custom_plugins" class="IObserverCenterPlugin" exported="true"/>
		
		<!-- Size of the displayed area if different from the world area size -->
		<belief name="display_size" class="IVector2" exported="true">
			<fact>null</fact>
		</belief>
		
		<!-- Preservation of area aspect ratio in the window -->
		<belief name="preserve_aspect_ratio" class="Boolean" exported="true">
			<fact>new Boolean(true)</fact>
		</belief>
		
		<!-- X-axis inversion (right-left instead of left-right) -->
		<belief name="invert_x_axis" class="Boolean" exported="true">
			<fact>new Boolean(false)</fact>
		</belief>
		
		<!-- Y-axis inversion (top-down instead of bottom-up) -->
		<belief name="invert_y_axis" class="Boolean" exported="true">
			<fact>new Boolean(false)</fact>
		</belief>
		
		<!-- The target frame rate -->
		<belief name="frame_rate" class="Integer" exported="true">
			<fact>30</fact>
		</belief>
		
		<!-- Force the use of Java2D -->
		<belief name="force_java2d" class="Boolean" exported="true">
			<fact>new Boolean(false)</fact>
		</belief>
		
		<!-- Shift for the object marker -->
		<belief name="object_shift" class="IVector2" exported="true">
			<fact>new Vector2Double(0.0)</fact>
		</belief>
		
		<!-- List of themes for displaying objects -->
		<belief name="object_themes" class="Map" exported="true">
			<fact>Collections.synchronizedMap(new HashMap())</fact>
		</belief>
		
		<!-- Order in which objects are drawn. -->
		<belief name="draw_order" class="Comparator" exported="true">
			<fact>null</fact>
		</belief>
		
		<!-- The pre-layers -->
		<belief name="prelayer_themes" class="Map" exported="true">
			<fact>new HashMap()</fact>
		</belief>
		
		<!-- The post-layers -->
		<belief name="postlayer_themes" class="Map" exported="true">
			<fact>new HashMap()</fact>
		</belief>
		
		<!-- The canvas for integration in a custom GUI.
			 Only exposed if custom_gui is true. -->
		<belief name="canvas" class="java.awt.Canvas" exported="true">
			<fact>null</fact>
		</belief>
		
		<!-- The currently selected theme. -->
		<belief name="selected_theme" class="String" exported="true"/>
		
		<!-- Maximum distance of a point clicked on the screen and
			 and the position of an object to be considered in range. -->
		<belief name="selector_distance" class="IVector1" exported="true">
			<fact>new Vector1Double(1.0)</fact>
		</belief>
		
		<!-- The currently marked object. -->
		<belief name="marked_object" class="Integer" exported="true">
			<fact>null</fact>
		</belief>
		
		<belief name="object_marker" class="DrawableCombiner"/>
		
		<belief name="viewport" class="IViewport"/>
		
		<belief name="simulation_engine_access" class="IExternalEngineAccess"/>
    	
		<belief name="local_simulation_engine" class="ISimulationEngine"/>
		
		<belief name="library_service" class="ILibraryService"/>
	</beliefs>

	<goals>
		<!-- Starts the observer -->
		<achievegoal name="simobs_start" exported="true" />
		
		<performgoal name="simobs_update_display" /> <!-- retry="true" retrydelay="0" exclude="never"/> --> 
	</goals>

	<plans>
		<!-- Startup Plan. -->
    	<plan name="start_observer_plan">
      		<body class="StartObserverPlan"/>
      		<trigger>
      			<goal ref="simobs_start"/>
      		</trigger>
    	</plan>
    	
    	<plan name="update_display_locally_plan">
			<body class="LocalUpdateDisplayPlan"/>
			<trigger>
				<goal ref="simobs_update_display"/>
			</trigger>
			<precondition>$beliefbase.local_simulation_engine!=null</precondition>
		</plan>
	</plans>

	<properties>
	</properties>
</capability>