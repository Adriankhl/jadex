<!--
	The ping capability helps integrating ping behaviour for agents.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Ping">

	<imports>
		<import>jadex.adapter.base.fipa.*</import>
		<import>jadex.bdi.planlib.ping.*</import>
		<import>jadex.bdi.runtime.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.bdi.planlib.protocols.query.Query" />
	</capabilities>

	<beliefs>
		<belief name="ping_timeout" class="Long" exported="true">
			<fact>1000</fact>
		</belief>
		<belief name="ping_delay" class="long" exported="true">
			<fact>1000</fact>
		</belief>
		<belief name="ping_content" class="String" exported="true">
			<fact>"ping"</fact>
		</belief>
		<belief name="ping_answer" class="String" exported="true">
			<fact>"alive"</fact>
		</belief>
		
		<beliefref name="qp_filter">
			<concrete ref="procap.qp_filter"/>
		</beliefref>
	</beliefs>

	<goals>
		<achievegoal name="pinging" exported="true" exclude="never">
			<parameter name="timeout" class="Long">
				<value>$beliefbase.ping_timeout</value>
			</parameter>
			<parameter name="content" class="String">
				<value>$beliefbase.ping_content</value>
			</parameter>
			<parameter name="receiver" class="jadex.bridge.IAgentIdentifier" />
			<parameter name="ping_delay" class="long">
				<value>$beliefbase.ping_delay</value>
			</parameter>
			<parameter name="missed_cnt" class="int" direction="inout" />
			<parameter name="missed_max" class="int">
				<value>3</value>
			</parameter>
			<targetcondition language="jcl">
				false // (i.e. never finished)
				
				// (test (jadex.rules.rulesystem.rules.functions.Identity false))
			</targetcondition>
			<dropcondition language="jcl">
				// Finished if pinged agent misses max pings.
				$goal.missed_cnt > $goal.missed_max
				
				// ?rparammax = (parameter (parameter_has_name "missed_max") (parameter_has_value ?max))
				// ?rparamcnt = (parameter (parameter_has_name "missed_cnt") (parameter_has_value > ?max))
				// ?rgoal = (goal (parameterelement_has_parameters contains ?rparammax) (parameterelement_has_parameters contains ?rparamcnt))
			</dropcondition>
		</achievegoal>
	
		<achievegoal name="ping" exported="true">
			<parameter name="timeout" class="Long">
				<value>$beliefbase.ping_timeout</value>
			</parameter>
			<parameter name="content" class="String">
				<value>$beliefbase.ping_content</value>
			</parameter>
			<parameter name="receiver" class="jadex.bridge.IAgentIdentifier" />
		</achievegoal>
		
		<achievegoalref name="qp_execute_request">
			<concrete ref="procap.qp_execute_request"/>
		</achievegoalref>
	</goals>

	<plans>
		<!-- This plan initiates a ping request. -->
		<plan name="do_ping">
			<parameter name="content" class="String">
				<goalmapping ref="ping.content"/>
			</parameter>
			<parameter name="timeout" class="long">
				<goalmapping ref="ping.timeout"/>
			</parameter>
			<parameter name="receiver" class="jadex.bridge.IAgentIdentifier">
				<goalmapping ref="ping.receiver"/>
			</parameter>
			<body class="DoPingPlan" />
			<trigger>
				<goal ref="ping"/>
			</trigger>
		</plan>

		<!-- Initial plan that continually send ping
			messages to another agent. -->
		<plan name="do_pinging">
			<parameter name="content" class="String">
				<goalmapping ref="pinging.content"/>
			</parameter>
			<parameter name="timeout" class="long">
				<goalmapping ref="pinging.timeout"/>
			</parameter>
			<parameter name="receiver" class="jadex.bridge.IAgentIdentifier">
				<goalmapping ref="pinging.receiver"/>
			</parameter>
			<parameter name="ping_delay" class="jadex.bridge.IAgentIdentifier">
				<goalmapping ref="pinging.ping_delay"/>
			</parameter>
			<parameter name="missed_cnt" class="int" direction="inout">
				<goalmapping ref="pinging.missed_cnt"/>
			</parameter>
			<body class="PingingPlan" />
			<trigger>
				<goal ref="pinging"/>
			</trigger>
		</plan>
		
		<!-- This plan sends back an alive on a ping request. -->
		<plan name="answer_ping">
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="qp_execute_request.result"/>
			</parameter>
			<body class="AnswerPingPlan" />
			<trigger>
				<goal ref="qp_execute_request"/>
			</trigger>
		</plan>
	</plans>	

	<configurations>
		<configuration name="send_receive">
			<beliefs>
				<initialbelief ref="qp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
		</configuration>
		<configuration name="send" />
	</configurations>

</capability>
