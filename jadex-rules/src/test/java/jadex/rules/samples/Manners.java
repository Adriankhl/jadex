package jadex.rules.samples;import jadex.rules.rulesystem.IAction;import jadex.rules.rulesystem.ICondition;import jadex.rules.rulesystem.IRule;import jadex.rules.rulesystem.IVariableAssignments;import jadex.rules.rulesystem.LIFOAgenda;import jadex.rules.rulesystem.RuleSystem;import jadex.rules.rulesystem.Rulebase;import jadex.rules.rulesystem.rete.RetePatternMatcherFunctionality;import jadex.rules.rulesystem.rete.viewer.RuleSystemExecutor;import jadex.rules.rulesystem.rules.AndCondition;import jadex.rules.rulesystem.rules.BoundConstraint;import jadex.rules.rulesystem.rules.IOperator;import jadex.rules.rulesystem.rules.LiteralConstraint;import jadex.rules.rulesystem.rules.NotCondition;import jadex.rules.rulesystem.rules.ObjectCondition;import jadex.rules.rulesystem.rules.Rule;import jadex.rules.rulesystem.rules.Variable;import jadex.rules.state.IOAVState;import jadex.rules.state.OAVAttributeType;import jadex.rules.state.OAVJavaType;import jadex.rules.state.OAVObjectType;import jadex.rules.state.OAVTypeModel;import jadex.rules.state.javaimpl.OAVState;import java.io.IOException;import java.io.InputStreamReader;import java.io.LineNumberReader;
/**
 *  The manners benchmark. 
 */
public class Manners
{	protected static boolean	print;	
	//-------- type definitions --------		/** The manners type definition. */	public static final OAVTypeModel	manners_type_model;
		/** The guest type. */	public static final OAVObjectType guest_type;		/** A guest has a name. */	public static final OAVAttributeType guest_has_name;		/** A guest has a sex. */	public static final OAVAttributeType guest_has_sex;		/** A guest has hobbies. */	//public static OAVAttributeType guest_has_hobbies;	public static final OAVAttributeType guest_has_hobby;			   		/** The last seat type. */	public static final OAVObjectType lastseat_type;		/** A last seat has a set. */	public static final OAVAttributeType lastseat_has_seat;			/** The seating type. */	public static final OAVObjectType seating_type;		/** A seating has a seat1. */	public static final OAVAttributeType seating_has_seat1;		/** A seating has a seat2. */	public static final OAVAttributeType seating_has_seat2;		/** A seating has a seat1. */	public static final OAVAttributeType seating_has_name1;		/** A seating has a seat2. */	public static final OAVAttributeType seating_has_name2;		/** A seating has an id. */	public static final OAVAttributeType seating_has_id;		/** A seating has an pid. */	public static final OAVAttributeType seating_has_pid;		/** A seating has an pathdone. */	public static final OAVAttributeType seating_has_pathdone;			/** The context type. */
	public static final OAVObjectType context_type;
	
	/** A context has a state. */
	public static final OAVAttributeType context_has_state;
	
		/** The path type. */	public static final OAVObjectType path_type;		/** A path has an id. */	public static final OAVAttributeType path_has_id;	/** A path has a name. */	public static final OAVAttributeType path_has_name;		/** A path has a seat. */	public static final OAVAttributeType path_has_seat;			/** The chosen type. */	public static final OAVObjectType chosen_type;		/** A chosen has an id. */	public static final OAVAttributeType chosen_has_id;	/** A chosen has a name. */	public static final OAVAttributeType chosen_has_name;		/** A chosen has a hobby. */	public static final OAVAttributeType chosen_has_hobby;
			/** The count type. */	public static final OAVObjectType count_type;		/** A count has a c. */	public static final OAVAttributeType count_has_c;
	
	
	static
	{		manners_type_model	= new OAVTypeModel("manners_type_model");		manners_type_model.addTypeModel(OAVJavaType.java_type_model);		
		guest_type = manners_type_model.createType("guest");
		guest_has_name = guest_type.createAttributeType("guest_has_name", OAVJavaType.java_string_type);
		guest_has_sex = guest_type.createAttributeType("guest_has_sex", OAVJavaType.java_string_type);
		guest_has_hobby = guest_type.createAttributeType("guest_has_hobby", OAVJavaType.java_string_type);					lastseat_type = manners_type_model.createType("lastseat");		lastseat_has_seat = lastseat_type.createAttributeType("lastseat_has_seat", OAVJavaType.java_integer_type);				seating_type = manners_type_model.createType("seating");		seating_has_seat1 = seating_type.createAttributeType("seating_has_seat1", OAVJavaType.java_integer_type);		seating_has_seat2 = seating_type.createAttributeType("seating_has_seat2", OAVJavaType.java_integer_type);		seating_has_name1 = seating_type.createAttributeType("seating_has_name1", OAVJavaType.java_string_type);		seating_has_name2 = seating_type.createAttributeType("seating_has_name2", OAVJavaType.java_string_type);		seating_has_id = seating_type.createAttributeType("seating_has_id", OAVJavaType.java_integer_type);		seating_has_pid = seating_type.createAttributeType("seating_has_pid", OAVJavaType.java_integer_type);		seating_has_pathdone = seating_type.createAttributeType("seating_has_pathdone", OAVJavaType.java_boolean_type, OAVAttributeType.NONE, Boolean.FALSE);				context_type = manners_type_model.createType("context");		context_has_state = context_type.createAttributeType("context_has_state", OAVJavaType.java_string_type);				path_type = manners_type_model.createType("path");		path_has_id = path_type.createAttributeType("path_has_id", OAVJavaType.java_integer_type);		path_has_name = path_type.createAttributeType("path_has_name", OAVJavaType.java_string_type);		path_has_seat = path_type.createAttributeType("path_has_seat", OAVJavaType.java_integer_type);					chosen_type = manners_type_model.createType("chosen");		chosen_has_id = chosen_type.createAttributeType("chosen_has_id", OAVJavaType.java_integer_type);		chosen_has_name = chosen_type.createAttributeType("chosen_has_name", OAVJavaType.java_string_type);		chosen_has_hobby = chosen_type.createAttributeType("chosen_has_hobby", OAVJavaType.java_string_type);					count_type = manners_type_model.createType("count");		count_has_c = count_type.createAttributeType("chosen_has_c", OAVJavaType.java_integer_type);	}
	
	/**
	 *  Main for testing. 
	 */
	public static void main(String[] args)
	{		IOAVState state = new OAVState(manners_type_model);		loadData(state, "/jadex/rules/samples/manners4.fct");//		print	= true;		Rulebase	rb	= new Rulebase();		RuleSystem rete = new RuleSystem(state, rb, new RetePatternMatcherFunctionality(rb), new LIFOAgenda());				rete.getRulebase().addRule(createAssignFirstSeatRule());		rete.getRulebase().addRule(createFindSeatingRule());				// Switched make-path and path-done to assure that		// make-path activations get executed first in LIFO strategy		rete.getRulebase().addRule(createPathDoneRule());		rete.getRulebase().addRule(createMakePathRule());		// Switched are-we-done and continue to assure that		// are-we-done activations get executed first in LIFO strategy		rete.getRulebase().addRule(createContinueRule());		rete.getRulebase().addRule(createAreWeDoneRule());		rete.getRulebase().addRule(createPrintResultsRule());		rete.getRulebase().addRule(createAllDoneRule());		// Initialize rule system.		rete.init();//		rete.getAgenda().setHistoryEnabled(true);				state.notifyEventListeners();		RuleSystemExecutor	exe	= new RuleSystemExecutor(rete, true);		exe.createReteFrame("Miss Manners Rete Structure");	}		//-------- rules --------		/**	 *  Create rule "assign first seat". 	 */	protected static IRule createAssignFirstSeatRule()	{		//		;;; *****************//		;;; assign_first_seat//		;;; *****************////		(defrule assign_first_seat//		   ?f1 <- (context (state start))//		   (guest (name ?n))//		   ?f3 <- (count (c ?c))//		   =>//		   (assert (seating (seat1 1) (name1 ?n) (name2 ?n) (seat2 1) (id ?c) (pid 0) (path_done yes)))//		   (assert (path (id ?c) (name ?n) (seat 1)))//		   (modify ?f3 (c (+ ?c 1)))//		   (printout ?*output* "seat 1 " ?n " " ?n " 1 " ?c " 0 1" crlf)//		   (modify ?f1 (state assign_seats)))		 		ObjectCondition afs1 = new ObjectCondition(context_type);		afs1.addConstraint(new LiteralConstraint(context_has_state, "start"));		afs1.addConstraint(new BoundConstraint(null, new Variable("?f1", context_type)));				ObjectCondition afs2 = new ObjectCondition(guest_type);		afs2.addConstraint(new BoundConstraint(guest_has_name, new Variable("?n", OAVJavaType.java_string_type)));			ObjectCondition afs3 = new ObjectCondition(count_type);		afs3.addConstraint(new BoundConstraint(count_has_c, new Variable("?c", OAVJavaType.java_integer_type)));		afs3.addConstraint(new BoundConstraint(null, new Variable("?f3", count_type)));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Object f1 = assignments.getVariableValue("?f1");				Object n = assignments.getVariableValue("?n");				Object f3 = assignments.getVariableValue("?f3");				Integer c = (Integer)assignments.getVariableValue("?c");				System.out.println("Assign first seat: "+f1+" "+n+" "+f3+" "+c);								Object seating = state.createRootObject(seating_type);				state.setAttributeValue(seating, seating_has_seat1, new Integer(1));				state.setAttributeValue(seating, seating_has_name1, n);				state.setAttributeValue(seating, seating_has_name2, n);				state.setAttributeValue(seating, seating_has_seat2, new Integer(1));				state.setAttributeValue(seating, seating_has_id, c);				state.setAttributeValue(seating, seating_has_pid, new Integer(0));				state.setAttributeValue(seating, seating_has_pathdone, Boolean.TRUE);								Object path = state.createRootObject(path_type);				state.setAttributeValue(path, path_has_id, c);				state.setAttributeValue(path, path_has_name, n);						state.setAttributeValue(path, path_has_seat, new Integer(1));								state.setAttributeValue(f3, count_has_c, new Integer(c.intValue()+1));									System.out.println("seat 1: "+n+" "+n+" 1 "+c+" 0 1");								state.setAttributeValue(f1, context_has_state, "assign_seats");			}		};				return new Rule("assign first seat", new AndCondition(new ICondition[]{afs1, afs2, afs3}), action);	}		/**	 *  Create find_seating rule.	 */	protected static IRule	createFindSeatingRule()	{//		;;; ************//		;;; find_seating//		;;; ************//		//		(defrule find_seating//		   ?f1 <- (context (state assign_seats))//		   (seating (seat1 ?seat1) (seat2 ?seat2) (name2 ?n2) (id ?id) (pid ?pid) (path_done yes))//		   (guest (name ?n2) (sex ?s1) (hobby ?h1))//		   (guest (name ?g2) (sex ~?s1) (hobby ?h1))//		   ?f5 <- (count (c ?c))//		   (not (path (id ?id) (name ?g2)))//		   (not (chosen (id ?id) (name ?g2) (hobby ?h1)))//		   =>//		   (assert (seating (seat1 ?seat2) (name1 ?n2) (name2 ?g2) (seat2 (+ ?seat2 1)) (id ?c) (pid ?id) (path_done no)))//		   (assert (path (id ?c) (name ?g2) (seat (+ ?seat2 1))))//		   (assert (chosen (id ?id) (name ?g2) (hobby ?h1)))//		   (modify ?f5 (c (+ ?c 1)))//		   (printout ?*output* seat " " ?seat2 " " ?n2 " " ?g2 crlf)//		   (modify ?f1 (state make_path)))				ObjectCondition fs1 = new ObjectCondition(context_type);		fs1.addConstraint(new LiteralConstraint(context_has_state, "assign_seats"));		fs1.addConstraint(new BoundConstraint(null, new Variable("?f1", context_type)));				ObjectCondition fs2 = new ObjectCondition(seating_type);		fs2.addConstraint(new BoundConstraint(seating_has_seat1, new Variable("?seat1", OAVJavaType.java_integer_type)));		fs2.addConstraint(new BoundConstraint(seating_has_seat2, new Variable("?seat2", OAVJavaType.java_integer_type)));		fs2.addConstraint(new BoundConstraint(seating_has_name2, new Variable("?n2", OAVJavaType.java_string_type)));		fs2.addConstraint(new BoundConstraint(seating_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		fs2.addConstraint(new BoundConstraint(seating_has_pid, new Variable("?pid", OAVJavaType.java_integer_type)));		fs2.addConstraint(new LiteralConstraint(seating_has_pathdone, Boolean.TRUE));			ObjectCondition fs3 = new ObjectCondition(guest_type);		fs3.addConstraint(new BoundConstraint(guest_has_name, new Variable("?n2", OAVJavaType.java_string_type)));		fs3.addConstraint(new BoundConstraint(guest_has_sex, new Variable("?s1", OAVJavaType.java_string_type)));		//fs3.addConstraint(new BoundConstraint(guest_has_hobbies, new Variable("?h1", OAVJavaType.java_string_type), IOperator.CONTAINS));		fs3.addConstraint(new BoundConstraint(guest_has_hobby, new Variable("?h1", OAVJavaType.java_string_type)));		ObjectCondition fs4 = new ObjectCondition(guest_type);		fs4.addConstraint(new BoundConstraint(guest_has_name, new Variable("?g2", OAVJavaType.java_string_type)));		fs4.addConstraint(new BoundConstraint(guest_has_sex, new Variable("?s1", OAVJavaType.java_string_type), IOperator.NOTEQUAL));		//fs4.addConstraint(new BoundConstraint(guest_has_hobbies, new Variable("?h1", OAVJavaType.java_string_type), IOperator.CONTAINS));		fs4.addConstraint(new BoundConstraint(guest_has_hobby, new Variable("?h1", OAVJavaType.java_string_type)));		ObjectCondition fs5 = new ObjectCondition(count_type);		fs5.addConstraint(new BoundConstraint(count_has_c, new Variable("?c", OAVJavaType.java_integer_type)));		fs5.addConstraint(new BoundConstraint(null, new Variable("?f5", count_type)));				ObjectCondition fs6temp = new ObjectCondition(path_type);		fs6temp.addConstraint(new BoundConstraint(path_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		fs6temp.addConstraint(new BoundConstraint(path_has_name, new Variable("?g2", OAVJavaType.java_string_type)));		NotCondition	fs6	= new NotCondition(fs6temp);				ObjectCondition fs7temp = new ObjectCondition(chosen_type);		fs7temp.addConstraint(new BoundConstraint(chosen_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		fs7temp.addConstraint(new BoundConstraint(chosen_has_name, new Variable("?g2", OAVJavaType.java_string_type)));		fs7temp.addConstraint(new BoundConstraint(chosen_has_hobby, new Variable("?h1", OAVJavaType.java_string_type)));		NotCondition	fs7	= new NotCondition(fs7temp);				ICondition	fs_condition	= new AndCondition(new ICondition[]{fs1, fs2, fs3, fs4, fs5, fs6, fs7});		IAction fs_action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assigments)			{				Integer	seat2	= (Integer)assigments.getVariableValue("?seat2");				String	n2	= (String)assigments.getVariableValue("?n2");				String	g2	= (String)assigments.getVariableValue("?g2");				Integer	c	= (Integer)assigments.getVariableValue("?c");				Integer	id	= (Integer)assigments.getVariableValue("?id");				Integer	pid	= (Integer)assigments.getVariableValue("?pid");				String	h1	= (String)assigments.getVariableValue("?h1");				Object	f1	= assigments.getVariableValue("?f1");				Object	f5	= assigments.getVariableValue("?f5");								Object	seating	= state.createRootObject(seating_type);				state.setAttributeValue(seating, seating_has_seat1, seat2);				state.setAttributeValue(seating, seating_has_name1, n2);				state.setAttributeValue(seating, seating_has_name2, g2);				state.setAttributeValue(seating, seating_has_seat2, new Integer(seat2.intValue()+1));				state.setAttributeValue(seating, seating_has_id, c);				state.setAttributeValue(seating, seating_has_pid, id);								Object	path	= state.createRootObject(path_type);				state.setAttributeValue(path, path_has_id, c);				state.setAttributeValue(path, path_has_name, g2);				state.setAttributeValue(path, path_has_seat, new Integer(seat2.intValue()+1));								Object	chosen	= state.createRootObject(chosen_type);				state.setAttributeValue(chosen, chosen_has_id, id);				state.setAttributeValue(chosen, chosen_has_name, g2);				state.setAttributeValue(chosen, chosen_has_hobby, h1);								state.setAttributeValue(f5, count_has_c, new Integer(c.intValue()+1));								if(print)					System.out.println("find seating: seat2="+seat2+", n2="+n2+", g2="+g2+", pid="+pid);								state.setAttributeValue(f1, context_has_state, "make_path");			}		};				return new Rule("find seating", fs_condition, fs_action);	}		/**	 *  Create rule "make path". 	 */	protected static IRule createMakePathRule()	{//		;;; *********//		;;; make_path//		;;; *********////		(defrule make_path//		   (context (state make_path))//		   (seating (id ?id) (pid ?pid) (path_done no))//		   (path (id ?pid) (name ?n1) (seat ?s))//		   (not (path (id ?id) (name ?n1)))//		   =>//		   (assert (path (id ?id) (name ?n1) (seat ?s))))		ObjectCondition mk1 = new ObjectCondition(context_type);		mk1.addConstraint(new LiteralConstraint(context_has_state, "make_path"));				ObjectCondition mk2 = new ObjectCondition(seating_type);		mk2.addConstraint(new BoundConstraint(seating_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		mk2.addConstraint(new BoundConstraint(seating_has_pid, new Variable("?pid", OAVJavaType.java_integer_type)));		mk2.addConstraint(new LiteralConstraint(seating_has_pathdone, Boolean.FALSE));				ObjectCondition mk3 = new ObjectCondition(path_type);		mk3.addConstraint(new BoundConstraint(path_has_id, new Variable("?pid", OAVJavaType.java_integer_type)));		mk3.addConstraint(new BoundConstraint(path_has_name, new Variable("?n1", OAVJavaType.java_integer_type)));		mk3.addConstraint(new BoundConstraint(path_has_seat, new Variable("?s", OAVJavaType.java_integer_type)));		ObjectCondition oc4 = new ObjectCondition(path_type);		oc4.addConstraint(new BoundConstraint(path_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		oc4.addConstraint(new BoundConstraint(path_has_name, new Variable("?n1", OAVJavaType.java_integer_type)));		NotCondition mk4 = new NotCondition(oc4);				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Integer	id	= (Integer)assignments.getVariableValue("?id");				String	n1	= (String)assignments.getVariableValue("?n1");				Integer	s	= (Integer)assignments.getVariableValue("?s");								if(print)					System.out.println("Make path: "+id+" "+n1+" "+s);								Object	path	= state.createRootObject(path_type);				state.setAttributeValue(path, path_has_id, id);				state.setAttributeValue(path, path_has_name, n1);				state.setAttributeValue(path, path_has_seat, s);			}		};				return new Rule("make path", new AndCondition(new ICondition[]{mk1, mk2, mk3, mk4}), action);	}		/**	 *  Create rule "path done". 	 */	protected static IRule createPathDoneRule()	{//		;;; *********//		;;; path_done//		;;; *********////		(defrule path_done//		   ?f1 <- (context (state make_path))//		   ?f2 <- (seating (path_done no))//		   =>//		   (modify ?f2 (path_done yes))//		   (modify ?f1 (state check_done)))		 		ObjectCondition pd1 = new ObjectCondition(context_type);		pd1.addConstraint(new LiteralConstraint(context_has_state, "make_path"));		pd1.addConstraint(new BoundConstraint(null, new Variable("?f1", context_type)));				ObjectCondition pd2 = new ObjectCondition(seating_type);		pd2.addConstraint(new LiteralConstraint(seating_has_pathdone, Boolean.FALSE));		pd2.addConstraint(new BoundConstraint(null, new Variable("?f2", seating_type)));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Object f1 = assignments.getVariableValue("?f1");				Object f2 = assignments.getVariableValue("?f2");								if(print)					System.out.println("Path done: "+f1+" "+f2);								state.setAttributeValue(f2, seating_has_pathdone, Boolean.TRUE);				state.setAttributeValue(f1, context_has_state, "check_done");			}		};				return new Rule("path done", new AndCondition(new ICondition[]{pd1, pd2}), action);	}		/**	 *  Create rule "we are done". 	 */	protected static IRule createAreWeDoneRule()	{//		;;; ***********//		;;; are_we_done//		;;; ***********////		(defrule are_we_done//		   ?f1 <- (context (state check_done))//		   (last_seat (seat ?l_seat))//		   (seating (seat2 ?l_seat))//		   =>//		   (printout ?*output* crlf "Yes, we are done!!" crlf)//		   (modify ?f1 (state print_results)))		 		ObjectCondition awd1 = new ObjectCondition(context_type);		awd1.addConstraint(new LiteralConstraint(context_has_state, "check_done"));		awd1.addConstraint(new BoundConstraint(null, new Variable("?f1", context_type)));				ObjectCondition awd2 = new ObjectCondition(lastseat_type);		awd2.addConstraint(new BoundConstraint(lastseat_has_seat, new Variable("?l_seat", OAVJavaType.java_integer_type)));				ObjectCondition awd3 = new ObjectCondition(seating_type);		awd3.addConstraint(new BoundConstraint(seating_has_seat2, new Variable("?l_seat", OAVJavaType.java_integer_type)));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Object f1 = assignments.getVariableValue("?f1");				System.out.println("Yes, we are done!! "+f1);								state.setAttributeValue(f1, context_has_state, "print_results");			}		};				return new Rule("are we done", new AndCondition(new ICondition[]{awd1, awd2, awd3}), action);	}		/**	 *  Create rule "continue". 	 */	protected static IRule createContinueRule()	{//		;;; ********//		;;; continue//		;;; ********////		(defrule continue//		   ?f1 <- (context (state check_done))//		   =>//		   (modify ?f1 (state assign_seats)))		 		ObjectCondition c = new ObjectCondition(context_type);		c.addConstraint(new LiteralConstraint(context_has_state, "check_done"));		c.addConstraint(new BoundConstraint(null, new Variable("?f1", context_type)));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Object f1 = assignments.getVariableValue("?f1");				if(print)					System.out.println("Continue: "+f1);								state.setAttributeValue(f1, context_has_state, "assign_seats");			}		};				return new Rule("continue", c, action);			}		/**	 *  Create rule "print results". 	 */	protected static IRule createPrintResultsRule()	{//		;;; *************//		;;; print_results//		;;; *************////		(defrule print_results//		   (context (state print_results))//		   (seating (id ?id) (seat2 ?s2))//		   (last_seat (seat ?s2))//		   ?f4 <- (path (id ?id) (name ?n) (seat ?s))//		   =>//		   (retract ?f4)//		   (printout ?*output* ?n " " ?s crlf))		 		ObjectCondition pr1 = new ObjectCondition(context_type);		pr1.addConstraint(new LiteralConstraint(context_has_state, "print_results"));				ObjectCondition pr2 = new ObjectCondition(seating_type);		pr2.addConstraint(new BoundConstraint(seating_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		pr2.addConstraint(new BoundConstraint(seating_has_seat2, new Variable("?s2", OAVJavaType.java_integer_type)));				ObjectCondition pr3 = new ObjectCondition(lastseat_type);		pr3.addConstraint(new BoundConstraint(lastseat_has_seat, new Variable("?s2", OAVJavaType.java_integer_type)));		ObjectCondition pr4 = new ObjectCondition(path_type);		pr4.addConstraint(new BoundConstraint(path_has_id, new Variable("?id", OAVJavaType.java_integer_type)));		pr4.addConstraint(new BoundConstraint(path_has_name, new Variable("?n", OAVJavaType.java_string_type)));		pr4.addConstraint(new BoundConstraint(path_has_seat, new Variable("?s", OAVJavaType.java_integer_type)));		pr4.addConstraint(new BoundConstraint(null, new Variable("?f4", path_type)));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				Object f4 = assignments.getVariableValue("?f4");				Object n = assignments.getVariableValue("?n");				Object s = assignments.getVariableValue("?s");				System.out.println("Result: guest="+n+" seat="+s);								state.dropObject(f4);			}		};				return new Rule("print results", new AndCondition(new ICondition[]{pr1, pr2, pr3, pr4}), action);	}			/**	 *  Create rule "all done".	 */	protected static IRule createAllDoneRule()	{//		;;; ********//		;;; all_done//		;;; ********////		(defrule all_done//		   (context (state print_results))//		   =>//		   (halt))		 		ObjectCondition ad = new ObjectCondition(context_type);		ad.addConstraint(new LiteralConstraint(context_has_state, "print_results"));				IAction action = new IAction()		{			public void execute(IOAVState state, IVariableAssignments assignments)			{				System.out.println("TERMINATED!!!");			}		};				return new Rule("all done", ad, action);	}		//-------- helper methods --------	/**	 *  Load a manners data file.	 */	protected static void	loadData(IOAVState state, String file)	{		try		{			LineNumberReader	lnr	= new LineNumberReader(new InputStreamReader(Manners.class.getResourceAsStream(file)));			String	line	= lnr.readLine();			while(line!=null)			{				if(line.startsWith("(guest"))				{					int index	= line.indexOf("(name ");					String	name	= line.substring(index+6, line.indexOf(")", index));					index	= line.indexOf("(sex ");					String	sex	= line.substring(index+5, line.indexOf(")", index));					index	= line.indexOf("(hobby ");					String	hobby	= line.substring(index+7, line.indexOf(")", index));										Object	guest	= state.createRootObject(guest_type);					state.setAttributeValue(guest, guest_has_name, name);					state.setAttributeValue(guest, guest_has_sex, sex);					state.setAttributeValue(guest, guest_has_hobby, hobby);										System.out.println("Created guest: name="+name+", sex="+sex+", hobby="+hobby);				}				else if(line.startsWith("(last_seat"))				{					int index	= line.indexOf("(seat ");					Integer	seat	= new Integer(line.substring(index+6, line.indexOf(")", index)));					Object	lastseat	= state.createRootObject(lastseat_type);					state.setAttributeValue(lastseat, lastseat_has_seat, seat);					System.out.println("Created lastseat: seat="+seat);				}				else if(line.startsWith("(count"))				{					Object	count	= state.createRootObject(count_type);					state.setAttributeValue(count, count_has_c, new Integer(1));					System.out.println("Initialized count: c=1");				}				else if(line.startsWith("(context"))				{					Object	context	= state.createRootObject(context_type);					state.setAttributeValue(context, context_has_state, "start");					System.out.println("Initialized context: state=start");				}				else if(!line.trim().equals(""))				{					throw new RuntimeException("Cannot handle '"+line+"'.");				}				line	= lnr.readLine();			}		}		catch(IOException e)		{			throw new RuntimeException("Error loading: "+file, e);		}	}}
