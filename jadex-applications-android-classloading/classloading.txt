- dexmaker generiert dex zur laufzeit

- byte[] zum Klassen laden bis gingerbread nicht möglich (generateAndLoad methode von dexmaker: http://stackoverflow.com/questions/11785713/how-to-load-a-class-from-a-byte-array-in-android)

- custom class loading: http://android-developers.blogspot.co.nz/2011/07/custom-class-loading-in-dalvik.html


Ansatz:
- Jadex dexen und aufs android filesystem legen
- DexClassLoader lädt dex und speichert optimierte klassen in app-privatem Verzeichnis
- LoaderActivity lädt mit diesem ClassLoader die eigentliche (User-)Activity. Die wird dann natürlich vom parent loader geladen.
- UserActivity erbt aber von JadexAndroidActivity, die der parent loader nicht kennt
-> parent
   |
   |-- DexLoader mit jadex .dex im Pfad
   |
   |-- PathLoader mit .apk im Pfad
   

Probleme:

- Kompilieren der User-App: braucht alle Abhängigkeiten als [provided]. Das unterstützt der Eclipse-Buildprozess aber nicht!

- Man kann keine Activity mit einem eigenen Classloader laden! Activities werden immer vom System gestartet per Intent...
	https://groups.google.com/forum/?fromgroups#!topic/android-developers/9Wd5czPlDjI
	
- Lösung: Anwendung besteht nur aus einer Activity, der Content wird dynamisch ersetzt.
  D.h. User erweitert nichtmehr Activity, sondern eigene Basisklasse. Aufwändig!
  Außerdem keine Intents mehr verwendbar.
  
- Lösung Service: MetaService, Schnittstelle zur activity generisch, Aufrufe werden zu userService weitergeleitet -> dynamicProxy
  userService wird von eigenem Classloader geladen. 

http://stackoverflow.com/questions/10832029/custom-class-loader-for-android
http://lsd.luminis.nl/osgi-on-google-android-using-apache-felix/