//ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')

class VersionLoader {

    private static ProjectVersion version

    static ProjectVersion getVersion(Project rootProject) {
        if (version == null) {
            def props = new Properties()
            props.load(new FileReader("$rootProject.rootDir/src/main/buildutils/jadexversion.properties"))

            // Version numbers
            def major = props.getProperty('jadexversion_major')
            def minor = props.getProperty('jadexversion_minor')

            def patch = props.getProperty('jadexversion_patch')

            if (patch.contains('$') || patch.isEmpty()) {
                patch = System.env.BUILD_VERSION_SUFFIX
            }

            version = new ProjectVersion(major, minor, patch)

            println "Loaded Version from properties: $version"

            return version;
        }
    }
}

version = VersionLoader.getVersion(project.rootProject)
project.ext.jadex_build_version = version.toString()


class ProjectVersion {
    public final Integer major
    public final Integer minor
    public final String patch


    ProjectVersion(String major, String minor, String patch) {
        this.major = Integer.parseInt(major)
        this.minor = Integer.parseInt(minor)
        this.patch = patch
    }

    ProjectVersion(Integer major, Integer minor, String patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    @Override
    String toString() {
        String fullVersion = "$major.$minor"

        if (patch) {
            fullVersion += ".$patch"
        } else {
            fullVersion +=".unknown"
        }

        fullVersion
    }
}