//ext.buildTimestamp = new Date().format('yyyy-MM-dd HH:mm:ss')

public class VersionLoader {

    private static ProjectVersion version

    public static String workspaceRootDir

    static ProjectVersion getVersion(File rootDir) {
        if (version == null) {
            def propFile = new File("$rootDir/src/main/buildutils/jadexversion.properties")
            if (!propFile.exists()) {
                propFile = new File("$workspaceRootDir/src/main/buildutils/jadexversion.properties")
            }
            if (!propFile.exists()) {
                propFile = new File("src/main/buildutils/jadexversion.properties")
            }
            def props = new Properties()
            props.load(new FileReader(propFile))

            // Version numbers
            def major = props.getProperty('jadexversion_major')
            def minor = props.getProperty('jadexversion_minor')

            def patch = props.getProperty('jadexversion_patch')

            String patchInfo =''
            if (patch.contains('$') || patch.isEmpty()) {
                patch = System.env.BUILD_VERSION_SUFFIX
                patchInfo = '(using patch level from environment)'
            }

            version = new ProjectVersion(major, minor, patch)
            println "Version $patchInfo: $version"
        }
        return version;
    }
}

public class ProjectVersion {
    public final Integer major
    public final Integer minor
    public final String patch

    ProjectVersion() {
    }

    ProjectVersion(String major, String minor, String patch) {
        this.major = Integer.parseInt(major)
        this.minor = Integer.parseInt(minor)
        this.patch = patch
    }

    ProjectVersion(Integer major, Integer minor, String patch) {
        this.major = major
        this.minor = minor
        this.patch = patch
    }

    @Override
    String toString() {
        String fullVersion = "$major.$minor"

        if (patch) {
            fullVersion += ".$patch"
        } else {
            fullVersion += ".9999-SNAPSHOT"
        }

        fullVersion
    }
}

ext.VersionLoader = VersionLoader

return VersionLoader.getVersion()