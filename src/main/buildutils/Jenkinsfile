// configure here:
junit = false;
deployDists = true;
publishArtifacts = false;

defaultGradleArgs = " --info --stacktrace"

if (!junit) {
    defaultGradleArgs += " -x test"
}

//node {
//    def lines = runCmdAndSplit("ls -la")
//    println lines
//    for (String line : lines) {
//        println line
//    }
//}

def version

node { // a node is a step with workspace, can be distributed
    stage('checkout') { // only for display purposes
        git url: 'ssh://jenkins@repo.actoron.com:20000/repositories/jadex', branch: 'master'
        echo "testing jenkins with pipeline"
    }

    // TODO determine version by checking how many commits since last release tag?
    //   def v = version(readFile('pom.xml'))

    stage('generate Version') {
        // TODO: reset version number on new minor (or patch?) release:
        // withEnv(['NEXT_BUILD_NUMBER=5']) { ... }
        version = VersionNumber([versionNumberString: '${BUILDS_ALL_TIME}', versionPrefix: ''])
        echo "building version:" + version
    }
}

nodeWithVersion(version) {
    stage('genDepList') {
        sh './gradlew gendeplist'
    }

    stage ('stash sources') {
        stash name: 'sources' // todo share workspace plugin?
    }

    stage('build and test') {
        sh './gradlew -Pdist=addongradleplugin clean build test install -x javadoc' + defaultGradleArgs
        if (junit) junit '**/test-results/*.xml'

        // build everything but javadoc and dont zip dists yet
        withX {
            sh './gradlew -Pdist=publishdists clean build test -x javadoc' + defaultGradleArgs
        }
        if (junit) junit '**/test-results/*.xml'
    }

    stage('stash compiled') {
        stash name: 'compiled'
    }
}

nodeWithVersion(version) {
    stage 'publish' {
        if (publishArtifacts) {
            deleteDir()
            unstash 'compiled'
            sh './gradlew -Pdist=publishdists build' + defaultGradleArgs // TODO: add uploadArchives here
        }
    }
}

parallel (
    'create distributions': {
        if (deployDists) {
            nodeWithVersion(version) {
                deleteDir()
                unstash 'compiled'
                stage('create dists') {
                    withX {
                        sh './gradlew -Pdist=publishdists distZips' + defaultGradleArgs
                    }
                    if (junit) junit '**/test-results/*.xml'
                    stash name: 'dists', includes: 'build/distributions/**'
                }
            }

            def dists = ['minimal', 'standard'] // todo add dists: pro, android, relaystandalone
            def checkDists = [:];

            for (int i = 0; i < dists.size(); i++) {
                def distName = dists[i];
                checkDists["checkdist${distName}"] = {
                    nodeWithVersion(version) {
                        stage("checkDist:${distName}") {
                            deleteDir()
                            unstash 'dists'

                            dir('build/distributions') {
                                sh "mv */jadex-${distName}-*.zip ./"
                                sh 'rm -r sources'
                                compareDist(distName)
                            }
                        }
                    }
                }
            }

            parallel checkDists

            // todo keep artifacts for deployment
        } else {
            echo "nothing to do, deployDists is disabled"
        }
    },

    'docs': {
        if (deployDists) {
            nodeWithVersion(version) {
                deleteDir()
                unstash 'sources'
                sh './gradlew -b docs/mkdocs-ng/build.gradle clean buildDocsZip buildDocsPdf'
                sh './gradlew -Pdist=addonjavadoc clean javadocZip'

                // todo keep docs for deployment
            }
        } else {
            echo "nothing to do, deployDists is disabled"
        }
    },

    // todo if junit
    'performancetests': {
        nodeWithVersion(version) {
            deleteDir()
            unstash 'compiled'
            sh './gradlew performanceTest --info'
            junit '**/test-results/*.xml'
        }
    }
)

// todo deployment

// ------- Helper functions --------

def withX(func) {
    wrap([$class: 'Xvnc', useXauthority: true]) {
        func()
    }
}

String[] runCmdAndSplit(command) {
    def stdout = sh (script: command, returnStdout: true).trim()
    return stdout.split("\n")
}

def nodeWithVersion(String label = '', version, cl) {
    node(label) {
        withEnv(['BUILD_VERSION_SUFFIX='+version]) {
            cl()
        }
    }
}

def compareDist(String distribution) {
    //sh 'if [ -d "sources" ]; then rm -r "sources";fi'
    sh "unzip jadex-${distribution}*-sources.zip"
    // build new dist from sources
    dir ('sources') {
        sh "./gradlew -Pdist=${distribution} distZip -x test -x javadoc" + defaultGradleArgs
    }

    sh 'mkdir rebuild'
    sh 'mv sources/build/distributions/**/*.zip rebuild/'

    sh 'mkdir compare'

    //list zips:
    // list content of distzip (jars): file (no file size)

    String[] files = runCmdAndSplit("ls jadex-${distribution}*.zip")
    println "listing contents of dist: ${files}"

    for (int i = 0; i < files.length; i++) {
        def it = files[i]
        sh "unzip -l \"${it}\" | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > 'compare/${it}.lst' "
    }

    // sources: length, crc32, name
    files = runCmdAndSplit("ls jadex-${distribution}*-sources.zip")
    println "listing contents of sources: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -lv \"$it\" | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > 'compare/${it}.lst' "
    }

    // rebuild dist
    files = runCmdAndSplit("ls rebuild/jadex-${distribution}*.zip")
    println "listing contents of rebuild dist: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -l \"${it}\" | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > \"compare/\$(basename ${it}).lst-rebuild\""
    }

    // rebuild sources
    files = runCmdAndSplit("ls rebuild/jadex-${distribution}*-sources.zip")
    println "listing contents of rebuild sources: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -lv \"${it}\" | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > \"compare/\$(basename ${it}).lst-rebuild\""
    }

    // now compare
    files = runCmdAndSplit("ls compare/*.lst")
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
        echo "checking for difference in ${it} ..."
        sh "diff -w '${it}' '${it}-rebuild' > '${it}'.diff || echo 'rebuild distribution differs from original: ${it.substring(0,it.length()-5)}'"
        // jenkins aborts here if there is a difference.
    }

}

