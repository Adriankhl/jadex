// configure here:
def junit = false;


def defaultGradleArgs = " --info --stacktrace"

if (!junit) {
    defaultGradleArgs += " -x test"
}


node { // a node is a step with workspace, can be distributed
    stage ('checkout') { // only for display purposes
        git url: 'ssh://jenkins@repo.actoron.com:20000/repositories/jadex', branch: 'master'
        echo "testing jenkins with pipeline"
        stash name: 'sources'
    }

    def version
    // TODO determine version by checking how many commits since last release tag?
    //   def v = version(readFile('pom.xml'))

    stage ('generate Version') {
        // TODO: reset version number on new minor (or patch?) release:
        // withEnv(['NEXT_BUILD_NUMBER=5']) { ... }
        version = VersionNumber([versionNumberString: '${BUILDS_ALL_TIME}', versionPrefix: ''])
        echo "building version:" + version
    }

    withEnv(['BUILD_VERSION_SUFFIX='+version]) {
        stage('genDepList') {
            sh './gradlew gendeplist'
        }

        stage('jadex-gradle-plugin') {
            // todo: dummy
            sh 'echo dummystep'
            sleep 10

//            sh './gradlew -Pdist=addongradleplugin clean build test install' + defaultGradleArgs
//            if (junit) junit '**/test-results/*.xml'
        }

        stage('jadex-gradle') {
            // todo: dummy
            sh 'echo dummystep'
            sleep 10

            // build everything but dont zip dists yet
//            wrap([$class: 'Xvnc', useXauthority: true]) {
//                sh './gradlew -Pdist=publishdists clean build' + defaultGradleArgs
//            }
//            if (junit) junit '**/test-results/*.xml'
//            stash name: 'compiled', includes: '*'
        }

        stage('create dists') {
            // todo: dummy
            sh 'echo dummystep'
            sleep 10

//            wrap([$class: 'Xvnc', useXauthority: true]) {
//                sh './gradlew -Pdist=publishdists distZips' + defaultGradleArgs
//            }
//            if (junit) junit '**/test-results/*.xml'
//            //stash name: 'dists', includes: '*'
//            stash name: 'distsources', includes: 'build/distributions/sources/*'
        }
    }
}

def dists = ['minimal', 'standard'] // todo add dists
def checkDists = [:];

for (int i = 0; i < dists.size(); i++) {
    def distName = dists[i];
    checkDists["checkdist${distName}"] = {
        node {
            // todo: dummy
            sh 'echo dummystep'
            sleep 30
//            deleteDir()
//            unstash 'distsources'
//            dir('build/distributions/sources') {
//                //sh 'if [ -d "sources" ]; then rm -r "sources";fi'
//                sh "unzip jadex-${distName}*-sources.zip"
//                // todo check dists
//            }
        }
    }
}

parallel (
    'check distributions': {
        parallel checkDists
    },
    'docs': {
        node {
            // todo: dummy
            sh 'echo dummystep'
            sleep 30
//            deleteDir()
//            unstash 'sources'
//            sh './gradlew -b docs/mkdocs-ng/build.gradle clean buildDocsZip buildDocsPdf'
//            sh './gradlew -Pdist=addonjavadoc clean javadocZip'
        }
    }
)

