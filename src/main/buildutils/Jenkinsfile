// configure here:
def junit = false;
def deployDists = false;

def defaultGradleArgs = " --info --stacktrace"

if (!junit) {
    defaultGradleArgs += " -x test"
}


node { // a node is a step with workspace, can be distributed
    stage ('checkout') { // only for display purposes
        git url: 'ssh://jenkins@repo.actoron.com:20000/repositories/jadex', branch: 'master'
        echo "testing jenkins with pipeline"
        stash name: 'sources'
    }

    def version
    // TODO determine version by checking how many commits since last release tag?
    //   def v = version(readFile('pom.xml'))

    stage ('generate Version') {
        // TODO: reset version number on new minor (or patch?) release:
        // withEnv(['NEXT_BUILD_NUMBER=5']) { ... }
        version = VersionNumber([versionNumberString: '${BUILDS_ALL_TIME}', versionPrefix: ''])
        echo "building version:" + version
    }

    withEnv(['BUILD_VERSION_SUFFIX='+version]) {
        stage('genDepList') {
            sh './gradlew gendeplist'
        }

        stage('jadex-gradle-plugin') {
//            sh 'echo dummystep'
//            sleep 10

            sh './gradlew -Pdist=addongradleplugin clean build test install -x javadoc' + defaultGradleArgs
            if (junit) junit '**/test-results/*.xml'
        }

        stage('jadex-gradle') {
//            sh 'echo dummystep'
//            sleep 10

            // build everything but javadoc and dont zip dists yet
            withX {
                sh './gradlew -Pdist=publishdists clean build -x javadoc' + defaultGradleArgs
            }
            if (junit) junit '**/test-results/*.xml'
            stash name: 'compiled', includes: '*'
        }


    }
}


parallel (
    'create distributions': {
        if (deployDists) {
            def dists = ['minimal', 'standard'] // todo add dists: pro, android, relaystandalone
            def checkDists = [:];

            node {
                stage('create dists') {
                    withX {
                        sh './gradlew -Pdist=publishdists distZips' + defaultGradleArgs
                    }
                    if (junit) junit '**/test-results/*.xml'
                    stash name: 'dists', includes: 'build/distributions/*'
                }
            }

            for (int i = 0; i < dists.size(); i++) {
                def distName = dists[i];
                checkDists["checkdist${distName}"] = {
                    node {
                        deleteDir()
                        unstash 'dists'

                        dir('build/distributions') {
                            sh "mv */jadex-${distName}-*.zip ./"
                            sh 'rm -r sources'
                            compareDist($distName)
                        }
                    }
                }
            }

            node {
                stage('check distributions') {
                    parallel checkDists
                }
            }

            // todo deploy dist
        } else {
            echo "nothing to do, deployDists is disabled"
        }
    },

    'docs': {
        node {
            // todo: dummy
            sh 'echo dummystep'
            sleep 30
            deleteDir()
            unstash 'sources'
            sh './gradlew -b docs/mkdocs-ng/build.gradle clean buildDocsZip buildDocsPdf'
            sh './gradlew -Pdist=addonjavadoc clean javadocZip'
        }
    }
)


// todo deployment
def withX(func) {
    wrap([$class: 'Xvnc', useXauthority: true]) {
        func()
    }
}

def compareDist(String distName) {
    //sh 'if [ -d "sources" ]; then rm -r "sources";fi'
    sh "unzip jadex-${distName}*-sources.zip"
    // build new dist from sources
    dir ('sources') {
        sh "./gradlew -Pdist=${distName} distZip -x test -x javadoc" +defaultGradleArgs
    }

    sh 'mkdir rebuild'
    sh 'mv sources/build/distributions/**/*.zip rebuild/'

    sh 'mkdir compare'

    //list zips:
    // list content of distzip (jars): file (no file size)
    new File().eachFile {
        if (it.name.matches("jadex-${distName}.*\\.zip")) {
            sh "unzip -l 'jadex-${distName}*.zip' | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > 'compare/${it.name}.lst' "
        }
    }

    // sources: length, crc32, name

    new File().eachFile {
        if (it.name.matches("jadex-${distName}.*-sources\\.zip")) {
//    for file in jadex-${distribution}*-sources.zip; do
            sh "unzip -lv \"$file\" | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > 'compare/${it.name}.lst' "
        }
    }

    new File('rebuild/').eachFile {
        if (it.name.matches(".*/jadex-${distName}.*\\.zip")) {
            sh "unzip -l $file | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > \"compare/\$(basename ${it.name}).lst-rebuild\""
        }
    }

    new File('rebuild/').eachFile {
        if (it.name.matches(".*/jadex-${distName}.*-sources\\.zip")) {
            sh "unzip -lv $file | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > \"compare/\$(basename ${it.name}).lst-rebuild\""
        }
    }
//    for file in sources/build/distributions/**/jadex-${distribution}*-sources.zip; do
//
//    done
//
//    for file in compare/*.lst; do
//                                echo "checking for difference in $file ..."
//                                diff -w "$file" "$file-rebuild" > $file.diff
//                                // jenkins aborts here if there is a difference
//                            done
}