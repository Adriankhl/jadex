// configure here:
junit = false;
deployDists = true;
publishArtifacts = true;

defaultGradleArgs = " --info --stacktrace"

if (!junit) {
    defaultGradleArgs += " -x test"
}

def version

stage('preparation') {
    node { // a node is a step with workspace, can be distributed
        git url: 'ssh://jenkins@repo.actoron.com:20000/repositories/jadex', branch: 'master'
        echo "testing jenkins with pipeline"

        // TODO determine version by checking how many commits since last release tag?
        //   def v = version(readFile('pom.xml'))

        // TODO: reset version number on new minor (or patch?) release:
        // withEnv(['NEXT_BUILD_NUMBER=5']) { ... }
        version = VersionNumber([versionNumberString: '${BUILDS_ALL_TIME}', versionPrefix: ''])
        echo "building version:" + version
    }

    nodeWithVersion(version) {
        sh './gradlew gendeplist'
        stash name: 'sources'
    }
}

stage('build and test') {
    nodeWithVersion(version) {
        sh './gradlew -Pdist=addongradleplugin clean build test install -x javadoc' + defaultGradleArgs
        if (junit) junit '**/test-results/*.xml'

        withX {
            sh './gradlew -Pdist=publishdists clean build test -x javadoc' + defaultGradleArgs
        }
        if (junit) junit '**/test-results/*.xml'

        stash name: 'compiled'
    }
}

if (deployDists) {
    parallel (
        'create distributions': {
            stage('createDists') {
                nodeWithVersion(version) {
                    deleteDir()
                    unstash 'compiled'
                    withX {
                        sh './gradlew -Pdist=publishdists distZips' + defaultGradleArgs
                    }
                    if (junit) junit '**/test-results/*.xml'
                    stash name: 'dists', includes: 'build/distributions/**'
                }
            }

            stage('checkDists') {
                def dists = ['minimal', 'standard', 'pro', 'android', 'relaystandalone']
                def checkDists = [:];

                for (int i = 0; i < dists.size(); i++) {
                    def distName = dists[i];
                    checkDists["checkdist${distName}"] = {
                        nodeWithVersion(version) {
                            deleteDir()
                            unstash 'dists'
                            dir('build/distributions') {
                                sh "mv */jadex-${distName}-*.zip ./"
                                sh 'rm -r sources'
                                compareDist(distName)
                            }
                        }
                    }
                }
                parallel checkDists
            }
        },

        'docs': {
            stage ('docs') {
                nodeWithVersion(version) {
                    deleteDir()
                    unstash 'sources'
                    sh './gradlew -b docs/mkdocs-ng/build.gradle clean buildDocsZip buildDocsPdf'
                    sh './gradlew -Pdist=addonjavadoc clean javadocZip'
                    stash name: 'docs', includes: 'docs/mkdocs-ng/build/*.zip, docs/mkdocs-ng/build/*.pdf, build/distributions/*.zip'
                }
            }
        },
    )
} else {
    echo "nothing to do, deployDists is disabled"
}

stage ('publish and deploy') {
    parallel (
        'publish and tag': {
            if (publishArtifacts) {
                nodeWithVersion(version) {
                    deleteDir()
                    unstash 'compiled'
                    sh './gradlew -Pdist=publishdists build' + defaultGradleArgs // TODO: add uploadArchives here
                    // TODO tag version
                }
            }
        },

        'deploy': {
            if (deployDists) {
                nodeWithVersion(version) {
                    deleteDir()
                    // gather artifacts:
                    unstash 'docs'
                    sh 'mv docs/mkdocs-ng/build/*.zip docs/mkdocs-ng/build/*.pdf docs/'
                    sh 'mv build/distributions/*.zip docs/'

                    unstash 'compiled'
                    sh 'mkdir schemadoc'
                    sh 'mv **/build/schemadocs/* schemadoc/'

                    sh 'mkdir schemas'
                    sh 'mv **/build/schemas/* schemas/'

                    sh 'mkdir webapps'
                    sh 'mv **/build/libs/*.war webapps/'
                    dir('webapps') {
                        sh 'mv jadex-applications-web-*.war jadex-applications-web.war'
                        sh 'mv jadex-platform-extension-relay-web-*.war relay.war'
                        sh 'mv jadex-servletfilter-web-*.war webapi.war'
                    }

                    unstash 'dists'

                    // todo deploy webapps over ssh
                    // todo deploy schemas to actoron downloads
                    // todo deploy mkdocs (html + pdf)
                    // todo schemadoc
                    // todo deploy distributions + exampleprojects to download

                }
            }
        }
    )
}

if (junit) {
    stage ('performancetests') {
        nodeWithVersion(version) {
            deleteDir()
            unstash 'compiled'
            sh './gradlew performanceTest' + defaultGradleArgs
            junit '**/test-results/*.xml'
        }
    }
}

// ------- Helper functions --------

def withX(func) {
    wrap([$class: 'Xvnc', useXauthority: true]) {
        func()
    }
}

String[] runCmdAndSplit(command) {
    def stdout = sh (script: command, returnStdout: true).trim()
    return stdout.split("\n")
}

def nodeWithVersion(String label = '', version, cl) {
    node(label) {
        tryOrRevertVersion(version) {
            withEnv(['BUILD_VERSION_SUFFIX='+version]) {
                cl()
            }
        }
    }
}

def tryOrRevertVersion(version, cl) {
    try {
        cl()
    } catch (Exception e) {
        println "Build Exception: ${e.getMessage()}"
        revertVersion(version)
        throw e
    }
}


def revertVersion(failedVersion) {
    Integer oldNumber = (failedVersion as Integer) -1;
    echo "resetting version from ${failedVersion} to ${oldNumber}"
    oldNumber = VersionNumber([versionNumberString: '${BUILDS_ALL_TIME}', versionPrefix: '', overrideBuildsAllTime: "${oldNumber}"])
    echo "resetted version to: ${oldNumber}"
}

def compareDist(String distribution) {
    //sh 'if [ -d "sources" ]; then rm -r "sources";fi'
    sh "unzip jadex-${distribution}*-sources.zip"
    // build new dist from sources
    dir ('sources') {
        sh "./gradlew -Pdist=${distribution} distZip -x test -x javadoc" + defaultGradleArgs
    }

    sh 'mkdir rebuild'
    sh 'mv sources/build/distributions/**/*.zip rebuild/'

    sh 'mkdir compare'

    //list zips:
    // list content of distzip (jars): file (no file size)

    String[] files = runCmdAndSplit("ls jadex-${distribution}*.zip")
    println "listing contents of dist: ${files}"

    for (int i = 0; i < files.length; i++) {
        def it = files[i]
        sh "unzip -l \"${it}\" | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > 'compare/${it}.lst' "
    }

    // sources: length, crc32, name
    files = runCmdAndSplit("ls jadex-${distribution}*-sources.zip")
    println "listing contents of sources: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -lv \"$it\" | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > 'compare/${it}.lst' "
    }

    // rebuild dist
    files = runCmdAndSplit("ls rebuild/jadex-${distribution}*.zip")
    println "listing contents of rebuild dist: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -l \"${it}\" | sed '1d' | head -n -1 | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\2/' > \"compare/\$(basename ${it}).lst-rebuild\""
    }

    // rebuild sources
    files = runCmdAndSplit("ls rebuild/jadex-${distribution}*-sources.zip")
    println "listing contents of rebuild sources: ${files}"
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
            sh "unzip -lv \"${it}\" | sed '1d' | sed 's/\\s*\\([0-9]*\\).*[0-2][0-9]:[0-6][0-9]\\(.*\\)/\\1\\t\\2/' > \"compare/\$(basename ${it}).lst-rebuild\""
    }

    // now compare
    files = runCmdAndSplit("ls compare/*.lst")
    for (int i = 0; i < files.length; i++) {
        def it = files[i]
        echo "checking for difference in ${it} ..."
        sh "diff -w '${it}' '${it}-rebuild' > '${it}'.diff || echo 'rebuild distribution differs from original: ${it.substring(0,it.length()-5)}'"
        // jenkins aborts here if there is a difference.
    }

}

