<?xml version="1.0" encoding="UTF-8"?>
<!--
  Bootstrap platform properties.
-->
<componenttype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
						http://jadex.sourceforge.net/jadex-component-2.0.xsd"
	name="Platform" package="de.unihamburg.vsis.jadexAndroid_test">
	
	<imports>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.concurrent.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.base.*</import>
		<import>jadex.base.service.simulation.*</import>
		<import>jadex.base.service.remote.*</import>
		<import>jadex.standalone.service.*</import>
		<import>jadex.component.*</import>
		<import>jadex.application.*</import>
		<import>java.util.*</import>
		<import>java.util.logging.Level</import>
		<import>java.lang.reflect.*</import>
		<import>jadex.benchmarking.services.*</import>
		
		<import>jadex.bridge.service.types.awareness.*</import>
		<import>jadex.bridge.service.types.clock.*</import>
		<import>jadex.bridge.service.types.cms.*</import>
		<import>jadex.bridge.service.types.deployment.*</import>
		<import>jadex.bridge.service.types.df.*</import>
		<import>jadex.bridge.service.types.execution.*</import>
		<import>jadex.bridge.service.types.factory.*</import>
		<import>jadex.bridge.service.types.library.*</import>
		<import>jadex.bridge.service.types.message.*</import>
		<import>jadex.bridge.service.types.remote.*</import>
		<import>jadex.bridge.service.types.settings.*</import>
		<import>jadex.bridge.service.types.simulation.*</import>
		<import>jadex.bridge.service.types.threadpool.*</import>
		
		<import>jadex.base.service.awareness.*</import>
		<import>jadex.base.service.clock.*</import>
		<import>jadex.base.service.cms.*</import>
		<import>jadex.base.service.deployment.*</import>
		<import>jadex.base.service.df.*</import>
		<import>jadex.base.service.execution.*</import>
		<import>jadex.base.service.factory.*</import>
		<import>jadex.base.service.library.*</import>
		<import>jadex.base.service.message.*</import>
		<import>jadex.base.service.remote.*</import>
		<import>jadex.base.service.settings.*</import>
		<import>jadex.base.service.simulation.*</import>
		<import>jadex.base.service.threadpool.*</import>
		<import>jadex.base.service.dependency.maven.*</import>
		
		<import>jadex.base.service.message.transport.*</import>
		<import>jadex.base.service.message.transport.localmtp.*</import>
		<import>jadex.base.service.message.transport.tcpmtp.*</import>
		<import>jadex.base.service.message.transport.niotcpmtp.*</import>
		<import>jadex.base.service.message.transport.btmtp.*</import>
		<import>jadex.base.service.message.transport.codecs.*</import>
		
		<import>jadex.standalone.*</import>
		<import>de.unihamburg.vsis.jadexAndroid_test.*</import>
	</imports>
	
	<arguments>
	
		<!-- ======== Arguments used by starter unless supplied from command line. ======== -->
	
		<!-- The name of the platform component (null for auto generation). -->	
		<argument name="platformname" class="String">"jadex"</argument>
		<!-- The configuration to use. -->	
		<argument name="configname" class="String">"auto"</argument>
		<!-- Automatically shut down the platform when no user agents are running anymore. -->	
		<argument name="autoshutdown" class="boolean">true</argument>
		<!-- Tell the starter to use the standalone adapter factory (usually no need to change). -->	
		<argument name="adapterfactory" class="Class">ComponentAdapterFactory.class</argument>
		<!-- Tell starter to print welcome message. -->
		<argument name="welcome" class="boolean">true</argument>
		
		<!-- ======== Arguments used by platform components. ======== -->
		
		<!-- Start the awareness agent (awa) for automatic platform discovery. -->
		<argument name="awareness" class="boolean">true</argument>
		<!-- Start the JCC agent to open the platform GUI? -->
		<argument name="gui" class="boolean">false</argument>
		<!-- Save platform settings on shutdown? -->
		<argument name="saveonexit" class="boolean">true</argument>
		<!-- Use simulation execution mode? -->
		<argument name="simulation" class="boolean">false</argument>
		<!-- Additional library paths (classpath entries) for loading agent models and classes. -->
		<argument name="libpath" class="String"></argument>
		<!-- Port for TCP transport. -->
		<argument name="tcpport" class="int">9876</argument>
		<!-- Port for NIOTCP transport. -->
		<argument name="niotcpport" class="int">8765</argument>
		<!-- Include entries for awareness agent. -->
		<argument name="awaincludes" class="String">""</argument>
		<!-- Exclude entries for awareness agent. -->
		<argument name="awaexcludes" class="String">""</argument>
		<!-- Flag if copying parameters for local service calls is allowed. -->
		<argument name="parametercopy" class="boolean">true</argument>
		<!-- Flag if nio typ or normal tcp transport should be used. -->
		<argument name="niotransport" class="boolean">true</argument>
		
		<!-- <argument name="platform_shutdown_time">1000</argument> -->
	</arguments>
	
	<componenttypes>
		<componenttype filename="jadex/standalone/extensions/Extensions.component.xml" name="extensions"/>
		
		<componenttype filename="jadex/component/KernelComponent.component.xml" name="kernel_component"/>
		<componenttype filename="jadex/application/KernelApplication.component.xml" name="kernel_application"/>
		<componenttype filename="jadex/micro/KernelMicro.component.xml" name="kernel_micro"/>
		<componenttype filename="jadex/bdi/KernelBDI.component.xml" name="kernel_bdi"/>
		<componenttype filename="jadex/bdibpmn/KernelBDIBPMN.component.xml" name="kernel_bdibpmn"/>
		<componenttype filename="jadex/bpmn/KernelBPMN.component.xml" name="kernel_bpmn"/>
		<componenttype filename="jadex/gpmn/KernelGPMN.component.xml" name="kernel_gpmn"/>
		<componenttype filename="jadex/component/KernelMulti.component.xml" name="kernel_multi"/>
		<componenttype filename="jadex/base/service/remote/RemoteServiceManagementAgent.class" name="rms"/>
		<componenttype filename="jadex/base/service/awareness/management/AwarenessManagementAgent.class" name="awa"/>
		<componenttype filename="de/unihamburg/vsis/jadexAndroid_test/AwarenessNotifierAgent.class" name="btawa"/>
		<!-- <componenttype filename="jadex/tools/jcc/JCC.agent.xml" name="jcc"/> -->
		<!--<componenttype filename="jadex/tools/jcc/JCCAgent.class" name="jcc"/>-->
		<componenttype filename="/jadex/tools/jcc/JCCAgent.class" name="jcc"/>
	</componenttypes>
	
	<services>
		<providedservice class="ISettingsService">
			<implementation>
				new SettingsService($args.platformname, $component, $args.saveonexit)
			</implementation>
		</providedservice>
		<providedservice class="IThreadPool">
			<implementation proxytype="raw">
				new ThreadPoolService(new ThreadPool(new DefaultThreadPoolStrategy(0, 20, 30000, 0)), $component.getServiceProvider())
				//new ThreadPoolService(new ThreadPool(new DefaultThreadPoolStrategy(0, 20, 30000, 500)), $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IExecutionService">
			<implementation proxytype="raw">
				$args.simulation
				? new SyncExecutionService($component.getServiceProvider())
				: new AsyncExecutionService($component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="ILibraryService">
			<implementation proxytype="raw">
				new LibraryService($args.libpath, $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IClockService">
			<implementation proxytype="raw">
				$args.simulation
				? new ClockService(new ClockCreationInfo(IClock.TYPE_EVENT_DRIVEN, "simulation_clock", System.currentTimeMillis(), 100), $component.getServiceProvider())
				: new ClockService(new ClockCreationInfo(IClock.TYPE_SYSTEM, "system_clock", System.currentTimeMillis(), 100), $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IMessageService">
			<implementation proxytype="raw">
				new MessageService($component.getExternalAccess(), $component.getLogger(),
				new ITransport[]
				{
					new BTTransport($component.getServiceProvider()),
					//new NIOTCPTransport($component.getServiceProvider(), $args.niotcpport, java.util.logging.Logger.getLogger("test"))
					new LocalTransport($component.getServiceProvider()),
					$args.niotransport? new NIOTCPTransport($component.getServiceProvider(), $args.niotcpport, $component.getLogger())
					: new TCPTransport($component.getServiceProvider(), $args.tcpport)
				},
				new MessageType[]
				{
					new FIPAMessageType()
				}, null, new CodecFactory()
				)
			</implementation>
		</providedservice>
		<providedservice class="IComponentManagementService">
			<implementation proxytype="raw">
				new ComponentManagementService($component.getExternalAccess(), $component.getComponentAdapter(), 
					$args.componentfactory, $args.parametercopy)
			</implementation>
		</providedservice>
		<providedservice class="IDF">
			<implementation proxytype="raw">
				new DirectoryFacilitatorService($component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="ISimulationService">
			<implementation>
				new SimulationService($component)
			</implementation>
		</providedservice>
		<providedservice class="IDeploymentService">
			<implementation>
				new DeploymentService($component.getServiceProvider())
			</implementation>		
		</providedservice>
		
		<requiredservice name="factoryservices" class="IComponentFactory" multiple="true"/>
	</services>

	<properties>
		<property name="componentviewer.viewerclass">"jadex.base.gui.componentviewer.DefaultComponentServiceViewerPanel"</property>
		<!-- <property name="viewerpanel.componentviewerclass">""</property> -->
		<!-- <property name="logging.level">java.util.logging.Level.INFO</property> -->
		<!-- <property name="logging.level">java.util.logging.Level.WARNING</property> -->
		<property name="logging.level">java.util.logging.Level.SEVERE</property>
	</properties>
	
	<configurations>
		<configuration name="android_fixed">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="awa" type="awa" daemon="true" number="Boolean.TRUE.equals($args.get(&quot;awareness&quot;)) ? 1 : 0">
					<arguments>
						<argument name="includes">$args.awaincludes</argument>
						<argument name="excludes">$args.awaexcludes</argument>
					</arguments>
				</component>
				<component name="jcc" type="jcc" number="Boolean.TRUE.equals($args.get(&quot;gui&quot;)) ? 1 : 0"/>
			</components>
		</configuration>
		
		<configuration name="android_bluetooth">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="awa" type="btawa" daemon="true" number="Boolean.TRUE.equals($args.get(&quot;awareness&quot;)) ? 1 : 0">
					<arguments>
						<argument name="includes">$args.awaincludes</argument>
						<argument name="excludes">$args.awaexcludes</argument>
					</arguments>
				</component>
				<component name="jcc" type="jcc" number="Boolean.TRUE.equals($args.get(&quot;gui&quot;)) ? 1 : 0"/>
			</components>
		</configuration>
	</configurations>
</componenttype>