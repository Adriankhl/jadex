// workaround for javadoc exclusion in main build.gradle
project.javadocJar.enabled=true
project.javadocJar.onlyIf={true}

dependencies
{
    ext.maven_api = "3.1.1"

	compile project(':jadex-bridge')
    compile project(':jadex-platform')
    compile project(':jadex-kernel-bdiv3')

    compile 'org.apache.maven:maven-artifact:' + maven_api
    compile 'org.apache.maven:maven-model:' + maven_api
    compile 'org.apache.maven:maven-core:' + maven_api
    compile 'org.apache.maven:maven-plugin-api:' + maven_api
    compile 'org.apache.commons:commons-io:1.3.2'
}

task pluginDescriptor( type: Exec ) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        final File pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"

        pom.text = pom.text.
                replace('<groupId>unknown</groupId>', "<groupId>${project.group}</groupId>").
                replace('<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>").
                replace('<version>0</version>', """
                                                              |<version>${version}</version>
                                                              |  <packaging>maven-plugin</packaging>
                                                              |  <build>
                                                              |    <directory>\${project.basedir}/build</directory>
                                                              |    <outputDirectory>\${project.build.directory}/classes/main</outputDirectory>
                                                              |  </build>
                                                              |""".stripMargin().trim())
    }
    doLast {
        final pluginDescriptor = new File((File) project.compileJava.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}
project.compileJava.doLast{ pluginDescriptor.execute() }