ext.props = new Properties()
props.load(new FileReader(file("../gradle.properties")))

dependencies
{
    ext.maven_api = "3.1.1"

	compile 'net.sourceforge.jadex:jadex-bridge:' + props.jadex_build_version
    compile 'net.sourceforge.jadex:jadex-platform:' + props.jadex_build_version
    compile 'net.sourceforge.jadex:jadex-kernel-bdiv3:' + props.jadex_build_version

    compile 'org.apache.maven:maven-artifact:' + maven_api
    compile 'org.apache.maven:maven-model:' + maven_api
    compile 'org.apache.maven:maven-core:' + maven_api
    compile 'org.apache.maven:maven-plugin-api:' + maven_api
    compile 'org.sonatype.plexus:plexus-build-api:0.0.7'
    compile 'org.apache.commons:commons-io:1.3.2'
}

task pluginDescriptor( type: Exec ) {
    commandLine 'mvn', '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:3.2:descriptor'
    doFirst {
        final File pom = project.file('pom.xml')
        install.repositories.mavenInstaller.pom.writeTo(pom)
        assert pom.file, "[$pom.canonicalPath] was not created"

        pom.text = pom.text.
                replace('<groupId>unknown</groupId>', """<parent>
                        |   <groupId>${project.group}</groupId>
                        |   <artifactId>jadex-parent</artifactId>
                        |   <version> ${version} </version>
                        |   <relativePath>../jadex-parent/pom.xml</relativePath>
                        |   </parent>
                        |<description>
                        |   Maven Plugin for BDI V3 class generation on compile time.
                        |</description>
                        |""".stripMargin().trim()).
                replace('<artifactId>empty-project</artifactId>', "<artifactId>${project.name}</artifactId>").
                replace('<version>0</version>', """
                                                              |<version>${version}</version>
                                                              |  <packaging>maven-plugin</packaging>
                                                              |  <build>
                                                              |    <directory>\${project.basedir}/build</directory>
                                                              |    <outputDirectory>\${project.build.directory}/classes/main</outputDirectory>
                                                              |  </build>
                                                              |""".stripMargin().trim())
    }
    doLast {
        final pluginDescriptor = new File((File) project.compileJava.destinationDir, 'META-INF/maven/plugin.xml')
        assert pluginDescriptor.file, "[$pluginDescriptor.canonicalPath] was not created"
        println "Plugin descriptor file:$pluginDescriptor.canonicalPath is created successfully"
    }
}
project.compileJava.doLast{ pluginDescriptor.execute() }