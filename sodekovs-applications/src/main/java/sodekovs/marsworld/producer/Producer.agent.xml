<!--
	<H3>Producer agent for producing ore.</H3>

	This Agent is called to move to an Location to produce ore there.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Producer"
	package="sodekovs.marsworld.producer">

	<imports>
		<import>java.util.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.math.*</import>		
		<import>sodekovs.marsworld.*</import>
		<import>sodekovs.marsworld.movement.*</import>
		<import>sodekovs.marsworld.coordination.*</import>
		<import>deco4mas.distributed.coordinate.environment.*</import>		
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.future.*</import>
	</imports>

	<capabilities>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="Movement" />
	</capabilities>

	<beliefs>
	
	<!-- The agent's avatar  in the environment. -->
		<beliefref name="myself">
			<concrete ref="move.myself"/>
		</beliefref>
		
		<!--  Test for evaluation! -->
		<belief name="myPos" class="Vector2Double" evaluationmode="push">
			<fact language="jcl">$beliefbase.myself.position</fact>
		</belief>	
		
		
		<!-- Missionend belief is used in drop condition of produce ore goal. -->
		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>
		
		<!-- Environment. DO NOT CHANGE the name "env".-->
		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)$scope.getParentAccess().getExtension("mycoordspace").get(new ThreadSuspendable())</fact>
		</belief>
		
		<belief name="no_msg_received" class="Integer">
		    <fact>new Integer(0)</fact>
		</belief>
	</beliefs>

  	<goals>
		<!-- Produce ore at a target. -->
		<achievegoal name="produce_ore">
			<parameter name="target" class="ISpaceObject"/>
			<dropcondition language="jcl">
				$beliefbase.missionend
			</dropcondition>
			<deliberation>
				<inhibits cref="move.walk_around"/>
			</deliberation>
		</achievegoal>
	</goals>

	<plans>
		<!-- The main plan handling action requests. -->
		<plan name="producer_plan">
			<body class="ProducerPlan"/>
		</plan>

		<!-- Produce ore at a target. -->
		<plan name="produce_ore_plan">
			<parameter name="target" class="ISpaceObject">
				<goalmapping ref="produce_ore.target"/>
			</parameter>
			<body class="ProduceOrePlan"/>
			<trigger>
				<goal ref="produce_ore"/>
			</trigger>
		</plan>

		<!-- Inform sentries about new targets. -->
		<plan name="informer">
			<body class="InformNewTargetPlan"/>
			<!-- Inform whenever a new fact is added to the belief set my_targets. -->
			<trigger>
				<factadded cref="move.my_targets"/>
			</trigger>
		</plan>
		
		<!-- Increment the belief no_msg_received by one every second. -->
		<plan name="count_no_msg_plan">
		    <body class="CountNoMsgPlan"/>
		</plan>
	</plans>

	<events>
		<!-- Only used for MASDynamics. -->
		<!-- Receive target from sentry. -->
		 <internalevent name="latestAnalyzedTargetEvent">
			<parameter name="latest_analyzed_target" class="CoordinationSpaceData"/>
		</internalevent>
		
		<!-- Call Carry. -->
		<internalevent name="callCarryEvent">
			<parameter name="latest_produced_target" class="CoordinationSpaceData"/>
		</internalevent>
		
		<!-- Call Sentry. -->
		<internalevent name="callSentryEvent">
			<parameter name="latest_target" class="CoordinationSpaceData"/>
		</internalevent>
	</events>
	
	<configurations>
		<configuration name="default">
			<goals>
				<!-- Create a goal for walking around. -->
				<initialgoal cref="move.walk_around"/>
			</goals>
			<plans>
			    <initialplan ref="producer_plan"/>
			    <initialplan ref="count_no_msg_plan" />
			</plans>
		</configuration>
	</configurations>
</agent>
