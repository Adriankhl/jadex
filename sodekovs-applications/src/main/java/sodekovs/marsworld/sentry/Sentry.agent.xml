<!--
	<H3>Sentry agent for finding ore..</H3>

	This agent move to positions to check for minerals.
	Then calls the Production Agent to produce the ore.
	After all locations have been visited the Agent moves home.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Sentry"
	package="sodekovs.marsworld.sentry">	         

	<imports>
		<import>java.util.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>sodekovs.marsworld.movement.*</import>
		<import>sodekovs.marsworld.convergence.*</import>
		<import>sodekovs.marsworld.coordination.*</import>
		<import>deco4mas.distributed.coordinate.environment.*</import>
		<import>jadex.commons.future.*</import>	
	</imports>

	<capabilities>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="Movement" />
		<!-- Include the convergence capability. -->
		<capability name="convergence" file="Convergence" />
	</capabilities>

	<beliefs>
		<!-- The agent's avatar  in the environment. -->
		<beliefref name="myself">
			<concrete ref="move.myself"/>
		</beliefref>
		
		<!--  Test for evaluation! -->
		<belief name="myPos" class="Vector2Double" evaluationmode="push">
			<fact language="jcl">$beliefbase.myself.position</fact>
		</belief>		
		
		<!--  TMP: Counter -->
		<belief name="tmpCounter" class="int">
			<fact>0</fact>
		</belief>				
		
		<!-- The seen targets. -->
		<beliefsetref name="my_targets">
			<concrete ref="move.my_targets"/>
		</beliefsetref>
		
		<!-- The CoordinatonSpace -->
		<belief name="env" class="CoordinationSpace"> 			
 			<fact class="IFuture">$scope.getParentAccess().getExtension("mycoordspace")</fact>
 		</belief>
 		
		<!-- Missionend belief is used in drop condition of analyze target goal. -->
		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>
	
		<beliefref name="no_msg_received">
		    <concrete ref="convergence.no_msg_received"/>
		</beliefref>
	</beliefs>

  	<goals>
		<!-- Analyze a target.-->
		<achievegoal name="analyze_target" retry="false">
			<!-- The parameter target is bound to one
				of the facts in the belief my_targets. -->
			<parameter name="target" class="ISpaceObject">
				<!--
				// Hack!!! Condition can also match target object from message
				// $beliefbase.environment.getTarget($target.getId())
				 -->
				<value>
					$target
				</value>
			</parameter>
			<unique/>
			<!-- Create a new goal when a target was added
				and the mission is going on. -->
			<creationcondition language="jcl">
				//!$beliefbase.missionend &amp;&amp;
				ISpaceObject $target &amp;&amp;
				Arrays.asList($beliefbase.my_targets).contains($target) &amp;&amp;
				$target.state==AnalyzeTargetTask.STATE_UNKNOWN
				// Todo: Should work for method also.
				// $target.getProperty("state")==AnalyzeTargetTask.STATE_UNKNOWN
				
				// (belief (element_has_model.melement_has_name "missionend") (belief_has_fact false))
				//
				// (beliefset (element_has_model ?mbel_mytargets) (beliefset_has_facts $?x ?target $?y))
				// ?mbel_mytargets = (mbeliefset (melement_has_name "my_targets"))
				// (not
				// 	(and
				// 		(beliefset (element_has_model ?mbel_analysedtargets) (beliefset_has_facts $?p ?target $?q))
				// 		?mbel_analysedtargets = (mbeliefset (melement_has_name "analysed_targets"))
				// 	)
				// )
			</creationcondition>
			<!-- Suspend the goal when some other target is nearer to the agent. -->
			<contextcondition language="jcl">
				// (select one Target $target from $beliefbase.my_targets
				// order by $beliefbase.my_location.getDistance($target.getLocation()))
				// == $goal.target
				
				// !(ISpaceObject $t2 &amp;&amp; $t2.getType().equals("target") &amp;&amp;
				// 	((IVector2)$beliefbase.myself.position).getDistance((IVector2)$goal.target.position)
				// 	> ((IVector2)$beliefbase.myself.position).getDistance((IVector2)$t2.position))

				// Hack!!! $t2 must occur first. Todo: support reordering to allow arbitrary constraints in NOT. 
				!(ISpaceObject $t2 &amp;&amp; $t2.getType().equals("target") &amp;&amp; $t2.state==AnalyzeTargetTask.STATE_UNKNOWN &amp;&amp;
					((IVector2)$t2.position).getDistance((IVector2)$beliefbase.myself.position).getAsDouble()
					&lt; ((IVector2)$goal.target.position).getDistance((IVector2)$beliefbase.myself.position).getAsDouble())
			</contextcondition>
			<!-- Drop the goal on mission end. -->
			<dropcondition language="jcl">
				$beliefbase.missionend
				// (belief (element_has_model.melement_has_name "missionend") (belief_has_fact true))
			</dropcondition>

			<deliberation cardinality="1">
				<inhibits cref="move.walk_around"/>
			</deliberation>
		</achievegoal>
	</goals>

	<plans>
		<!-- Analyse a target. -->
		<plan name="do_analyze">
			<parameter name="target" class="ISpaceObject">
				<goalmapping ref="analyze_target.target"/>
			</parameter>
			<body class="AnalyzeTargetPlan"/>
			<trigger>
				<goal ref="analyze_target"/>
			</trigger>
		</plan>

			
		<!-- Informs sentries about new targets. -->
		<plan name="addTargetPlan">	
			<body class="AddTargetPlan"/>
			<waitqueue>
			    <internalevent ref="latestTargetEvent"/>
			</waitqueue>
		</plan>
		
		<!-- TMP: Counter. -->
		<plan name="tmpCounterPlan">
			<body class="CounterPlan"/>			
		</plan>
	</plans> 

	<events>
	
	<!-- Only used for MASDynamics. -->
	<!-- Call Producer. -->
	 <internalevent name="callProducerEvent">
			<parameter name="latest_analyzed_target" class="CoordinationSpaceData"/>
	</internalevent>
	
	<!-- Receive new target from Producer or Carry. -->
	<internalevent name="latestTargetEvent">
			<parameter name="latest_target" class="CoordinationSpaceData"/>
	</internalevent>
	</events>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Create a goal for walking around. -->
				<initialgoal cref="move.walk_around"/>				
			</goals>
			<plans>
				<initialplan ref="tmpCounterPlan"/>
				<initialplan ref="addTargetPlan"/>
			</plans>			
		</configuration>
	</configurations>
</agent>