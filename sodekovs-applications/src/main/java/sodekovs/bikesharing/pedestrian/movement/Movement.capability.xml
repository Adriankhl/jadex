<!--
	The movement capability supplies the agents with basic
	goals, plans and beliefs for moving around.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Movement"
	package="sodekovs.bikesharing.pedestrian.movement">

	<imports>		
		<import>java.util.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.extension.envsupport.math.*</import>
		<import>jadex.commons.future.*</import>	
		<import>jadex.extension.envsupport.math.*</import>	
	</imports>

	<beliefs>
		<!-- Environment. -->
		<belief name="environment" class="ContinuousSpace2D"> 			
 			<fact class="IFuture">$scope.getParentAccess().getExtension("my2dspace")</fact>
 		</belief>
 		
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject" exported="true"> 			
 			<fact>$beliefbase.environment.getAvatar($scope.getComponentDescription(), $scope.getAgentModel().getFullName())</fact>
 		</belief>

		<!-- Is the pedestrian currently driving bike? -->
		<belief name="drives_bike" class="boolean" updaterate="1000" evaluationmode="pull" exported="true">
			<fact>
 				$beliefbase.myself.getProperty("drives_bike")
 			</fact>
		</belief>
		
		<!-- The position of the destination station -->
		 <belief name="destination_station_pos" class="Vector2Double" exported="true">		
		</belief>		
		 			 							
	</beliefs>

	<goals>
		<!-- Move to a certain location. -->
		<achievegoal name="move_dest" exported="true">
			<parameter name="destination" class="IVector2"/>
		</achievegoal>

		<!-- Walk around without target when nothing else to do. -->
		<achievegoal name="walk_around" retry="true" exclude="never" exported="true"/>  		
  		
  		<!-- Realize default behaviour of pedestrian:
  		 * 1) Go to next bike station
 		 * 2) Rent bike and drive randomly to a bike station
         * 3) Return bike 
  		-->
		<achievegoal name="default_behaviour" retry="true" exclude="never" exported="true"/>

  		<!-- Realize: drive from station to station strategy for pedestrian:
   			1)Take a bike from the start point, which is a bike station
   			2)Drive to a bike station, which is stochastically determined
   			3)Return bike and terminate
   		-->
		<achievegoal name="station_to_station_strategy" retry="true" exclude="never" exported="true"/>		
		
		  <!-- Realize: ADAPTABLE drive from station to station strategy for pedestrian:
   			1)Take a bike from the start point, which is a bike station. 
   			1a) If departure station is empty, go to a proposed station and drive from this point
   			2)Drive to a bike station, which is stochastically determined   			
   			3)Return bike and terminate
   			3a) If destination station is full, drive to a proposed station and leave bike there
   		-->
		<achievegoal name="adaptable_station_to_station_strategy" retry="true" exclude="never" exported="true"/>
					  		  		
	</goals>

	<plans>
		<!-- Go to a destination. -->
		<plan name="go_destination">
			<parameter name="destination" class="IVector2">
 				<goalmapping ref="move_dest.destination"/>
			</parameter>
			<body class="MoveToLocationPlan"/>
			<trigger>
				<goal ref="move_dest"/>
 				<!-- <goal ref="missionend"/>-->
			</trigger>
		</plan>

		<!-- Walk around randomly. -->
		<plan name="randomwalk">
			<body class="RandomWalkPlan"/>
			<trigger>
				<goal ref="walk_around"/>
			</trigger>
		</plan>
		
		<!-- Default behaviour. -->
		<plan name="default_behaviour_plan">
			<body class="DefaultBehaviourPlan"/>
			<trigger>
				<goal ref="default_behaviour"/>
			</trigger>
		</plan>
		
		<!-- Default behaviour. -->
		<plan name="station_to_station_strategy_plan">
			<body class="DriveFromToBehaviourPlan"/>
			<trigger>
				<goal ref="station_to_station_strategy"/>
			</trigger>
		</plan>
		
		<!-- Default behaviour with capability to adapt. -->
		<plan name="adaptable_station_to_station_strategy_plan">
			<body class="AdaptableDriveFromToBehaviourPlan"/>
			<trigger>
				<goal ref="adaptable_station_to_station_strategy"/>
			</trigger>
		</plan>
		
		<!-- Determine which behaviour strategy should be applied. -->
		<plan name="determine_behaviour_strategy">
			<body class="DetermineBehaviourStrategyPlan"/>			
		</plan>		
	</plans>
	
	<configurations>
		<configuration name="default">		
			<plans>
				<initialplan ref="determine_behaviour_strategy"/>
			</plans>
		</configuration>
	</configurations>
</capability>
