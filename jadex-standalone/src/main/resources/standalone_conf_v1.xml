<!--
  Standalone platform properties.
-->
<properties xmlns="http://jadex.sourceforge.net/jadexconf"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadexconf 
	                    http://jadex.sourceforge.net/configuration.xsd"
	name="standalone_conf">
	
	<properties type="platform_standalone" name="lars">
		<property type="platformname">lars</property>
		<property type="platform_shutdown_time">1000</property>
		<property type="welcome">false</property>
		<property type="autoshutdown">true</property>
		<!-- Message types. -->
		<property type="messagetype" name="fipa">new jadex.adapter.base.fipa.FIPAMessageType()</property>
		
		<!-- Kernels. -->
	 	<propertiesref ref="kernel_v1"/>
		
		<!-- Platform services. -->
		<properties type="services">
			<!-- AMS service. -->
			<property type="jadex.adapter.base.fipa.IAMS" name="ams_service">new jadex.adapter.standalone.ams.AMS($platform)</property> 
			
			<!-- DF service. -->
			<property type="jadex.adapter.base.fipa.IDF" name="df_service">new jadex.adapter.standalone.df.DF($platform)</property>
			
			<!-- Message service. -->
			<property type="jadex.bridge.IMessageService" name="message_service">new jadex.adapter.standalone.MessageService($platform, 
				new jadex.adapter.standalone.transport.ITransport[]
				{
					new jadex.adapter.standalone.transport.localmtp.LocalTransport($platform),
					new jadex.adapter.standalone.transport.tcpmtp.TCPTransport($platform, 9876),
					new jadex.adapter.standalone.transport.niotcpmtp.NIOTCPTransport($platform, 8765)
				})
			</property>
			
			<!-- Clock service. -->
			<property type="jadex.bridge.IClockService" name="clock_service">
				new jadex.adapter.base.clock.SystemClock("system_clock", 1,
					jadex.commons.concurrent.ThreadPoolFactory.getThreadPool($platformname))
//				new jadex.adapter.base.clock.SimulationEventClock("simulation_clock",
//					System.currentTimeMillis(), 100)
			</property>

			<!-- Simulation service. -->
			<property type="jadex.adapter.base.ISimulationService" name="simulation_service">
				new jadex.adapter.standalone.SimulationService($platform)
			</property>
		
			<!-- Execution service. -->
			<property type="jadex.adapter.base.execution.IExecutionService" name="execution_service">
				new jadex.adapter.base.execution.AsyncExecutionService(
					jadex.commons.concurrent.ThreadPoolFactory.getThreadPool($platformname))
			</property>
		</properties>
		
		<!-- Agents. -->
  		<property type="daemonagent" name="ams">jadex/amsagent/AMS.agent.xml</property>
		<property type="daemonagent" name="df">jadex/dfagent/DF.agent.xml</property>
 		<property type="agent" name="jcc">jadex/tools/jcc/JCC.agent.xml</property>
	</properties>
	
	<properties type="platform_jade" name="lars">
	</properties>
	
	<properties type="kernel" id="kernel_v1">
		<!-- V1 Factory / JiBX Model loader-->
		<property type="agent_factory">new jadex.runtime.impl.BDIAgentFactory(jadex.commons.SUtil.createHashMap(
			new String[]{"model_checking", "model_caching", "model_cache_autorefresh", "messagetype_fipa", "parser_factory"},
			new Object[]{false, true, true, new jadex.adapter.base.fipa.FIPAMessageType(), new jadex.parser.javaccimpl.Parser(null)}
			))</property>
	</properties>
 
</properties>