/**
 * Copyright (c) 2009, Universität Hamburg
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 *
 * $Id$
 */
package jadex.tools.gpmn.provider;

import jadex.tools.gpmn.util.GpmnAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GpmnItemProviderAdapterFactory extends GpmnAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright (c) 2009, Universität Hamburg\r\nAll rights reserved. This program and the accompanying materials\r\nare made available under the terms of the Eclipse Public License v1.0\r\nwhich accompanies this distribution, and is available at\r\nhttp://www.eclipse.org/legal/epl-v10.html\r\n"; //$NON-NLS-1$

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GpmnItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.AbstractEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractEdgeItemProvider abstractEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.AbstractEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractEdgeAdapter()
	{
		if (abstractEdgeItemProvider == null)
		{
			abstractEdgeItemProvider = new AbstractEdgeItemProvider(this);
		}

		return abstractEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.AbstractNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractNodeItemProvider abstractNodeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.AbstractNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractNodeAdapter()
	{
		if (abstractNodeItemProvider == null)
		{
			abstractNodeItemProvider = new AbstractNodeItemProvider(this);
		}

		return abstractNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Activatable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivatableItemProvider activatableItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Activatable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivatableAdapter()
	{
		if (activatableItemProvider == null)
		{
			activatableItemProvider = new ActivatableItemProvider(this);
		}

		return activatableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ActivationEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivationEdgeItemProvider activationEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ActivationEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivationEdgeAdapter()
	{
		if (activationEdgeItemProvider == null)
		{
			activationEdgeItemProvider = new ActivationEdgeItemProvider(this);
		}

		return activationEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.BpmnPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BpmnPlanItemProvider bpmnPlanItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.BpmnPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBpmnPlanAdapter()
	{
		if (bpmnPlanItemProvider == null)
		{
			bpmnPlanItemProvider = new BpmnPlanItemProvider(this);
		}

		return bpmnPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter()
	{
		if (contextItemProvider == null)
		{
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ContextElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextElementItemProvider contextElementItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ContextElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextElementAdapter()
	{
		if (contextElementItemProvider == null)
		{
			contextElementItemProvider = new ContextElementItemProvider(this);
		}

		return contextElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter()
	{
		if (goalItemProvider == null)
		{
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.GpmnDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpmnDiagramItemProvider gpmnDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.GpmnDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpmnDiagramAdapter()
	{
		if (gpmnDiagramItemProvider == null)
		{
			gpmnDiagramItemProvider = new GpmnDiagramItemProvider(this);
		}

		return gpmnDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Identifiable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifiableItemProvider identifiableItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Identifiable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifiableAdapter()
	{
		if (identifiableItemProvider == null)
		{
			identifiableItemProvider = new IdentifiableItemProvider(this);
		}

		return identifiableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ActivationPlan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivationPlanItemProvider activationPlanItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ActivationPlan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivationPlanAdapter()
	{
		if (activationPlanItemProvider == null)
		{
			activationPlanItemProvider = new ActivationPlanItemProvider(this);
		}

		return activationPlanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.NamedObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedObjectItemProvider namedObjectItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.NamedObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedObjectAdapter()
	{
		if (namedObjectItemProvider == null)
		{
			namedObjectItemProvider = new NamedObjectItemProvider(this);
		}

		return namedObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter()
	{
		if (parameterItemProvider == null)
		{
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ParameterMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterMappingItemProvider parameterMappingItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ParameterMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterMappingAdapter()
	{
		if (parameterMappingItemProvider == null)
		{
			parameterMappingItemProvider = new ParameterMappingItemProvider(this);
		}

		return parameterMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.PlanEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanEdgeItemProvider planEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.PlanEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanEdgeAdapter()
	{
		if (planEdgeItemProvider == null)
		{
			planEdgeItemProvider = new PlanEdgeItemProvider(this);
		}

		return planEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.SubProcess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubProcessItemProvider subProcessItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.SubProcess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubProcessAdapter()
	{
		if (subProcessItemProvider == null)
		{
			subProcessItemProvider = new SubProcessItemProvider(this);
		}

		return subProcessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.SuppressionEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SuppressionEdgeItemProvider suppressionEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.SuppressionEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSuppressionEdgeAdapter()
	{
		if (suppressionEdgeItemProvider == null)
		{
			suppressionEdgeItemProvider = new SuppressionEdgeItemProvider(this);
		}

		return suppressionEdgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (abstractEdgeItemProvider != null) abstractEdgeItemProvider.dispose();
		if (abstractNodeItemProvider != null) abstractNodeItemProvider.dispose();
		if (activatableItemProvider != null) activatableItemProvider.dispose();
		if (activationEdgeItemProvider != null) activationEdgeItemProvider.dispose();
		if (bpmnPlanItemProvider != null) bpmnPlanItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (contextElementItemProvider != null) contextElementItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (gpmnDiagramItemProvider != null) gpmnDiagramItemProvider.dispose();
		if (identifiableItemProvider != null) identifiableItemProvider.dispose();
		if (activationPlanItemProvider != null) activationPlanItemProvider.dispose();
		if (namedObjectItemProvider != null) namedObjectItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (parameterMappingItemProvider != null) parameterMappingItemProvider.dispose();
		if (planEdgeItemProvider != null) planEdgeItemProvider.dispose();
		if (subProcessItemProvider != null) subProcessItemProvider.dispose();
		if (suppressionEdgeItemProvider != null) suppressionEdgeItemProvider.dispose();
	}

}
