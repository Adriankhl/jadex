
<!-- <H3>Benchmarking Manager</H3> Responsible for generating workload /faultload 
	according to specified schedule xml file. -->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="BenchmarkingManager" package="jadex.benchmarking.manager">

	<imports>
		<import>jadex.base.contextservice.*</import>
		<import>jadex.base.appdescriptor.*</import>
		<import>jadex.base.envsupport.math.*</import>
		<import>jadex.base.fipa.*</import>
		<import>java.util.Map</import>
		<import>java.util.HashMap</import>
		<import>java.util.Random</import>
		<import>jadex.commons.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.simulation.helper.*</import>
		<import>jadex.benchmarking.model.*</import>
		<import>jadex.benchmarking.manager.*</import>
	</imports>


	<capabilities>
		<!-- use capability that logs the memory consumption -->
		<capability name="memoryLoggerCap" file="jadex.simulation.helper.MemoryLogger" />
	</capabilities>



	<beliefs>

		<!-- The parsed schedule xml file. -->
		<belief name="schedule" class="Schedule" />

		<!-- Reference to the XML file that contains the schedule description. 
			This file is parsed on agent start. The reference to the file is passes by 
			the surrounding application file description. -->
		<belief name="scheduleDescriptionFile" class="String">
			<fact>"../sodekovs-benchmarking/src/main/java/jadex/benchmarking/examples/TestBenchmark.xml"
			</fact>
		</belief>

		<!-- Reference to the memory Loger Capability -->
		<belief name="MemoryLogerID" class="String">
			<fact> String.valueOf(new java.util.Random().nextInt())</fact>
			<assignto ref="memoryLoggerCap.MemoryLoggerID" />
		</belief>

		<!-- Can be used to force the terminatin of the benchmark, e.g., may happen, 
			if the termination condition of the benchmark is reached before all sequences 
			have been run. -->
		<belief name="terminateBenchmark" class="boolean">
			<fact>false</fact>
		</belief>

	</beliefs>

	<goals>
		<!-- Responsible for managing the start of the sequences of a benchmark 
			at the right time -->
		<achievegoal name="ScheduleSequencesGoal" retry="false"
			exclude="never">
			<!-- Contains references of the SuT. -->
			<parameter name="args" class="SuTinfo" />
			<!-- Happens, if the termination condition of the benchmark is reached 
				before all sequences have been run. -->
			<dropcondition>
				$beliefbase.terminateBenchmark
			</dropcondition>
		</achievegoal>

		<!-- Contains a sequence of the schedule that has to be executed many times 
			/ repeatedly. -->
		<achievegoal name="SequenceRepeaterGoal" retry="false"
			exclude="never">
			<!-- Contains references of the SuT. -->
			<parameter name="args" class="SuTinfo" />
			<!-- Sequence to be executed repeatedly. -->
			<parameter name="sequence" class="Sequence" />
			<!-- Happens, if the termination condition of the benchmark is reached 
				before all sequences have been run. -->
			<dropcondition>
				$beliefbase.terminateBenchmark
			</dropcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Init the benchmark. -->
		<plan name="init_benchmark">
			<body class="InitBenchmarkingPlan" />
		</plan>

		<!-- Start Sequence Scheduler. -->
		<plan name="start_sequences_scheduler">
			<body class="ScheduleSequencesPlan" />
			<parameter name="args" class="SuTinfo">
				<goalmapping ref="ScheduleSequencesGoal.args" />
			</parameter>
			<trigger>
				<goal ref="ScheduleSequencesGoal" />
			</trigger>
		</plan>

		<!-- Start sequence of the schedule that has to be executed many times 
			/ repeatedly. -->
		<plan name="start_sequence_repeater">
			<body class="SequenceRepeaterPlan" />
			<parameter name="args" class="SuTinfo">
				<goalmapping ref="SequenceRepeaterGoal.args" />
			</parameter>
			<parameter name="sequence" class="Sequence">
				<goalmapping ref="SequenceRepeaterGoal.sequence" />
			</parameter>
			<trigger>
				<goal ref="SequenceRepeaterGoal" />
			</trigger>
		</plan>
	</plans>


	<properties>
		<!-- The environment may throw exceptions when executing property listeners 
			and these listeners are not valid any longer. This leads to normal plan failure 
			and can therefore be ignored. -->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
		<!-- <property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), 
			IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property> -->
	</properties>

	<configurations>
		<configuration name="default">
			<plans>
				<initialplan ref="init_benchmark" />
			</plans>
		</configuration>
	</configurations>

</agent>