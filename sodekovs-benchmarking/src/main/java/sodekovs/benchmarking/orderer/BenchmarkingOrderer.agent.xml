
<!-- <H3>Agent takes a benchmark defined in xml and searches for a service which is capable of conduction this benchmark.</H3> -->

<agent xmlns="http://jadex.sourceforge.net/jadex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="BenchmarkingOrderer" package="sodekovs.benchmarking.orderer">

	<imports>
		<!-- <import>jadex.base.contextservice.*</import> <import>jadex.base.appdescriptor.*</import> 
			<import>jadex.extension.envsupport.math.*</import> -->
		<import>jadex.base.fipa.*</import>
		<import>java.util.Map</import>
		<import>java.util.HashMap</import>
		<import>java.util.Random</import>
		<import>jadex.commons.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.simulation.helper.*</import>
		<import>jadex.bridge.service.types.clock.*</import>
		<import>sodekovs.benchmarking.model.*</import>
		<import>sodekovs.benchmarking.manager.*</import>
		<import>sodekovs.benchmarking.services.*</import>		
	</imports>


	<capabilities>
		<!-- use capability that logs the memory consumption -->
		<!-- <capability name="memoryLoggerCap" file="sodekovs.util.logger.MemoryLogger" /> -->
	</capabilities>



	<beliefs>		
		<!-- Reference to the XML file that contains the benchmark description. 
			This file is parsed on agent start and send as a string to a service that is capable of conducting it.-->
		 <belief name="scheduleDescriptionFile" class="String">
			<fact>"to be defined"</fact>
		</belief>
	</beliefs>


	<plans>
		<!--
			Responsible for all aspects related to the run of the simulation,
			especially to monitor the terminate condition.
		-->
		<plan name="start_order">
			<body class="StartOrderPlan" />
		</plan>		
	</plans>



	<properties>
		<!-- The environment may throw exceptions when executing property listeners 
			and these listeners are not valid any longer. This leads to normal plan failure 
			and can therefore be ignored. -->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
		<!-- <property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), 
			IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property> -->
	</properties>


	<services>		
		<requiredservice name="benchmarkingExecutionService" class="IBenchmarkingExecutionService">
			<binding scope="platform" />
		</requiredservice>
	</services>
	

	<configurations>
		<configuration name="default">			
			<plans>
				<initialplan ref="start_order" />
			</plans>
		</configuration>
	</configurations>

</agent>