
	<!--
		<H3>The mars world application descriptor</H3> Can be used to launch
		the mars world example.<br> It consists of three different kinds of
		agents:<br> - <b>Sentry agents</b> are responsible for examining ore
		locations<br> A ore capacity is shown on the map when an ore location
		was examined.<br> - <b>Production agents</b> produce ore at available
		ore location.<br> - <b>Carry agents</b> are able to carry ore to the
		base.<br><br> Objective is to carry as much ore as possible to the<br>
		home base in a predefined mission time.<br>
	-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex-application"
	xmlns:agr="http://jadex.sourceforge.net/jadex-agrspace" xmlns:env="http://jadex.sourceforge.net/jadex-envspace"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-application 
	                    http://jadex.sourceforge.net/jadex-application-2.0.xsd
	                    http://jadex.sourceforge.net/jadex-agrspace 
	                    http://jadex.sourceforge.net/jadex-agrspace-2.0.xsd
	                    http://jadex.sourceforge.net/jadex-envspace 
	                    http://jadex.sourceforge.net/jadex-envspace-2.0.xsd"
	name="Test2" package="jadex.simulation.examples.marsworld">

	<imports>
	<import>jadex.application.space.envsupport.environment.space2d.*</import>
	<import>jadex.application.space.envsupport.environment.DeltaTimeExecutor</import>
	<import>jadex.application.space.envsupport.math.*</import>
	<import>jadex.commons.service.clock.IClockService</import>
	<import>jadex.application.space.envsupport.dataview.*</import>
	<import>java.text.SimpleDateFormat</import>
	<import>java.util.Date</import>
	<import>jadex.application.space.envsupport.observer.perspective.*</import>
	<import>jadex.simulation.examples.marsworld.carry.*</import>
	<import>jadex.simulation.examples.marsworld.producer.*</import>
	<import>jadex.simulation.examples.marsworld.sentry.*</import>
	<import>jadex.simulation.examples.marsworld.movement.*</import>
	<import>jadex.application.space.envsupport.evaluation.*</import>
	<import>jadex.application.space.envsupport.observer.gui.plugin.*</import>
	<import>jadex.commons.service.clock.IClockService</import>
	<import>jadex.commons.service.SServiceProvider</import>
	<import>jadex.commons.IFuture</import>
	<import>jadex.simulation.environment.*</import>
	<import>jadex.application.space.envsupport.evaluation.*</import>
	</imports>
			

	
	<spacetypes>
		
		<env:envspacetype name="2dspace" class="ContinuousSpace2D"
			width="1" height="1">
			
			<!-- executor -->
			<env:spaceexecutor class="DeltaTimeExecutor">
				<!-- <env:spaceexecutor class="DeltaTimeExecutor"> -->
				<env:property name="space">$space</env:property>
				<env:property name="tick">true</env:property>
			</env:spaceexecutor>
		</env:envspacetype>
	</spacetypes>


	<componenttypes>
		<componenttype name="Sender2" filename="deco4mas/examples/V2/tspaces/Sender2.agent.xml" />
		<componenttype name="Receiver2" filename="deco4mas/examples/V2/tspaces/Receiver2.agent.xml" />		
	</componenttypes>
		
	<properties>
		<property name="clock" class="IFuture">
			SServiceProvider.getService($component.getServiceProvider(), IClockService.class)
		</property>
	</properties>
	
	
	

	<applications>
		<application name="Test2">
			<spaces>	
				<env:envspace name="mycoordspace" type="2dspace" width="2" height ="2">					
	 			</env:envspace>
			</spaces>
			<components>
				<component type="Sender2" number="1"/>
  				<component type="Receiver2" number="1"/>				
			</components>
 		</application>
	</applications>

</applicationtype>
