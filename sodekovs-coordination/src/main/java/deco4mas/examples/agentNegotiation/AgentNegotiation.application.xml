
	<!--
		<H3>A agent negotiation application</H3> A negotiation application
		which can be started to launch agent negotiation scenario. Uses
		components AgentManagementAgent, ServiceAgent
		(MasterServiceAgentCreator).
	-->
<applicationtype xmlns="http://jadex.sourceforge.net/jadex-application"
	xmlns:env="http://jadex.sourceforge.net/jadex-envspace" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-application-2.0.xsd
						http://jadex.sourceforge.net/jadex-application
	                    http://jadex.sourceforge.net/jadex-envspace-2.0.xsd
	                    http://jadex.sourceforge.net/jadex-envspace"
	name="AgentNegotiation" package="deco4mas.examples.agentNegotiation">

	<imports>
		<import>jadex.application.space.envsupport.environment.*</import>
		<import>deco4mas.coordinate.environment.CoordinationSpace</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.masterServiceAgentCreator.*</import>
		<import>deco4mas.examples.agentNegotiation.common.dataObjects.*</import>
		<import>deco4mas.examples.agentNegotiation.deco.media.*</import>
		<import>jadex.simulation.environment.DeltaTimeExecutor4Simulation</import>
	</imports>

	<spacetypes>
		<!-- define the coordination space -->
		<env:envspacetype name="coordspace" width="11" height="11" class="CoordinationSpace">

			<!-- TMP Object Type: accumalates money bank of SMA -->
			<env:objecttypes>
				<env:objecttype name="KIVSeval">
					<env:property name="moneyBankSMA">0</env:property>
					<env:property name="executedWorkflows">0</env:property>
			<!-- Counts how often the Service Type was executed successfully -->
					<env:property name="Chassisbaubillig">0</env:property>
					<env:property name="Chassisbaunormal">0</env:property>
					<env:property name="Chassisbauteuer">0</env:property>
					<!-- logs the trust value for each service type -->
					<env:property name="ChassisbaubilligTrustValue">0</env:property>
					<env:property name="ChassisbaunormalTrustValue">0</env:property>
					<env:property name="ChassisbauteuerTrustValue">0</env:property>
					<!--  Measure blackout: How long (TIME) (millisec.) was it and how often (NUMBER)? -->
					<env:property name="ChassisbaubilligBlackoutTIME">0</env:property>
					<env:property name="ChassisbaunormalBlackoutTIME">0</env:property>
					<env:property name="ChassisbauteuerBlackoutTIME">0</env:property>					
					<env:property name="ChassisbaubilligBlackoutNUMBER">0</env:property>
					<env:property name="ChassisbaunormalBlackoutNUMBER">0</env:property>
					<env:property name="ChassisbauteuerBlackoutNUMBER">0</env:property>
				</env:objecttype>					
			
			</env:objecttypes>

			<!-- decoMAS file -->
			<env:property name="dynamics_configuration">"deco4mas/examples/agentNegotiation/deco/negotiation.dynamics.xml"</env:property>

			<!-- space process to control time driven events -->
			<env:processtypes>
				<env:processtype name="MediumTime" class="MediumTimeProcess">
				</env:processtype>
			</env:processtypes>

			<!-- space executer-->
			<env:spaceexecutor class="DeltaTimeExecutor4Simulation">
				<!-- <env:spaceexecutor class="DeltaTimeExecutor"> -->
				<env:property name="space">$space</env:property>
				<env:property name="tick">true</env:property>
			</env:spaceexecutor>
		</env:envspacetype>
	</spacetypes>

	<componenttypes>
		<!-- MasterServiceAgentCreator	-->
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sa/masterServiceAgentCreator/MasterServiceAgentCreator.agent.xml"
			name="MasterServiceAgentCreator" />
		<!--	ServiceAgent		-->
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sa/ServiceAgent.agent.xml"
			name="ServiceAgent" />
		<!-- ServiceManagementAgent -->
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sma/ServiceManagementAgent.agent.xml"
			name="ServiceManagementAgent" />
	</componenttypes>

	<applications>
		<!-- A agent application scenario	-->
		<application name="agentNegotiation">
			<spaces>
				<env:envspace name="mycoordspace" type="coordspace"
					width="2" height="2">
					
					<env:objects>
						<env:object type="KIVSeval">
							<env:property name="moneyBankSMA">new Integer(0)</env:property>
							<env:property name="executedWorkflows">new Integer(0)</env:property>
							<!-- Counts how often the Service Type was executed successfully -->
							<env:property name="Chassisbaubillig">new Integer(0)</env:property>
							<env:property name="Chassisbaunormal">new Integer(0)</env:property>
							<env:property name="Chassisbauteuer">new Integer(0)</env:property>
							<!-- logs the trust value for each service type -->
							<env:property name="ChassisbaubilligTrustValue">new Double(30.0)</env:property>
							<env:property name="ChassisbaunormalTrustValue">new Double(30.0)</env:property>
							<env:property name="ChassisbauteuerTrustValue">new Double(30.0)</env:property>
							<env:property name="ChassisbaubilligBlackoutNUMBER">new Integer(0)</env:property>
							<env:property name="ChassisbaunormalBlackoutNUMBER">new Integer(0)</env:property>
							<env:property name="ChassisbauteuerBlackoutNUMBER">new Integer(0)</env:property>
							<env:property name="ChassisbaubilligBlackoutTIME">new Double(0.0)</env:property>
							<env:property name="ChassisbaunormalBlackoutTIME">new Double(0.0)</env:property>
							<env:property name="ChassisbauteuerBlackoutTIME">new Double(0.0)</env:property>
							
						</env:object>									
				</env:objects>
			
					<env:processes>
						<env:process type="MediumTime">
						</env:process>
					</env:processes>
				</env:envspace>
			</spaces>
			<components>
				<!-- MasterServiceAgentCreator	-->
				<component type="MasterServiceAgentCreator">
					<arguments>
						<!-- serviceTypes (name, mean cost, mean duration) -->
						<argument name="serviceTypes">
							new ServiceType[]
							{
							new ServiceType("Chassisbau",1000.0,500.0)
							<!--
								new ServiceType("Reifenhersteller",200.0,200.0),
							-->
							<!-- new ServiceType("Endmontage",400.0,200.0) -->
							}
						</argument>
						<!--
							serviceAgentTypes (name, costCharaketer, durationCharakter,
							blackoutCharakter)
						-->
						<argument name="serviceAgentTypes">
							new ServiceAgentType[]
							{
							new ServiceAgentType("normal",0.5,0.5,0.5),
							new ServiceAgentType("billig",0.3,0.5,0.999),
							new	ServiceAgentType("teuer",0.7,0.5,0.1)																															
							<!--
								new ServiceAgentType("ausfall",0.2,0.2,1.0)
							-->
							}
						</argument>
						<!-- mapping between (ServiceType , ServiceAgentType)-->
						<argument name="serviceAgentConfigurations">
							new ServiceAgentConfiguration[]
							{
							<!--
								new ServiceAgentConfiguration("Chassisbau", "ausfall"),
							-->
							new ServiceAgentConfiguration("Chassisbau", "billig"),
							new ServiceAgentConfiguration("Chassisbau", "normal"),
							new	ServiceAgentConfiguration("Chassisbau", "teuer")
							<!--
								new ServiceAgentConfiguration("Reifenhersteller", "normal"),
							-->
							<!-- new ServiceAgentConfiguration("Reifenhersteller", "billig"),-->
							<!-- new ServiceAgentConfiguration("Reifenhersteller", "teuer"),	-->
							<!-- new ServiceAgentConfiguration("Reifenhersteller", "ausfall"),-->
							<!-- new ServiceAgentConfiguration("Endmontage", "normal"),-->
							<!-- new ServiceAgentConfiguration("Endmontage", "billig"),-->
							<!-- new ServiceAgentConfiguration("Endmontage", "teuer"),-->
							<!-- new ServiceAgentConfiguration("Endmontage", "ausfall")-->
							}
						</argument>
					</arguments>
				</component>
				<!--ServiceManagementAgent-->
				<component type="ServiceManagementAgent" number="1">
					<arguments>
						<!--
							NAME of the used workflow
							(deco4mas.examples.agentNegotiation.sma.application.workflow.implementation.NAME
						-->
						<argument name="workflowName">
							new String("workflow")
						</argument>
						<argument name="workflowProfit">
							new Double(2000.0)
						</argument>
						<argument name="workflowIntendedTime">
							new Long(1100L)
						</argument>
						<argument name="negotiationCosts">
							new Double(800.0)
						</argument>
					</arguments>
				</component>
				<!--<component type="ClientSimulator">
					<arguments>
						<argument name="simulationFacts">$args.Simulation_Facts_For_Client</argument>
					</arguments>
				</component>-->
			</components>
		</application>
	</applications>
</applicationtype>
