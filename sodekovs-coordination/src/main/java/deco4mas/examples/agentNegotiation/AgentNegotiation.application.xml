
	<!--
		<H3>A agent negotiation application</H3> It can be started to launch a
		agent negotiation scenario.
	-->

<applicationtype xmlns="http://jadex.sourceforge.net/jadex-application"
	xmlns:env="http://jadex.sourceforge.net/jadex-envspace" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-application-2.0.xsd
						http://jadex.sourceforge.net/jadex-application
	                    http://jadex.sourceforge.net/jadex-envspace-2.0.xsd
	                    http://jadex.sourceforge.net/jadex-envspace"
	name="AgentNegotiation" package="deco4mas.examples.agentNegotiation">


	<imports>
		<import>jadex.application.space.envsupport.environment.*</import>
		<import>jadex.adapter.base.envsupport.environment.*</import>
		<import>jadex.application.space.envsupport.math.*</import>
		<import>jadex.service.clock.IClockService</import>
		<import>jadex.adapter.base.envsupport.dataview.GeneralDataView2D
		</import>
		<import>jadex.adapter.base.envsupport.observer.perspective.*</import>
		<import>jadex.bdi.planlib.*</import>
		<import>jadex.application.space.envsupport.dataview.*</import>
		<import>deco4mas.examples.agentNegotiation.deco.negMedium.*</import>
		<import>deco4mas.coordinate.interpreter.coordination_information.*
		</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.annotation.agent.*</import>
		<import>deco4mas.coordinate.*</import>
		<import>deco4mas.examples.agentNegotiation.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.masterSa.*</import>
	</imports>

	<spacetypes>
		<env:envspacetype name="coordspace" width="11"
			height="11" class="CoordinationSpace">

			<env:property name="dynamics_configuration">"deco4mas/examples/agentNegotiation/deco/negotiation.dynamics.xml"</env:property>

			<env:processtypes>
				<env:processtype name="MediumTime" class="MediumTimeProcess">
				</env:processtype>
			</env:processtypes>

			<env:spaceexecutor class="DeltaTimeExecutor">
				<env:property name="space">$space</env:property>
				<env:property name="tick">true</env:property>
			</env:spaceexecutor>


		</env:envspacetype>
	</spacetypes>

	<componenttypes>
		<componenttype
			filename="deco4mas/examples/agentNegotiation/provider/WorkflowProvider.agent.xml"
			name="WorkflowProvider" />
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sa/masterSa/MasterServiceCreator.agent.xml"
			name="MasterServiceCreator" />
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sa/ServiceAgent.agent.xml"
			name="ServiceAgent" />
		<componenttype
			filename="deco4mas/examples/agentNegotiation/sma/ServiceManagementAgent.agent.xml"
			name="ServiceManagementAgent" />
	</componenttypes>

	<applications>
		<application name="agentNegotiation">
			<spaces>
				<env:envspace name="mycoordspace" type="coordspace"
					width="2" height="2">
					<env:processes>
						<env:process type="MediumTime">
						</env:process>
					</env:processes>
				</env:envspace>

			</spaces>
			<components>
				<component type="MasterServiceCreator">
					<arguments>
					<!-- WARNING: Hack / TODO in CreatesmaforWorkflow: taskTypes - ServiceTypes -->
						<argument name="services">
							new ServiceType[]
							{
							new ServiceType("Chassisbau",1000.0,300.0,700.0,5000.0,1000.0,3000.0),
							new ServiceType("Reifenhersteller",300.0,50.0,150.0,1000.0,500.0,700.0),
							new ServiceType("Endmontage",500.0,100.0,300.0,3000.0,500.0,1000.0)
							}
						</argument>
						<argument name="agentTypes">
							new AgentType[]
							{
							new AgentType("normal",0.5,0.5,0.3),
							new AgentType("billig",0.3,0.6,0.6),
							new AgentType("teuer",0.8,0.2,0.0),
							new AgentType("ausfall",0.2,0.7,1.0)
							}
						</argument>
						<argument name="serviceAgentConfigs">
							new ServiceAgentConfig[]
							{
							new ServiceAgentConfig("Chassisbau", "normal"),
							new ServiceAgentConfig("Chassisbau", "billig"),
							new ServiceAgentConfig("Chassisbau", "teuer"),
							new ServiceAgentConfig("Chassisbau", "ausfall"),
							new ServiceAgentConfig("Reifenhersteller", "normal"),
							new ServiceAgentConfig("Reifenhersteller", "billig"),
							new ServiceAgentConfig("Reifenhersteller", "teuer"),
							new ServiceAgentConfig("Reifenhersteller", "ausfall"),
							new ServiceAgentConfig("Endmontage", "normal"),
							new ServiceAgentConfig("Endmontage", "billig"),
							new ServiceAgentConfig("Endmontage", "teuer"),
							new ServiceAgentConfig("Endmontage", "ausfall")
							}	
						</argument>
					</arguments>
				</component>
				<component type="WorkflowProvider" number="1">
					<arguments>
						<argument name="workflowName">
							new String("workflow2")
						</argument>
					</arguments>
				</component>
			</components>
		</application>
	</applications>



</applicationtype>
