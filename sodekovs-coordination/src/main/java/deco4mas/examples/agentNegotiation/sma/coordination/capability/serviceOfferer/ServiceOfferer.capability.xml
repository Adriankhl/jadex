	<!--
		<H3> ServiceOfferer capability</H3>
		The capability encapsulate requirements to find a required services through a coordination mechanism
		
		Observes the beliefset requestedServices (RequestedService.class) in the agent and uses deco4mas to participate in a negotiation
	-->
<capability xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	package="deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer"
	name="ServiceOfferer">

	<imports>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>deco4mas.examples.agentNegotiation.common.dataObjects.*</import>
		<import>deco4mas.examples.agentNegotiation.common.negotiationInformation.*</import>
	</imports>

	<capabilities>
		<!--  Can be in a trustOwner role (capability)	-->
		<capability name="tocap"
			file="deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer.trustOwner.TrustOwner" />
	</capabilities>

	<beliefs>
		<!--holds the negotiation witch are requested at medium-->
		<beliefset name="requestedServices" class="RequestedService">
		</beliefset>

		<!--ASSIGNTO by agent-->
		<!--(no) use of trust -->
		<beliefref name="useTrust">
			<abstract />
		</beliefref>
		<!--negotiation types to use-->
		<beliefsetref name="negTypes">
			<abstract />
		</beliefsetref>
		<!-- (Initial) Configuration of the weights of the utility function -->
		<beliefref name="DurationWeight">
			<abstract />
		</beliefref>
		<beliefref name="CostWeight">
			<abstract/>
		</beliefref>
		<beliefref name="TrustWeight">
			<abstract/>
		</beliefref>

		<!--  REFERENCES of capability	-->
		<!-- trustFunction of trust capability ( null, if useTrust == false ) -->
		<beliefref name="trustFunction">
			<concrete ref="tocap.trustFunction">
			</concrete>
		</beliefref>
		
		
	</beliefs>

	<goals>
		<!-- initiate a negotiation for this services-->
		<achievegoal name="initiateNegotiation">
			<parameter name="requiredService" class="RequiredService"></parameter>
		</achievegoal>
	</goals>

	<plans>
		<!-- checks if a negotiation is required -->
		<plan name="NegotiationRequiredCheck">
			<body class="NegotiationRequiredCheckPlan"></body>
			<trigger>
				<internalevent ref="requiredServices"></internalevent>
			</trigger>
		</plan>

		<!-- start one single negotiation request-->
		<plan name="NegotiationInitiation">
			<body class="NegotiationInitiationPlan"></body>
			<trigger>
				<goal ref="initiateNegotiation"></goal>
			</trigger>
		</plan>

		<!-- evaluate a (potential) contract	-->
		<plan name="potentialContract">
			<body class="ContractReceivePlan">
			</body>
			<trigger>
				<internalevent ref="negotiationContract"></internalevent>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- "service found" event received by agent -->
		<internalevent name="serviceSatisfied">
			<parameter name="contract" class="ServiceContract"></parameter>
		</internalevent>

		<!--deco SEND-->
		<!-- request for a new negotiation -->
		<internalevent name="initiateNegotiation">
			<parameter name="information" class="NegotiationInformation"></parameter>
		</internalevent>
		<!-- answer to a tentative contract (reject or accept) -->
		<internalevent name="negotiationContractReply">
			<parameter name="information" class="NegotiationInformation"></parameter>
		</internalevent>

		<!-- deco RECEIVE -->
		<!-- new service is required by agent (beliefset in agent changed)	-->
		<internalevent name="requiredServices">
			<parameter name="service" class="RequiredService"></parameter>
		</internalevent>
		
		<!-- contract published by medium -->
		<internalevent name="negotiationContract">
			<parameter name="information" class="NegotiationInformation"></parameter>
		</internalevent>

		<!-- deco REFERENCES to capability -->
		<internaleventref name="trustEvent">
			<concrete ref="tocap.trustEvent" />
		</internaleventref>
	</events>
</capability>
