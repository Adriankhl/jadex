
	<!--
		<H3>service management agent</H3>
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ServiceManagementAgent" package="deco4mas.examples.agentNegotiation.sma">
	<imports>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.protocols.*</import>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.application.space.envsupport.environment.space2d.*
		</import>
		<import>jadex.application.space.envsupport.environment.*</import>
		<import>jadex.application.space.envsupport.math.*</import>
		<import>jadex.application.runtime.*</import>
		<import>deco4mas.examples.agentNegotiation.deco.*</import>
		<import>deco4mas.examples.agentNegotiation.*</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.coordinate.*</import>
		<import>jadex.commons.IFilter</import>
	</imports>

	<capabilities>
		<capability name="reqcap"
			file="jadex.bdi.planlib.protocols.request.Request" />
		<!--		<capability name="ping"-->
		<!--			file="deco4mas.examples.agentNegotiation.sma.ping.Ping" />-->
	</capabilities>

	<beliefs>
		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)((IApplicationExternalAccess)$scope.getParent()).getSpace("mycoordspace")
			</fact>
		</belief>

		<belief name="myself" class="ISpaceObject" exported="true">
			<fact>$beliefbase.env.getAvatar($scope.getComponentIdentifier())
			</fact>
		</belief>

		<belief name="provider" class="IComponentIdentifier" exported="true" />
		<belief name="allocatedService" class="ServiceType" exported="true" />
		<belief name="currentSa" class="IComponentIdentifier" />
		<belief name="history" class="ServiceAgentHistory">
			<fact>new ServiceAgentHistory()</fact>
		</belief>
		<belief name="searchingSa" class="Boolean">
			<fact>true</fact>
		</belief>
	</beliefs>

	<goals>
		<achievegoalref name="rp_initiate">
			<concrete ref="reqcap.rp_initiate" />
		</achievegoalref>
		<!--		<achievegoalref name="ping">-->
		<!--			<concrete ref="ping.ping" />-->
		<!--		</achievegoalref>-->
		<achievegoal name="informProvideraboutSign"></achievegoal>
		<achievegoal name="assignSa"></achievegoal>

	</goals>

	<plans>
		<!-- service request -->
		<plan name="rp_decide_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_decide_request.action" />
			</parameter>
			<parameter name="accept" class="Boolean" direction="out">
				<goalmapping ref="reqcap.rp_decide_request.accept" />
			</parameter>
			<body class="ServiceDecitePlan" />
			<trigger>
				<goal ref="reqcap.rp_decide_request" />
			</trigger>
		</plan>
		<plan name="rp_execute_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_execute_request.action" />
			</parameter>
			<parameter name="result" class="Object" direction="out"
				optional="true">
				<goalmapping ref="reqcap.rp_execute_request.result" />
			</parameter>
			<body class="AllocateServicePlan" />
			<trigger>
				<goal ref="reqcap.rp_execute_request" />
			</trigger>
		</plan>

		<!-- Deco -->
		<plan name="assignSa">
			<body class="AssignSaDecoPlan"></body>
			<trigger>
				<goal ref="assignSa"></goal>
			</trigger>
		</plan>
		<plan name="assignSaReply">
			<body class="AssignSaReplyPlan">
			</body>
			<trigger>
				<internalevent ref="assignSaReply"></internalevent>
			</trigger>
		</plan>

		<!-- execution phase decision-->
		<plan name="informProvider">
			<body class="InformProviderPlan">
			</body>
			<trigger>
				<goal ref="informProvideraboutSign"></goal>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- execution phase decision-->
		<messageevent name="informProviderAboutSign" direction="send"
			type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>

		<!-- deco -->
		<internalevent name="assignSa">
			<parameter name="request" class="AssignRequest"></parameter>
			<parameter name="task" class="String"></parameter>
		</internalevent>
		<internalevent name="assignSaReply">
			<parameter name="reply" class="AssignReply"></parameter>
		</internalevent>
	</events>

	<expressions>
		<condition name="currentSaPresent" language="jcl">
			$beliefbase.currentSa!=null
			</condition>
	</expressions>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="reqcap.rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
				<initialbelief ref="reqcap.timeout">
					<fact>10000L</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan ref="assignSa"></initialplan>

			</plans>
		</configuration>
	</configurations>
</agent>

