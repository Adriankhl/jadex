
	<!--
		<H3>service management agent</H3> forwards requests for services to
		serviceAgents. Find serviceAgents with deco. Uses capability Request
		and ServiceOffer.
	-->
<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ServiceManagementAgent" package="deco4mas.examples.agentNegotiation.sma">
	<imports>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.commons.IFilter</import>
		<import>jadex.application.runtime.*</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.application.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.application.workflow.management.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.coordination.capability.trustOwner.*</import>
		<import>deco4mas.examples.agentNegotiation.common.dataObjects.*</import>
	</imports>

	<capabilities>
		<!-- request capability (used to request service at serviceAgent) -->
		<capability name="reqcap"
			file="jadex.bdi.planlib.protocols.request.Request" />
		<!-- serviceOfferer capability (used to find serviceAgents with deco -->
		<capability name="socap"
			file="deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer.ServiceOfferer" />
	</capabilities>

	<beliefs>
		<!-- coordinationSpace (needed by deco implementation) -->
		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)((IApplicationExternalAccess)$scope.getParent()).getSpace("mycoordspace")</fact>
		</belief>

		<!-- negotiation types witch should be used -->
		<beliefset name="negTypes" class="String">
			<fact>"by_neg"</fact>
			<assignto ref="socap.negTypes" />
		</beliefset>

		<!-- use trust? -->
		<belief name="useTrust" class="Boolean">
			<fact>true</fact>
			<assignto ref="socap.useTrust" />
		</belief>

		<!-- agent in execution phase? -->
		<belief name="executionPhase" class="Boolean">
			<fact>false</fact>
		</belief>

		<!-- required services for current workflow	(observed by deco) -->
		<beliefset name="requiredServices" class="RequiredService"></beliefset>

		<!-- workflow config-->
		<belief name="workflowName" class="String" exported="true"></belief>
		<belief name="workflowProfit" class="Double" exported="true"></belief>
		<belief name="workflowIntendedTime" class="Long" exported="true"></belief>
		<belief name="negotiationCosts" class="Double" exported="true"></belief>

		<!-- workflow data-->
		<belief name="workflow" class="IComponentIdentifier" />
		<belief name="workflowData" class="WorkflowData"></belief>

		<!--	money of the sma	-->
		<belief name="moneyBank" class="Double">
			<fact>0.0</fact>
		</belief>
		
		<!-- (Initial) Configuration of the weights of the utility function -->
		<belief name="DurationWeight" class="Double">
			<fact>1.0</fact>
			<assignto ref="socap.DurationWeight" />
		</belief>
		<belief name="CostWeight" class="Double">
			<fact>1.0</fact>
			<assignto ref="socap.CostWeight" />
		</belief>
		<belief name="TrustWeight" class="Double">
			<fact>1.0</fact>
			<assignto ref="socap.TrustWeight" />
		</belief>
		
	</beliefs>

	<goals>
		<!-- request protocol -->
		<achievegoalref name="rp_initiate">
			<concrete ref="reqcap.rp_initiate" />
		</achievegoalref>

		<!-- create new workflow	-->
		<achievegoal name="executeWorkflow"></achievegoal>

		<!-- define necessary offers for workflow -->
		<achievegoal name="defineServices">
			<parameter name="workflow" class="IComponentIdentifier"></parameter>
		</achievegoal>

		<!-- (re)start workflow -->
		<achievegoal name="startWorkflow"></achievegoal>
		<achievegoal name="restartWorkflow"></achievegoal>

		<!-- evaluate current workflow -->
		<achievegoal name="evaluateWorkflow"></achievegoal>

	</goals>

	<plans>
		<!-- service request -->
		<plan name="rp_execute_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_execute_request.action" />
			</parameter>
			<parameter name="result" class="Object" direction="out"
				optional="true">
				<goalmapping ref="reqcap.rp_execute_request.result" />
			</parameter>
			<body class="AllocateServicePlan" />
			<trigger>
				<goal ref="reqcap.rp_execute_request" />
			</trigger>
		</plan>

		<!-- create new workflow	-->
		<plan name="executeWorkflow">
			<body class="ExecuteWorkflowPlan"></body>
			<trigger>
				<goal ref="executeWorkflow"></goal>
			</trigger>
		</plan>

		<!-- define necessary offers for workflow -->
		<plan name="defineRequiredServices">
			<body class="DefineRequiredServicesPlan"></body>
			<trigger>
				<goal ref="defineServices"></goal>
			</trigger>
		</plan>

		<!-- test if workflow can start -->
		<plan name="testExecuteWorkflow">
			<body class="TestExecuteWorkflowPlan">
			</body>
			<trigger>
				<internalevent ref="serviceSatisfied"></internalevent>
			</trigger>
		</plan>

		<!-- start workflow -->
		<plan name="startWorkflow">
			<body class="StartWorkflowPlan"></body>
			<trigger>
				<goal ref="startWorkflow"></goal>
			</trigger>
		</plan>

		<!-- (maybe) restart workflow -->
		<plan name="restartWorkflow">
			<body class="RestartWorkflowPlan">
			</body>
			<trigger>
				<goal ref="restartWorkflow"></goal>
			</trigger>
		</plan>
		
		<!-- evaluate workflow -->
		<plan name="evaluateWorkflow">
			<body class="EvaluateWorkflowPlan">
			</body>
			<trigger>
				<goal ref="evaluateWorkflow"></goal>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- event REFERENCE for deco capability -->
		<internaleventref name="initiateNegotiation">
			<concrete ref="socap.initiateNegotiation" />
		</internaleventref>
		<internaleventref name="negotiationContract">
			<concrete ref="socap.negotiationContract" />
		</internaleventref>
		<internaleventref name="negotiationContractReply">
			<concrete ref="socap.negotiationContractReply" />
		</internaleventref>
		<internaleventref name="requiredServices">
			<concrete ref="socap.requiredServices" />
		</internaleventref>
		<internaleventref name="trustEvent">
			<concrete ref="socap.trustEvent" />
		</internaleventref>
		<internaleventref name="serviceSatisfied">
			<concrete ref="socap.serviceSatisfied" />
		</internaleventref>

		<!-- workflow executed events -->
		<internalevent name="workflowExecuted"></internalevent>
		<internalevent name="returnExecution"></internalevent>
	</events>

	<configurations>
		<configuration name="default">
			<beliefs>
				<!-- filter and timeout for request protocol -->
				<initialbelief ref="reqcap.rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
				<!-- timeout for requests -->
				<initialbelief ref="reqcap.timeout">
					<fact>100L</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<!-- initiate workflow at start	-->
				<initialplan ref="executeWorkflow"></initialplan>
			</plans>
		</configuration>
	</configurations>
</agent>

