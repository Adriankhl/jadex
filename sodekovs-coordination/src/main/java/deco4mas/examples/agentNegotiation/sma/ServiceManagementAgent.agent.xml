
	<!--
		<H3>service management agent</H3>
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ServiceManagementAgent" package="deco4mas.examples.agentNegotiation.sma">
	<imports>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.base.fipa.*</import>

		<import>jadex.bdi.planlib.protocols.*</import>
		<import>jadex.commons.IFilter</import>
		<import>jadex.application.runtime.*</import>

		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.examples.agentNegotiation.sma.application.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.application.workflow.management.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.coordination.capability.trustOwner.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.coordination.negotiationStrategy.*
		</import>
	</imports>

	<capabilities>
		<capability name="reqcap"
			file="jadex.bdi.planlib.protocols.request.Request" />
		<capability name="socap"
			file="deco4mas.examples.agentNegotiation.sma.coordination.capability.serviceOfferer.ServiceOfferer" />
	</capabilities>

	<beliefs>
		<!--   CoordSpace (needed by deco impl)   -->
		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)((IApplicationExternalAccess)$scope.getParent()).getSpace("mycoordspace")
			</fact>
		</belief>

		<!--  negotiation types witch should be used 	-->
		<beliefset name="negTypes" class="String">
		<fact>"by_neg"</fact>
			<assignto ref="socap.negTypes" />
		</beliefset>

<!--			use trust?	-->
		<belief name="useTrust" class="Boolean">
		<fact>true</fact>
			<assignto ref="socap.useTrust" />
		</belief>



		<!--agent in execution phase?-->
		<belief name="executionPhase" class="boolean">
			<fact>false</fact>
		</belief>

		<!-- required services for current workflow	(observed by deco)-->
		<beliefset name="requiredServices" class="RequiredService"></beliefset>

		<!--	workflow	-->
		<belief name="workflow" class="IComponentIdentifier" />
		<belief name="workflowName" class="String" exported="true"></belief>

		<!--	statistik use only	-->
		<belief name="statNegtime" class="Long">
			<fact>0l</fact>
		</belief>
		<belief name="statExetime" class="Long">
			<fact>0l</fact>
		</belief>
	</beliefs>

	<goals>
		<!--  request protocol	-->
		<achievegoalref name="rp_initiate">
			<concrete ref="reqcap.rp_initiate" />
		</achievegoalref>

		<!--	Create new workflow	-->
		<achievegoal name="preInstantiateWorkflow"></achievegoal>

		<!-- define necessary offers for workflow -->
		<achievegoal name="defineOffers">
			<parameter name="workflow" class="IComponentIdentifier"></parameter>
		</achievegoal>

		<!--(re)start workflow-->
		<achievegoal name="startWorkflow"></achievegoal>
		<achievegoal name="restartWorkflow"></achievegoal>
	</goals>

	<plans>
		<!-- service request -->
<!--		<plan name="rp_decide_request_plan">-->
<!--			<parameter name="action" class="Object">-->
<!--				<goalmapping ref="reqcap.rp_decide_request.action" />-->
<!--			</parameter>-->
<!--			<parameter name="accept" class="Boolean" direction="out">-->
<!--				<goalmapping ref="reqcap.rp_decide_request.accept" />-->
<!--			</parameter>-->
<!--			<body class="ServiceDecitePlan" />-->
<!--			<trigger>-->
<!--				<goal ref="reqcap.rp_decide_request" />-->
<!--			</trigger>-->
<!--		</plan>-->
		<plan name="rp_execute_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_execute_request.action" />
			</parameter>
			<parameter name="result" class="Object" direction="out"
				optional="true">
				<goalmapping ref="reqcap.rp_execute_request.result" />
			</parameter>
			<body class="AllocateServicePlan" />
			<trigger>
				<goal ref="reqcap.rp_execute_request" />
			</trigger>
		</plan>

		<!--	Create new workflow	-->
		<plan name="preInstantiateWorkflow">
			<body class="PreInstantiateWorkflowPlan"></body>
			<trigger>
				<goal ref="preInstantiateWorkflow"></goal>
			</trigger>
		</plan>

		<!-- define necessary offers for workflow -->
		<plan name="defineOffers">
			<body class="DefineOffersPlan"></body>
			<trigger>
				<goal ref="defineOffers"></goal>
			</trigger>
		</plan>

		<!-- test if workflow can start-->
		<plan name="testExecuteWorkflow">
			<body class="TestExecuteWorkflowPlan">
			</body>
			<trigger>
				<internalevent ref="serviceSatisfied"></internalevent>
			</trigger>
		</plan>

		<!--start workflow-->
		<plan name="startWorkflow">
			<body class="StartWorkflowPlan"></body>
			<trigger>
				<goal ref="startWorkflow"></goal>
			</trigger>
		</plan>

		<!--(maybe) restart workflow -->
		<plan name="restartWorkflow">
			<body class="RestartWorkflowPlan">
			</body>
			<trigger>
				<goal ref="restartWorkflow"></goal>
			</trigger>
		</plan>
	</plans>

	<events>
		<!--  eventrefs for deco capability	-->
		<internaleventref name="searchSa">
			<concrete ref="socap.searchSa" />
		</internaleventref>
		<internaleventref name="foundSa">
			<concrete ref="socap.foundSa" />
		</internaleventref>
		<internaleventref name="trustEvent">
			<concrete ref="socap.trustEvent" />
		</internaleventref>
		<internaleventref name="serviceSatisfied">
			<concrete ref="socap.serviceSatisfied" />
		</internaleventref>
		<internaleventref name="requiredServices">
			<concrete ref="socap.requiredServices" />
		</internaleventref>

		<!--	workflow executed events -->
		<internalevent name="workflowExecuted"></internalevent>
		<internalevent name="returnExecution"></internalevent>
	</events>

	<configurations>
		<configuration name="default">
			<beliefs>
				<!--	filter and timeout for request protocol	-->
				<initialbelief ref="reqcap.rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
				<initialbelief ref="reqcap.timeout">
					<fact>2000L</fact>
				</initialbelief>

				<!-- use by_neg medium with trust at socap	-->
<!--				<initialbeliefset ref="socap.negTypes">-->
<!--					<fact>"by_neg"</fact>-->
<!--				</initialbeliefset>-->
<!--				<initialbelief ref="socap.useTrust">-->
<!--					<fact>true</fact>-->
<!--				</initialbelief>-->
			</beliefs>
			<plans>
				<!--	init workflow at start		-->
				<initialplan ref="preInstantiateWorkflow"></initialplan>
			</plans>
		</configuration>
	</configurations>
</agent>

