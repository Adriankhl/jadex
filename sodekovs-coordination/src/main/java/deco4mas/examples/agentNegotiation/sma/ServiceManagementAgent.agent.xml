
	<!--
		<H3>service management agent</H3>
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ServiceManagementAgent" package="deco4mas.examples.agentNegotiation.sma">
	<imports>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.application.space.envsupport.environment.space2d.*
		</import>
		<import>jadex.application.space.envsupport.environment.*</import>
		<import>jadex.application.space.envsupport.math.*</import>
		<import>jadex.application.runtime.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.protocols.*</import>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>deco4mas.examples.agentNegotiation.decoMAS.*</import>
		<import>deco4mas.examples.agentNegotiation.decoMAS.medium.*</import>
		<import>deco4mas.examples.agentNegotiation.decoMAS.dataObjects.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.behaviour.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.negotiationStrategy.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.negotiationStrategy.history.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.workflow.implementation.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sma.workflow.management.*
		</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.coordinate.*</import>
		<import>jadex.commons.IFilter</import>
	</imports>

	<capabilities>
		<capability name="reqcap"
			file="jadex.bdi.planlib.protocols.request.Request" />
	</capabilities>

	<beliefs>
		<belief name="history" class="ServiceAgentHistory">
			<!--
				<fact>new ServiceAgentHistory($scope.getComponentIdentifier(),
				$beliefbase.startTime)</fact>
			-->
		</belief>
		<belief name="trustFunction" class="HistorytimeTrustFunction"></belief>

		<belief name="executionPhase" class="boolean">
			<fact>false</fact>
		</belief>

		<!--	needed services for current workflow	-->
		<beliefset name="neededServices" class="NeededService"></beliefset>

		<!--	workflow	-->
		<belief name="workflow" class="IComponentIdentifier" />
		<belief name="workflowName" class="String" exported="true"></belief>

		<!--	statistik	-->
		<belief name="statNegtime" class="Long" />
		<belief name="statExetime" class="Long" />

		<!--    decoMAS     -->
		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)((IApplicationExternalAccess)$scope.getParent()).getSpace("mycoordspace")
			</fact>
		</belief>
		<belief name="myself" class="ISpaceObject" exported="true">
			<fact>$beliefbase.env.getAvatar($scope.getComponentIdentifier())
			</fact>
		</belief>

		<!--	ServiceTypes in MAS	-->
		<beliefset name="services" class="ServiceType" exported="true" />
	</beliefs>

	<goals>
		<!--  request protocol	-->
		<achievegoalref name="rp_initiate">
			<concrete ref="reqcap.rp_initiate" />
		</achievegoalref>

		<!--	Create new workflow	-->
		<achievegoal name="preInstantiateWorkflow"></achievegoal>

		<!-- define necessary offers for workflow -->
		<achievegoal name="defineOffers">
			<parameter name="workflow" class="IComponentIdentifier"></parameter>
		</achievegoal>

		<!-- start negotiation for all needed services-->
		<achievegoal name="startNegotiation"></achievegoal>

		<!-- assign a Sa for this needed services-->
		<achievegoal name="assignSa">
			<parameter name="service" class="NeededService"></parameter>
		</achievegoal>

		<!--start workflow-->
		<achievegoal name="startWorkflow"></achievegoal>

		<achievegoal name="restartWorkflow"></achievegoal>

	</goals>

	<plans>
		<!-- service request -->
		<plan name="rp_decide_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_decide_request.action" />
			</parameter>
			<parameter name="accept" class="Boolean" direction="out">
				<goalmapping ref="reqcap.rp_decide_request.accept" />
			</parameter>
			<body class="ServiceDecitePlan" />
			<trigger>
				<goal ref="reqcap.rp_decide_request" />
			</trigger>
		</plan>
		<plan name="rp_execute_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_execute_request.action" />
			</parameter>
			<parameter name="result" class="Object" direction="out"
				optional="true">
				<goalmapping ref="reqcap.rp_execute_request.result" />
			</parameter>
			<body class="AllocateServicePlan" />
			<trigger>
				<goal ref="reqcap.rp_execute_request" />
			</trigger>
		</plan>

		<!--	Create new workflow	-->
		<plan name="preInstantiateWorkflow">
			<body class="PreInstantiateWorkflowPlan"></body>
			<trigger>
				<goal ref="preInstantiateWorkflow"></goal>
			</trigger>
			<precondition>!$beliefbase.executionPhase</precondition>
		</plan>

		<!-- define necessary offers for workflow -->
		<plan name="defineOffers">
			<body class="DefineOffersPlan"></body>
			<trigger>
				<goal ref="defineOffers"></goal>
			</trigger>
			<precondition>!$beliefbase.executionPhase</precondition>
		</plan>

		<!-- start negotiation for all needed services -->
		<plan name="startNegotiation">
			<body class="StartNegotiationPlan"></body>
			<trigger>
				<goal ref="startNegotiation"></goal>
			</trigger>
		</plan>

		<!-- start one single assign-->
		<plan name="assignSa">
			<body class="AssignSaPlan"></body>
			<trigger>
				<goal ref="assignSa"></goal>
			</trigger>
		</plan>
		
		<plan name="assignSaReply">
			<body class="AssignSaReplyPlan">
			</body>
			<trigger>
				<internalevent ref="assignSaReply"></internalevent>
			</trigger>
		</plan>

		<!-- execution phase decision-->
		<plan name="testExecuteWorkflow">
			<body class="TestExecuteWorkflowPlan">
			</body>
			<trigger>
				<internalevent ref="serviceFound"></internalevent>
			</trigger>
			<precondition>!$beliefbase.executionPhase</precondition>
		</plan>

		<!--start workflow-->
		<plan name="startWorkflow">
			<body class="StartWorkflowPlan"></body>
			<trigger>
				<goal ref="startWorkflow"></goal>
			</trigger>
		</plan>

		<!--Test if workflow should reinit-->
		<plan name="restartWorkflow">
			<body class="RestartWorkflowPlan">
			</body>
			<trigger>
				<goal ref="restartWorkflow"></goal>
			</trigger>
		</plan>
	</plans>

	<events>
		<!--	workflow is executed	-->
		<internalevent name="workflowExecuted"></internalevent>

		<!-- execution phase decision-->
		<internalevent name="serviceFound"></internalevent>

		<!-- deco -->
		<internalevent name="assignSa">
			<parameter name="request" class="AssignRequest"></parameter>
			<parameter name="task" class="String"></parameter>
		</internalevent>
		<internalevent name="assignSaReply">
			<parameter name="reply" class="AssignReply"></parameter>
		</internalevent>
		
		<messageevent name="informMessage" direction="send"
			type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

	<!--	<expressions>-->
	<!--		<condition name="currentSaPresent" language="jcl">-->
	<!--			$beliefbase.currentSa!=null-->
	<!--			</condition>-->
	<!--	</expressions>-->

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="reqcap.rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
				<initialbelief ref="reqcap.timeout">
					<fact>2000L</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan ref="preInstantiateWorkflow"></initialplan>
			</plans>
		</configuration>
	</configurations>
</agent>

