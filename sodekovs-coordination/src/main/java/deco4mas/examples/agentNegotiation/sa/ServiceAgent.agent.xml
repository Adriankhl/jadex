
	<!--
		<H3>service agent</H3>
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ServiceAgent" package="deco4mas.examples.agentNegotiation.sa">

	<imports>
		<import>jadex.bdi.planlib.df.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.bdi.planlib.protocols.*</import>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.application.space.envsupport.environment.space2d.*
		</import>
		<import>jadex.application.space.envsupport.environment.*</import>
		<import>jadex.application.space.envsupport.math.*</import>
		<import>jadex.application.runtime.*</import>
		<import>deco4mas.examples.agentNegotiation.decoMAS.*</import>
		<import>deco4mas.examples.agentNegotiation.decoMAS.dataObjects.*
		</import>
		<import>deco4mas.examples.agentNegotiation.sa.masterSa.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.application.*</import>
		<import>deco4mas.examples.agentNegotiation.sa.coordination.*</import>
		<import>deco4mas.coordinate.environment.*</import>
		<import>deco4mas.coordinate.*</import>
		<import>jadex.commons.IFilter</import>
	</imports>

	<capabilities>
		<capability name="reqcap"
			file="jadex.bdi.planlib.protocols.request.Request" />
		<capability name="sscap"
			file="deco4mas.examples.agentNegotiation.sa.coordination.capability.serviceSupplier.ServiceSupplier" />
		<capability name="tscap"
			file="deco4mas.examples.agentNegotiation.sa.coordination.capability.trustSubject.TrustSubject" />
	</capabilities>

	<beliefs>
		<belief name="contract" class="Contract">
		</belief>

		<belief name="env" class="CoordinationSpace">
			<fact>(CoordinationSpace)((IApplicationExternalAccess)$scope.getParent()).getSpace("mycoordspace")
			</fact>
		</belief>

		<belief name="providedService" class="ServiceType" exported="true">
			<assignto ref="sscap.providedService"></assignto>
		</belief>
		<belief name="agentType" class="AgentType" exported="true">
			<assignto ref="sscap.agentType"></assignto>
		</belief>

		<beliefref name="blackout">
			<concrete ref="sscap.blackout" />
		</beliefref>
	</beliefs>



	<plans>
		<!-- service request -->
		<plan name="rp_decide_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_decide_request.action" />
			</parameter>
			<parameter name="accept" class="Boolean" direction="out">
				<goalmapping ref="reqcap.rp_decide_request.accept" />
			</parameter>
			<body class="ServiceDecitePlan" />
			<trigger>
				<goal ref="reqcap.rp_decide_request" />
			</trigger>
		</plan>
		<plan name="rp_execute_request_plan">
			<parameter name="action" class="Object">
				<goalmapping ref="reqcap.rp_execute_request.action" />
			</parameter>
			<parameter name="result" class="Object" direction="out"
				optional="true">
				<goalmapping ref="reqcap.rp_execute_request.result" />
			</parameter>
			<body class="ExecuteServicePlan" />
			<trigger>
				<goal ref="reqcap.rp_execute_request" />
			</trigger>
		</plan>

		<!-- blackout -->
		<plan name="blackout">
			<body class="BlackoutPlan"></body>
		</plan>

		<plan name="contractSealed">
			<body class="ContractSealedPlan"></body>
			<trigger>
				<internalevent ref="contractSealed"></internalevent>
			</trigger>
		</plan>
	</plans>

	<events>
		<!--  events for deco capability	-->
		<internaleventref name="publishedOffer">
			<concrete ref="sscap.publishedOffer" />
		</internaleventref>
		<internaleventref name="assignedReward">
			<concrete ref="sscap.assignedReward" />
		</internaleventref>
		<internaleventref name="announceProposal">
			<concrete ref="sscap.announceProposal" />
		</internaleventref>
		<internaleventref name="executionOccur">
			<concrete ref="tscap.executionOccur" />
		</internaleventref>
		<internaleventref name="rewardReply">
			<concrete ref="sscap.rewardReply" />
		</internaleventref>
		<internaleventref name="contract">
			<concrete ref="tscap.contract" />
		</internaleventref>

		<!--	workflow is executed	-->
		<internalevent name="workflowExecuted"></internalevent>

		<internaleventref name="contractSealed">
			<concrete ref="sscap.contractSealed" />
		</internaleventref>
	</events>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="reqcap.rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan ref="blackout"></initialplan>
			</plans>
		</configuration>
	</configurations>
</agent>

