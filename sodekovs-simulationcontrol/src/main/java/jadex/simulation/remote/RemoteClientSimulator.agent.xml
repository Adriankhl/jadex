<?xml version="1.0" encoding="UTF-8"?>
<!-- <H3>Responsible for executing a single simulation experiment.</H3> -->

<agent xmlns="http://jadex.sourceforge.net/jadex" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="RemoteClientSimulator" package="jadex.simulation.remote">

	<imports>
		<import>java.util.*</import>
		<import>java.lang.*</import>
		<import>jadex.simulation.client.*</import>
	</imports>


	<capabilities>
		<!-- this capability provides easy access to "out-of-the-box"-plans allowing 
			- for example - to register at the DF. -->
		<!-- <capability name="dfcap" file="jadex.bdi.planlib.df.DF" /> -->
	</capabilities>

	<beliefs>
	<!-- Used to manage reference the between calling service and finished experiment: Which service call corresponds to which experiment? Caller ID is the time when the experiment was init. (long); The value (int) is the local experiment counter. -->
		<belief name="callerExperimentReference" class="Map">
			<!-- HashMap used as: new HashMap<Long,Integer> -->
			 <fact>new HashMap()</fact>
		</belief>
	
	<!-- Contains two information for each conducted experiment: simulationFacts and  observedEventsMap. Key is the experimentCounter, which is incremented automatically.-->
		<belief name="factsAboutAllExperiments" class="Map">
		<!-- HashMap used as: new HashMap<Integer,HashMap> -->
			<fact>new HashMap()</fact>
		</belief>
		
		
		<!-- Counts the number of experiments that have been executed. Is also used as ID for the experiments to enable parallel execution. -->
		<belief name="experimentCounter" class="int">
			<fact>0</fact>
		</belief>
		
		<!-- Returns the number of currently running experiments on this agent. -->
		<belief name="numberOfRunningExperiments" class="int">
			<fact>0</fact>
		</belief>
		
		<!-- Map contains all facts related to this simulation run. -->
		<!--<belief name="simulationFacts" class="Map">
			<fact>new HashMap()</fact>
		</belief> -->
	</beliefs>

	<goals>
		<!-- Used to search for the masters simulation agent. -->
		<!-- <achievegoalref name="df_search">
			<concrete ref="dfcap.df_search" />
		</achievegoalref>-->
		<performgoal name="startExecution" retry="false" exclude="never">
			<!-- Args required to start application -->
			<parameter name="applicationConf" class="Map" />
			<!-- The name (id) of the application -->
			<parameter name="clientConf" class="HashMap" />
			<!-- The timestamp which serves as ID for the calling service. -->
			<parameter name="callerID" class="Long" />
		</performgoal>
	</goals>

	<plans>
		<!-- Responsible for all aspects related to the run of the simulation, especially 
			to monitor the terminate condition. -->
		<plan name="runtime_manager">
			<body class="RuntimeManagerPlan" />
			<parameter name="applicationConf" class="Map">
				<goalmapping ref="startExecution.applicationConf"/>
			</parameter>
			<parameter name="clientConf" class="HashMap">
				<goalmapping ref="startExecution.clientConf"/>
			</parameter>
			<parameter name="callerID" class="Long">
				<goalmapping ref="startExecution.callerID"/>
			</parameter>
			<trigger>
				<goal ref="startExecution" />
			</trigger>
		</plan>
	</plans>

	<properties>
		<!-- The environment may throw exceptions when executing property listeners 
			and these listeners are not valid any longer. This leads to normal plan failure 
			and can therefore be ignored. -->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
	</properties>

	<services>		
		<providedservice class="IRemoteSimulationExecutionService">
			<implementation>new RemoteSimulationExecutionService($scope)</implementation>
		</providedservice>
	</services>	

</agent>
