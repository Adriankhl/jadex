
	<!--
		<H3>Environment / Observer Agent</H3> Used to maintain the GUI /
		Observer.
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="SimulationManager" package="jadex.simulation.master">

	<imports>
		<import>jadex.base.contextservice.*</import>
		<import>jadex.base.appdescriptor.*</import>
		<import>jadex.base.envsupport.environment.space2d.*</import>
		<import>jadex.base.envsupport.environment.*</import>
		<import>jadex.base.envsupport.math.*</import>
		<!-- <import>jadex.commons.*</import> -->
		<import>jadex.base.fipa.*</import>
		<import>java.util.Map</import>
		<import>java.util.HashMap</import>
		<import>jadex.simulation.model.*</import>
		<import>jadex.simulation.model.result.*</import>
		<import>jadex.simulation.controlcenter.*</import>		
	</imports>


	<capabilities>
		<!--
			this capability provides easy access to "out-of-the-box"-plans
			allowing - for example - to register at the DF.
		-->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF" />
		<!-- Capability to start other agents. -->
		<capability name="cmscap" file="jadex.bdi.planlib.cms.CMS" />		
	</capabilities>

	<beliefs>

		<!-- Number of currently running experiments.-->
		<belief name="runningSimulations" class="int">
			<fact>0</fact>
		</belief>

		<!-- Number of started runs till yet: Increment.-->
		<belief name="numberOfRuns" class="int">
			<fact>0</fact>
		</belief>

		<!--
			Contains general facts about the Simulation that are the same for all
			simulation experiments.
		-->
		<belief name="generalSimulationFacts" class="Map">
			<fact>new HashMap()</fact>
		</belief>

		<!--  Contains the results of the experiments of one row. -->
		<belief name="experimentResults" class="Map">
			<fact>new HashMap()</fact>
		</belief>

		<!--  Contains the results of the rows.-->
		<belief name="rowResults" class="Map">
			<fact>new HashMap()</fact>
		</belief>

		<!--
			Contains the intermediate results of an ensemble, i.e. the results of
			the already conducted experiments of this ensemble. The results
			contain the aggregated information of the ExperimentResults classes
			of the ensemble.
		-->
		<belief name="intermediateResults" class="IntermediateResult"/>					

		<!--  The parsed simulation configuration xml file. -->
		<belief name="simulationConf" class="SimulationConfiguration" />

		<!--
			Reference to the XML file that contains the simulation description.
			This file is parsed on agent start.
		-->
		<belief name="simulationDescriptionFile" class="String">
			<fact>"../sodekovs-simulationcontrol/src/main/java/jadex/simulation/persist/TestXML.xml"
			</fact>
		</belief>


		<!--  The parsed simulation configuration xml file. -->
		<belief name="tmpGUI" class="ControlCenter" />
	</beliefs>

	<goals>
		<!-- Predefined Goals.-->
		<!-- Used to find other agents. -->
		<achievegoalref name="cms_search_components">
			<concrete ref="cmscap.cms_search_components" />
		</achievegoalref>
		<!-- Used to search for the dealer. -->
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search" />
		</achievegoalref>
		<!-- Used to start other agents. -->		
		 <achievegoalref name="cms_create_component">
			<concrete ref="cmscap.cms_create_component" />		
		</achievegoalref>		
		<!-- Used to stop other agents. -->
		<achievegoalref name="cms_destroy_component">
			<concrete ref="cmscap.cms_destroy_component" />
		</achievegoalref>
		<!-- Keep agent services registered at DF. -->
		<maintaingoalref name="df_keep_registered">
			<concrete ref="dfcap.df_keep_registered" />
		</maintaingoalref>

		<!--  Start a new round of experiments. -->
		<achievegoal name="StartSimulationExperiments">
			<!--
				<parameter name="location" class="Location" /> <targetcondition>
				$beliefbase.my_location.isNear($goal.location) </targetcondition>
			-->
		</achievegoal>
	</goals>

	<plans>

		<!-- Init the Simulation.-->
		<plan name="init_simulation">
			<body class="InitSimulationPlan" />
		</plan>

		<!-- Start Simulation Experiments.-->
		<plan name="start_sim_experiments">
			<body class="StartSimulationExperimentsPlan" />
			<trigger>
				<goal ref="StartSimulationExperiments" />
			</trigger>
		</plan>

		<!--
			Compute / Evaluate the result of one single simulation experiment.
		-->
		<plan name="computeSingleResults">
			<body class="ComputeSingleResultPlan" />
			<trigger>
				<messageevent ref="inform_simulation_master" />
			</trigger>
		</plan>

		<!--
			Compute / Evaluate the results of one simulation experiment ROW.
		-->
		<plan name="computeExperimentRowResults">
			<body class="ComputeExperimentRowResultsPlan" />
			<trigger>
				<internalevent ref="triggerExperimentRowEvaluation" />
			</trigger>
		</plan>

	</plans>

	<events>
		<!--
			Message sent by simulation client to inform the manager about the
			outcome of the simulation.
		-->
		<messageevent name="inform_simulation_master" direction="receive"
			type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>

		<!-- Event to trigger a new simulation experiment. -->
		<internalevent name="triggerNewExperiment" />

		<!-- Event to trigger the evaluation of a simulation row. -->
		<internalevent name="triggerExperimentRowEvaluation" />

	</events>


	<properties>
		<!--
			The environment may throw exceptions when executing property
			listeners and these listeners are not valid any longer. This leads to
			normal plan failure and can therefore be ignored.
		-->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
	</properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="df_keep_registered">
					<parameter ref="description">
						<value>
							((IDF)$scope.getServiceContainer().getService(IDF.class))
							.createDFComponentDescription(null,
							((IDF)$scope.getServiceContainer().getService(IDF.class))
							.createDFServiceDescription("master_simulation_agent",
							"receive_simulation_run_results", "University of Hamburg"))
						</value>
					</parameter>
					<parameter ref="leasetime">
						<value>20000</value>
					</parameter>
				</initialgoal>
			</goals>
			<plans>
				<!-- <initialplan ref="start_sim_experiments" />-->
				<initialplan ref="init_simulation" />
			</plans>
		</configuration>
	</configurations>

</agent>