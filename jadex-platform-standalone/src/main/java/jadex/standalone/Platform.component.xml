<?xml version="1.0" encoding="UTF-8"?>
<!--
  Bootstrap platform properties.
-->
<componenttype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
						http://jadex.sourceforge.net/jadex-component-2.0.xsd"
	name="Platform" package="jadex.standalone">
	
	<imports>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.service.clock.*</import>
		<import>jadex.bridge.service.execution.*</import>
		<import>jadex.bridge.service.library.*</import>
		<import>jadex.bridge.service.threadpool.*</import>
		<import>jadex.commons.concurrent.*</import>
		<import>jadex.base.fipa.*</import>
		<import>jadex.base.*</import>
		<import>jadex.base.service.simulation.*</import>
		<import>jadex.base.service.remote.*</import>
		<import>jadex.standalone.service.*</import>
		<import>jadex.base.service.message.*</import>
		<import>jadex.base.service.message.transport.*</import>
		<import>jadex.base.service.message.transport.localmtp.*</import>
		<import>jadex.base.service.message.transport.tcpmtp.*</import>
		<import>jadex.base.service.message.transport.niotcpmtp.*</import>
		<import>jadex.base.service.message.transport.codecs.*</import>
		<import>jadex.base.service.deployment.*</import>
		<import>jadex.base.service.settings.*</import>
		<import>jadex.component.*</import>
		<import>jadex.application.*</import>
		<import>java.util.*</import>
		<import>java.lang.reflect.*</import>
		<import>jadex.benchmarking.services.*</import>
	</imports>
	
	<arguments>
		<argument name="platformname">"jadex"</argument>
		<!-- Save platform settings on shutdown? -->
		<argument name="saveonexit">true</argument>
		<argument name="simulation">false</argument>
		<argument name="libpath"></argument>
		<argument name="tcpport">9876</argument>
		<argument name="niotcpport">8765</argument>
		<argument name="awaincludes">""</argument>
		<argument name="awaexcludes">""</argument>
		
		<!-- todo?! -->
		<!-- <argument name="welcome">true</argument>
		<argument name="autoshutdown">true</argument>
		<argument name="platform_shutdown_time">1000</argument> -->
	</arguments>
	
	<componenttypes>
		<componenttype filename="jadex/component/KernelComponent.component.xml" name="kernel_component"/>
		<componenttype filename="jadex/application/KernelApplication.component.xml" name="kernel_application"/>
		<componenttype filename="jadex/micro/KernelMicro.component.xml" name="kernel_micro"/>
		<componenttype filename="jadex/bdi/KernelBDI.component.xml" name="kernel_bdi"/>
		<componenttype filename="jadex/bdibpmn/KernelBDIBPMN.component.xml" name="kernel_bdibpmn"/>
		<componenttype filename="jadex/bpmn/KernelBPMN.component.xml" name="kernel_bpmn"/>
		<componenttype filename="jadex/component/KernelMulti.component.xml" name="kernel_multi"/>
		<componenttype filename="jadex/base/service/remote/RemoteServiceManagementAgent.class" name="rms"/>
		<componenttype filename="jadex/base/service/awareness/AwarenessAgent.class" name="awa"/>

		<!-- <componenttype filename="jadex/tools/jcc/JCC.agent.xml" name="jcc"/> -->
		<!--<componenttype filename="jadex/tools/jcc/JCCAgent.class" name="jcc"/>-->
		<componenttype filename="/jadex/tools/jcc/JCCAgent.class" name="jcc"/>
	</componenttypes>
	
	<services>
		<providedservice class="ISettingsService">
			<implementation>
				new SettingsService($args.platformname, $component, $args.saveonexit)
			</implementation>
		</providedservice>
		<providedservice class="IThreadPool">
			<implementation proxytype="raw">
				//new ThreadPoolService(new ThreadPool(new DefaultThreadPoolStrategy(0, 20, 30000, 0)), $component.getServiceProvider())
				new ThreadPoolService(new ThreadPool(new DefaultThreadPoolStrategy(0, 20, 30000, 500)), $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IExecutionService">
			<implementation proxytype="raw">
				$args.simulation
				? new SyncExecutionService($component.getServiceProvider())
				: new AsyncExecutionService($component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="ILibraryService">
			<implementation proxytype="raw">
				new LibraryService($args.libpath, $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IClockService">
			<implementation proxytype="raw">
				$args.simulation
				? new ClockService(new ClockCreationInfo(IClock.TYPE_EVENT_DRIVEN, "simulation_clock", System.currentTimeMillis(), 100), $component.getServiceProvider())
				: new ClockService(new ClockCreationInfo(IClock.TYPE_SYSTEM, "system_clock", System.currentTimeMillis(), 100), $component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="IMessageService">
			<implementation proxytype="raw">
				new MessageService($component.getExternalAccess(), $component.getLogger(),
				new ITransport[]
				{
					new LocalTransport($component.getServiceProvider()),
					//new NIOTCPTransport($component.getServiceProvider(), $args.niotcpport, java.util.logging.Logger.getLogger("test"))
					new NIOTCPTransport($component.getServiceProvider(), $args.niotcpport, $component.getLogger())
					//new TCPTransport($component.getServiceProvider(), $args.tcpport)
				},
				new MessageType[]
				{
					new FIPAMessageType()
				}, null, new CodecFactory()
				)
			</implementation>
		</providedservice>
		<providedservice class="IComponentManagementService">
			<implementation proxytype="raw">
				new ComponentManagementService($component.getExternalAccess(), $component.getComponentAdapter(), $args.componentfactory)
			</implementation>
		</providedservice>
		<providedservice class="IDF">
			<implementation proxytype="raw">
				new DirectoryFacilitatorService($component.getServiceProvider())
			</implementation>
		</providedservice>
		<providedservice class="ISimulationService">
			<implementation>
				new SimulationService($component)
			</implementation>
		</providedservice>
		<providedservice class="IDeploymentService">
			<implementation>
				new DeploymentService($component.getServiceProvider())
			</implementation>		
		</providedservice>
		<providedservice name="envextension" class="IComponentFactoryExtensionService">
			<implementation class="jadex.extension.envsupport.EnvSupportExtensionService"/>
		</providedservice>
		<providedservice name="agrextension" class="IComponentFactoryExtensionService">
			<implementation class="jadex.extension.agr.AGRExtensionService"/>
		</providedservice>
		
		<requiredservice name="factoryservices" class="IComponentFactory" multiple="true"/>
	</services>

	<properties>
		<property name="componentviewer.viewerclass">"jadex.base.gui.componentviewer.DefaultComponentServiceViewerPanel"</property>
		<!-- <property name="viewerpanel.componentviewerclass">""</property> -->
		<!-- <property name="logging.level">java.util.logging.Level.INFO</property> -->
		<!-- <property name="logging.level">java.util.logging.Level.WARNING</property> -->
		<property name="logging.level">java.util.logging.Level.SEVERE</property>
	</properties>
	
	<configurations>
		<configuration name="all_kernels auto (rms, awa, jcc)">
			<arguments>
				<argument name="tcpport">0</argument>
				<argument name="niotcpport">0</argument>
				<argument name="platformname">null</argument>
			</arguments>
			<components>
				<component name="kernels" type="kernel_multi" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="awa" type="awa" daemon="true">
					<arguments>
						<argument name="includes">$args.awaincludes</argument>
						<argument name="excludes">$args.awaexcludes</argument>
					</arguments>
				</component>
				<component name="jcc" type="jcc"/>
			</components>
		</configuration>
	
		<configuration name="all_kernels (rms, awa, jcc)">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="awa" type="awa" daemon="true">
					<arguments>
						<argument name="includes">$args.awaincludes</argument>
						<argument name="excludes">$args.awaexcludes</argument>
					</arguments>
				</component>
				<component name="jcc" type="jcc"/>
			</components>
		</configuration>
		
		<configuration name="all_kernels (rms, jcc)">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<component type="kernel_bdi" daemon="true"/>
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<!-- <component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/> -->
				<component name="rms" type="rms" daemon="true"/>
				<component name="jcc" type="jcc"/>
			</components>
		</configuration>
		
		<configuration name="multi_kernel (rms, jcc)">
			<components>
				<component name="kernels" type="kernel_multi" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
				<component name="jcc" type="jcc"/>
			</components>
		</configuration>
		
		<configuration name="all_kernels (rms, awa)">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="awa" type="awa" daemon="true">
					<arguments>
						<argument name="includes">$args.awaincludes</argument>
						<argument name="excludes">$args.awaexcludes</argument>
					</arguments>
				</component>
			</components>
		</configuration>
		
		<configuration name="all_kernels (rms)">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="rms" type="rms" daemon="true"/>
			</components>
		</configuration>
		
		<configuration name="all_kernels (jcc)">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro" daemon="true"/>
				<!-- <component type="kernel_bdi" daemon="true"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn" daemon="true"/>
				<component name="kernel_bpmn" type="kernel_bpmn" daemon="true"/>
				<component name="jcc" type="jcc"/>
			</components>
		</configuration>
		
		<!-- todo remove: support autoshutdown as instance level flag. -->
		<configuration name="all_kernels_no_daemons">
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro"/>
				<!-- <component type="kernel_bdi"/> -->
				<component name="kernel_bdibpmn" type="kernel_bdibpmn"/>
				<component name="kernel_bpmn" type="kernel_bpmn"/>
				<component name="rms" type="rms"/>
			</components>
		</configuration>
		
		<!-- Configuration used by jadex.base.test.ComponentTestSuite -->
		<configuration name="testcases">
			<arguments>
				<argument name="platformname">"testcases"</argument>
				<argument name="saveonexit">false</argument>
				<argument name="tcpport">0</argument>
				<argument name="niotcpport">0</argument>
			</arguments>
			<components>
				<component name="kernel_component" type="kernel_component" daemon="true"/>
				<component name="kernel_application" type="kernel_application" daemon="true"/>
				<component name="kernel_micro" type="kernel_micro"/>
				<component name="kernel_bdibpmn" type="kernel_bdibpmn"/>
				<component name="kernel_bpmn" type="kernel_bpmn"/>
			</components>
		</configuration>
		
	</configurations>
</componenttype>