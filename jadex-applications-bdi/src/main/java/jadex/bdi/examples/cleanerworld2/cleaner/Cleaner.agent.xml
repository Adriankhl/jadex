<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The Cleaner Agent.</H3>

	The agent mainly has 3 top-level goals:<br>
	- Searching for waste (perform lookforwaste).<br>
	- Cleaning up waste (achieve cleanup).<br>
	- Keep the battery loaded (maintain battery loaded).<br><br>

	To achieve this goals it uses various
	subgoals for decomposition of the overall
	tasks.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Cleaner"
	package="jadex.bdi.examples.cleanerworld2.cleaner">
	
	<imports>
		<import>java.util.*</import>
		<import>jadex.adapter.base.clock.*</import>
		<import>jadex.bdi.planlib.simsupport.environment.*</import>
		<import>jadex.bdi.planlib.simsupport.common.math.*</import>
	</imports>
	
	<capabilities>
    	<capability name="simcap" file="jadex.bdi.planlib.simsupport.simcap.SimAgent"/>
	</capabilities>
	
	<beliefs>
		<!-- Battery state -->
		<belief name="battery_state" class="String">
			<fact>"charged"</fact>
		</belief>
		<!-- Our current waste target -->
		<belief name="waste_target" class="Integer">
			<fact>null</fact>
		</belief>
		<!-- Name of the simulation environment -->
		<belief name="environment_name" class="String">
			<fact>new String("CleanerWorld2")</fact>
		</belief>
		<!-- The simulation object representing the cleaner -->
    	<belief name="simobject_id" class="Integer">
      		<fact>null</fact>
    	</belief>
  	</beliefs>
	
	<goals>
		<!-- Observe the battery state. -->
		<maintaingoal name="maintainbatteryloaded">
			<deliberation>
				<inhibits ref="performlookforwaste" inhibit="when_in_process"/>
				<inhibits ref="achievecleanup" inhibit="when_in_process"/>
			</deliberation>
			<!-- Engage in actions when the state is low. -->
 			<maintaincondition>
				?rbelief = (belief (element_has_model ?mbelief) (belief_has_fact ?fact))
				?mbelief = (mbelief (element_has_name "battery_state"))
				(test (!= ?fact "low"))
 			</maintaincondition>
			<!-- The goal is satisfied when the charge state is 1.0. -->
			<targetcondition>
				?rbelief = (belief (element_has_model ?mbelief) (belief_has_fact ?fact))
				?mbelief = (mbelief (element_has_name "battery_state"))
				(test (== ?fact "charged"))
 			</targetcondition>
		</maintaingoal>
		
		<!-- Clean up some waste. -->
		<achievegoal name="achievecleanup" retry="true" exclude="when_failed">
			<parameter name="waste" class="Waste">
				<!-- Bind against variable from creation condition. -->
				<!-- <bindingoptions>"?waste"</bindingoptions> -->
				<value>?waste</value>
			</parameter>
			<!-- Adopt when we have a target -->
			<creationcondition>
				?rbelief = (belief (element_has_model ?mbelief) (belief_has_fact ?fact))
				?mbelief = (mbelief (element_has_name "waste_target"))
				(test (!= ?fact null))
			</creationcondition>
			<deliberation cardinality="1">
				<inhibits ref="performlookforwaste"/>
			</deliberation>
		</achievegoal>
		
		<!-- Look out for waste when nothing better to do. -->
		<performgoal name="performlookforwaste" retry="true" exclude="never">
 		</performgoal>
 		
 		<!-- Event handling -->
 		
 		<plan name="low_battery_event_plan">
			<body class="LowBatteryEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("battery_low")</match>
				</internalevent>
			</trigger>
		</plan>
		
	    <achievegoalref name="sim_create_object">
        	<concrete ref="simcap.sim_create_object"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_set_destination">
    		<concrete ref="simcap.sim_set_destination"/>
		</achievegoalref>
		
		<achievegoalref name="sim_get_random_position">
    		<concrete ref="simcap.sim_get_random_position"/>
		</achievegoalref>
		
		<achievegoalref name="sim_connect_environment">
    		<concrete ref="simcap.sim_connect_environment"/>
		</achievegoalref>
  	</goals>
  	
  	<plans>
  		<plan name="look_for_waste_plan">
  			<body class="LookForWastePlan"/>
  		</plan>
    	<!-- Initialization Plan. -->
    	<plan name="initialization">
      		<body class="InitializeCleanerPlan"/>
    	</plan>
    </plans>
    
    <events>
    	<!-- Generic simulation event. -->
    	<internaleventref name="simulation_event">
    		<concrete ref="simcap.simulation_event"/>
    	</internaleventref>
	</events>
    
  	<configurations>
    	<configuration name="default">
      		<plans>
        		<initialplan ref="initialization"/>
      		</plans>
    	</configuration>
  	</configurations>
</agent>