<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The Cleaner Agent.</H3>

	The agent mainly has 4 top-level goals which may be triggered by various events:<br>
	- Searching for waste (look_for_waste).<br>
	- Cleaning up waste (achieve_cleanup).<br>
	- Depositing the waste in a waste bin when the cleaner is full (dispose_waste)<br>
	- Keep the battery loaded (charge_battery).<br><br>

	To achieve this goals it uses various
	subgoals for decomposition of the overall
	tasks.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Cleaner"
	package="jadex.bdi.examples.cleanerworld2.cleaner">
	
	<imports>
		<import>java.util.*</import>
		<import>jadex.adapter.base.clock.*</import>
		<import>jadex.bdi.planlib.simsupport.environment.*</import>
		<import>jadex.bdi.planlib.simsupport.common.math.*</import>
		<import>jadex.commons.Tuple</import>
	</imports>
	
	<capabilities>
    	<capability name="simcap" file="jadex.bdi.planlib.simsupport.simcap.SimAgent"/>
	</capabilities>
	
	<beliefs>
		<!-- Known waste bins and positions (id, position) -->
		<beliefset name="waste_bins" class="Tuple"/>
		<!-- Known charging stations and positions (id, position) -->
		<beliefset name="charging_stations" class="Tuple"/>
		<!-- Name of the simulation environment -->
		<belief name="environment_name" class="String">
			<fact>new String("CleanerWorld2")</fact>
		</belief>
		<!-- The simulation object representing the cleaner -->
    	<belief name="simobject_id" class="Integer">
      		<fact>null</fact>
    	</belief>
  	</beliefs>
	
	<goals>
		<achievegoal name="charge_battery">
			<deliberation>
				<inhibits ref="dispose_waste" inhibit="when_in_process"/>
				<inhibits ref="achieve_cleanup" inhibit="when_in_process"/>
				<inhibits ref="look_for_waste" inhibit="when_in_process"/>
			</deliberation>
		</achievegoal>
		
		<!-- Dispose the waste. -->
		<achievegoal name="dispose_waste">
			<deliberation cardinality="1">
				<inhibits ref="achieve_cleanup"/>
				<inhibits ref="look_for_waste"/>
			</deliberation>
		</achievegoal>
		
		<!-- Clean up some waste. -->
		<achievegoal name="achieve_cleanup">
			<parameter name="waste" class="Integer"/>
			<parameter name="waste_position" class="IVector2"/>
			<deliberation cardinality="1">
				<inhibits ref="look_for_waste"/>
			</deliberation>
		</achievegoal>
		
		<!-- Look out for waste when nothing better to do. -->
		<performgoal name="look_for_waste" retry="true" exclude="never"/>
 		
 		<!-- Sets a new destination for the cleaner. -->
 		<performgoal name="go_to_destination">
 			<!-- Destination of the cleaner -->
			<parameter name="destination" class="IVector2"/>
 		</performgoal>
 		
 		<!-- Stops the cleaner. -->
 		<achievegoal name="stop"/>
 		
 		<!-- Enable the waste sensor -->
 		<achievegoal name="enable_waste_sensor"/>
		
	    <achievegoalref name="sim_create_object">
        	<concrete ref="simcap.sim_create_object"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_get_position">
        	<concrete ref="simcap.sim_get_position"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_set_velocity">
        	<concrete ref="simcap.sim_set_velocity"/>
    	</achievegoalref>
    	
    	<performgoalref name="sim_go_to_destination">
    		<concrete ref="simcap.sim_go_to_destination"/>
		</performgoalref>
		
		<achievegoalref name="sim_remove_task">
    		<concrete ref="simcap.sim_remove_task"/>
		</achievegoalref>
		
		<performgoalref name="sim_perform_action">
    		<concrete ref="simcap.sim_perform_action"/>
		</performgoalref>
		
		<achievegoalref name="sim_get_random_position">
    		<concrete ref="simcap.sim_get_random_position"/>
		</achievegoalref>
		
		<achievegoalref name="sim_add_environment_process">
    		<concrete ref="simcap.sim_add_environment_process"/>
		</achievegoalref>
		
		<achievegoalref name="sim_remove_environment_process">
    		<concrete ref="simcap.sim_remove_environment_process"/>
		</achievegoalref>
		
		<achievegoalref name="sim_connect_environment">
    		<concrete ref="simcap.sim_connect_environment"/>
		</achievegoalref>
  	</goals>
  	
  	<plans>
  		<plan name="charge_battery_plan">
  			<body class="ChargeBatteryPlan"/>
  			<trigger>
				<goal ref="charge_battery"/>
			</trigger>
  		</plan>
  		
  		<plan name="dispose_waste_plan">
  			<body class="DisposeWastePlan"/>
  			<trigger>
				<goal ref="dispose_waste"/>
			</trigger>
  		</plan>
  		
  		<plan name="achieve_cleanup_plan">
  			<parameter name="waste" class="Integer">
				<goalmapping ref="achieve_cleanup.waste"/>
			</parameter>
			<parameter name="waste_position" class="IVector2">
				<goalmapping ref="achieve_cleanup.waste_position"/>
			</parameter>
  			<body class="AchieveCleanupPlan"/>
  			<trigger>
				<goal ref="achieve_cleanup"/>
			</trigger>
  		</plan>
  		
  		<plan name="look_for_waste_plan">
  			<body class="LookForWastePlan"/>
  			<trigger>
				<goal ref="look_for_waste"/>
			</trigger>
  		</plan>
  		
  		<plan name="enable_waste_sensor_plan">
  			<body class="EnableWasteSensorPlan"/>
  			<trigger>
				<goal ref="enable_waste_sensor"/>
			</trigger>
  		</plan>
  		
  		<plan name="go_to_destination_plan">
  			<parameter name="destination" class="IVector2">
				<goalmapping ref="go_to_destination.destination"/>
			</parameter>
  			<body class="GoToDestinationPlan"/>
  			<trigger>
				<goal ref="go_to_destination"/>
			</trigger>
  		</plan>
  		
  		<plan name="stop_plan">
  			<body class="StopPlan"/>
  			<trigger>
				<goal ref="stop"/>
			</trigger>
  		</plan>
  		
  		<!-- Event handling -->
 		
 		<plan name="low_battery_event_plan">
			<body class="LowBatteryEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("battery_low")</match>
				</internalevent>
			</trigger>
		</plan>
		
		<plan name="out_of_waste_capacity_event_plan">
			<body class="OutOfWasteCapacityEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("out_of_waste_capacity")</match>
				</internalevent>
			</trigger>
		</plan>
		
		<plan name="waste_bin_found_event_plan">
			<body class="WasteBinFoundEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("waste_bin_found")</match>
				</internalevent>
			</trigger>
		</plan>
		
		<plan name="charging_station_found_event_plan">
			<body class="ChargingStationFoundEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("charging_station_found")</match>
				</internalevent>
			</trigger>
		</plan>
		
		<plan name="waste_found_event_plan">
			<body class="WasteFoundEventPlan"/>
			<trigger>
 				<internalevent ref="simulation_event">
					<match>$event.getParameter("type").getValue().equals("waste_found")</match>
				</internalevent>
			</trigger>
		</plan>
  		
    	<!-- Initialization Plan. -->
    	<plan name="initialization">
      		<body class="InitializeCleanerPlan"/>
    	</plan>
    </plans>
    
    <events>
    	<!-- Reached destination in dispose mode. -->
    	<internalevent name="reached_dispose_destination_event"/>
    	<!-- Reached waste event. -->
    	<internalevent name="reached_waste_event"/>
    	<!-- Generic simulation event. -->
    	<internaleventref name="simulation_event">
    		<concrete ref="simcap.simulation_event"/>
    	</internaleventref>
	</events>
    
  	<configurations>
    	<configuration name="default">
      		<plans>
        		<initialplan ref="initialization"/>
      		</plans>
    	</configuration>
  	</configurations>
</agent>