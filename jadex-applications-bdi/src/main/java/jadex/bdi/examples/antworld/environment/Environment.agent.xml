<!--
  <H3>Ant agent.</H3>

  Runs randomly on the grid. If it feels gravitaton, it is absorbed by the gravitation center.

-->

<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Ant"
	package="jadex.bdi.examples.antworld.environment">

	<imports>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.adapter.base.envsupport.environment.space2d.*</import>
		<import>jadex.adapter.base.envsupport.environment.*</import>
		<import>jadex.adapter.base.envsupport.math.*</import>		
	</imports>

		<capabilities>
		<!-- Include the StartAgents capability as startcap for starting agents. -->
		<capability name="startercap" file="jadex.bdi.planlib.starter.StartAgents"/>
		<capability name="amscap" file="jadex.bdi.planlib.ams.AMS"/>
	</capabilities>
	
	<beliefs>
		
 		<!-- Environment. -->
		<belief name="env" class="Grid2D">
 			<fact>(Grid2D)$scope.getApplicationContext().getSpace("mygc2dspace")</fact>			
 		</belief>
 		
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
			 <fact>$beliefbase.env.getAvatar($scope.getAgentIdentifier())</fact>			 
 		</belief>

		<!-- The actual position on the grid world. -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact language="jcl">
				$beliefbase.myself.position 
				
				// $beliefbase.myself.getProperty("position")
				
				// ((Environment)$beliefbase.getBelief("env").getFact()).getPosition($scope.getAgentName())
				// ?agent = (agent (agent_has_localname ?agentname))
				// ?rbel_env = (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
				// ?mbel_env = (mbelief (melement_has_name "env"))
				// ?env = (Environment (getPosition (?agentname) ?ret))
			</fact>
 		</belief>
	</beliefs>

	<goals>
		<!-- Update the Environment.-->		
		<performgoal name="updateEnv" exclude="never"/>	
	</goals>

	<plans>		
		<!-- Update the Environment.-->
		<plan name="update_env">
			<body class="UpdateEnvironmentPlan"/>
			<trigger>
				<goal ref="updateEnv"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<!-- The environment may throw exceptions when executing property listeners
			and these listeners are not valid any longer. This leads to normal plan
			failure and can therefore be ignored. -->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="updateEnv"/>			
			</goals>
		</configuration>
	</configurations>

</agent>