
	<!--
		<H3>Ant agent.</H3> Runs randomly on the grid. If it finds food it
		brings it back to the nest.
	-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="ForagingAnt" package="jadex.bdi.examples.antworld">

	<imports>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.adapter.base.envsupport.environment.space2d.*</import>
		<import>jadex.adapter.base.envsupport.environment.*</import>
		<import>jadex.adapter.base.envsupport.math.*</import>
		<import>java.util.*</import>
	</imports>

	<beliefs>

		<!-- Environment. -->
		<belief name="env" class="Grid2D">
			<fact>
				(Grid2D)$scope.getApplicationContext().getSpace("mygc2dspace")
			</fact>
		</belief>

		<!-- Myself. -->
		<belief name="myself" class="ISpaceObject">
			<fact>$beliefbase.env.getAvatar($scope.getAgentIdentifier())</fact>
		</belief>

		<!-- The actual position on the grid world. -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact language="jcl"> $beliefbase.myself.position </fact>
		</belief>

		<!-- Piece of food carried at that moment. -->
		<belief name="carriedFood" class="ISpaceObject" evaluationmode="push">
			<fact language="jcl"> $beliefbase.myself.food </fact>
		</belief>

		<!-- Food sources at the current position. -->
		<beliefset name="foodSources" class="ISpaceObject" />

		<!-- Known nests. -->
		<beliefset name="nests" class="ISpaceObject" />

		<!-- Smelled pheromones. -->
		<beliefset name="pheromones" class="ISpaceObject" />

	</beliefs>


	<goals>


		<!-- Goal for going to a specified position. -->
		<achievegoal name="go">
			<parameter name="pos" class="IVector2" />
		</achievegoal>

		<!--  Init goal. Executed if no other goal is active. -->
		<performgoal name="check" exclude="never" />


		<!-- This goal is used to mine food.-->
		<achievegoal name="food_mining" exclude="never" retry="false">
			<unique />
			<creationcondition language="jcl">
				Arrays.asList($beliefbase.foodSources).size() &gt; 0
			</creationcondition>
			<deliberation>
				<inhibits ref="pheromone_follow" />
			</deliberation>
		</achievegoal>

		<!--
			This goal is used to follow pheromones in order to find a food
			source.
		-->
		<achievegoal name="pheromone_follow" exclude="never"
			retry="false">
			<unique />
			<creationcondition language="jcl">
				Arrays.asList($beliefbase.pheromones).size() &gt; 0
			</creationcondition>
			<!--
				<deliberation> <inhibits ref="go"/> <inhibits ref="check"/>
				</deliberation>
			-->
		</achievegoal>

	</goals>

	<plans>

		<!--
			Plan for moving to a food source and bringing a piece of food back to
			a nest.
		-->
		<plan name="foodMining">
			<body class="FoodMiningPlan" />
			<trigger>
				<goal ref="food_mining" />
			</trigger>
		</plan>

		<!-- Plan for moving to a food source with the help of pheromones. This plan is executed if the ant is under the influence / feels pheromones.-->
		<plan name="pheromoneWalk">
			<body class="PheromoneWalkPlan" />
			<trigger>
				<goal ref="pheromone_follow" />
			</trigger>
		</plan>

		<!-- Plan for running on a predefined route and searching waste. -->
		<plan name="checking_plan">
			<body class="CheckingPlanEnv" />
			<trigger>
				<goal ref="check" />
			</trigger>
		</plan>

		<!-- Plan for going to a target position. -->
		<plan name="go_plan">
			<parameter name="pos" class="IVector2">
				<goalmapping ref="go.pos" />
			</parameter>
			<body class="GoPlanEnv" />
			<trigger>
				<goal ref="go" />
			</trigger>
		</plan>

		<!-- Plan to init the agent.-->
		<plan name="init_plan">
			<body class="InitPlan" />
		</plan>

	</plans>

	<properties>
		<!--
			The environment may throw exceptions when executing property
			listeners and these listeners are not valid any longer. This leads to
			normal plan failure and can therefore be ignored.
		-->
		<property name="logging.level">java.util.logging.Level.WARNING</property>
		<property name="debugging">false</property>
	</properties>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Initial goal for searching for garbage. -->
				<initialgoal ref="check" />
			</goals>
			<plans>
				<initialplan ref="init_plan" />
			</plans>
		</configuration>
	</configurations>

</agent>