<!--
	The movement capability supplies the agents with basic
	goals, plans and beliefs for moving around.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Movement"
	package="jadex.bdi.examples.marsworld_env.movement">

	<imports>
		<import>jadex.adapter.base.envsupport.environment.*</import>
		<import>jadex.adapter.base.envsupport.environment.space2d.*</import>
		<import>jadex.adapter.base.envsupport.math.*</import>
	</imports>

	<beliefs>
		<!-- Environment. -->
		<belief name="environment" class="ContinuousSpace2D">
 			<fact>(ContinuousSpace2D)$scope.getApplicationContext().getSpace("my2dspace")</fact>
 		</belief>
 		
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
 			<fact>$beliefbase.environment.getOwnedObjects($scope.getAgentIdentifier())[0]</fact>
 		</belief>

		<!-- The home location. - ->
		<belief name="my_home" class="Location" exported="true">
			<fact>$beliefbase.environment.getSpaceObjectsByType("homebase")[0].getProperty("position")</fact>
		</belief>-->

		<!-- The current location. - ->
		<belief name="my_location" class="Location" exported="true">
			<fact>$beliefbase.my_home</fact>
		</belief>-->

		<!-- The agent type (carry, producer or sentry) - ->
		<belief name="my_type" class="String" exported="true"/>-->

		<!-- The speed. - ->
		<belief name="my_speed" class="double" exported="true"/>-->

		<!-- The sight radius. - ->
		<belief name="my_vision" class="double" exported="true"/>-->

		<!-- Is the mission finished? - ->
		<belief name="missionend" class="boolean" updaterate="1000" exported="true">
			<fact evaluationmode="pull">
 				$beliefbase.environment.getSpaceObjectsByType("homebase")[0].getProperty("missiontime")&lt;=$scope.getTime()
 			</fact>
		</belief>-->

		<!-- The seen targets. -->
		<beliefset name="my_targets" class="ISpaceObject" exported="true" />
	</beliefs>

	<goals>
		<!-- Move to a certain location. -->
		<achievegoal name="move_dest" exported="true">
			<parameter name="destination" class="IVector2"/>
		</achievegoal>

		<!-- Walk around without target when nothing else to do. -->
		<performgoal name="walk_around" retry="true" exclude="never" exported="true">
<!--
			<dropcondition language="jcl">
				$beliefbase.missionend
				
				// (belief (element_has_model ?mbel) (belief_has_fact true))
				// ?mbel	= (mbelief (melement_has_name "missionend"))
			</dropcondition>
  -->
  		</performgoal>

		<!-- Watch for targets and memorize them. - ->
		<performgoal name="watch_targets" exported="true">
 			<dropcondition language="jcl">
				$beliefbase.missionend
				
				// (belief (element_has_model ?mbel) (belief_has_fact true))
				// ?mbel	= (mbelief (melement_has_name "missionend"))
			</dropcondition>
		</performgoal>-->

		<!-- Move home when missionend. - ->
		<achievegoal name="missionend">
			<parameter name="destination" class="IVector2">
				<value>$beliefbase.environment.getSpaceObjectsByType("homebase")[0].getProperty("position")</value>
			</parameter>
			<unique dummy="true"/>
			<creationcondition language="jcl">
				$beliefbase.missionend
				// &amp;&amp; !$beliefbase.my_location.isNear($beliefbase.my_home)

				// (belief (element_has_model ?mbel_missionend) (belief_has_fact true))
				// ?mbel_missionend = (mbelief (melement_has_name "missionend"))
				// 
				// (belief (element_has_model ?mbel_myhome) (belief_has_fact ?myhome))
				// ?mbel_myhome = (mbelief (melement_has_name "my_home"))
				// 
				// (belief (element_has_model ?mbel_mylocation) (belief_has_fact ?mylocation))
				// ?mbel_mylocation = (mbelief (melement_has_name "my_location"))
				// 
				// ?mylocation	= (Location (isNear(?myhome) false))
			</creationcondition>
		</achievegoal>-->
	</goals>

	<plans>

		<!-- Go to a destination. -->
		<plan name="go_destination">
			<parameter name="destination" class="IVector2">
 				<goalmapping ref="move_dest.destination"/>
<!--  				<goalmapping ref="missionend.destination"/> -->
			</parameter>
			<body class="MoveToLocationPlan"/>
			<trigger>
				<goal ref="move_dest"/>
<!-- 				<goal ref="missionend"/> -->
			</trigger>
		</plan>

		<!-- Walk around randomly. -->
		<plan name="randomwalk">
			<body class="RandomWalkPlan"/>
			<trigger>
				<goal ref="walk_around"/>
			</trigger>
		</plan>

	</plans>

</capability>
