<!--
	<H3>Sentry agent for finding ore..</H3>

	This agent move to positons to check for minerals.
	Then calls the Production Agent to produce the ore.
	After all locations have been visited the Agent moves home.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Sentry"
	package="jadex.bdi.examples.marsworld_env.sentry">

	<imports>
		<import>java.util.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.adapter.base.envsupport.environment.*</import>
	</imports>

	<capabilities>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="jadex.bdi.examples.marsworld_env.movement.Movement" />
	</capabilities>

	<beliefs>

		<!-- The seen targets. -->
		<beliefsetref name="my_targets" class="Target">
			<concrete ref="move.my_targets"/>
		</beliefsetref>

		<!-- The analysed targets. -->
		<beliefset name="analysed_targets" class="ISpaceObject"/>
<!--
		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>
		
		<beliefref name="my_location">
			<concrete ref="move.my_location"/>
		</beliefref>
		
		<beliefref name="environment">
			<concrete ref="move.environment"/>
		</beliefref>
-->
	</beliefs>

  	<goals>
		<!-- Analyse a target.-->
		<achievegoal name="analyse_target" retry="false">
			<!-- The parameter target is bound to one
				of the facts in the belief my_targets. -->
			<parameter name="target" class="ISpaceObject">
				<value>
					// Hack!!! Condition can also match target object from message
					// $beliefbase.environment.getTarget($target.getId())
					$target
				</value>
			</parameter>
			<unique dummy="true"/>
			<!-- Create a new goal when a target was added
				and the mission is going on. -->
			<creationcondition language="jcl">
				//!$beliefbase.missionend &amp;&amp;
				ISpaceObject $target &amp;&amp;
				Arrays.asList($beliefbase.my_targets).contains($target) &amp;&amp;
				$target.marked==null
				// Todo: Should work for method also.
				// $target.getProperty("marked")==null
				
				// (belief (element_has_model.melement_has_name "missionend") (belief_has_fact false))
				//
				// (beliefset (element_has_model ?mbel_mytargets) (beliefset_has_facts $?x ?target $?y))
				// ?mbel_mytargets = (mbeliefset (melement_has_name "my_targets"))
				// (not
				// 	(and
				// 		(beliefset (element_has_model ?mbel_analysedtargets) (beliefset_has_facts $?p ?target $?q))
				// 		?mbel_analysedtargets = (mbeliefset (melement_has_name "analysed_targets"))
				// 	)
				// )
			</creationcondition>
			<!-- Suspend the goal when some other target is nearer to the agent.- ->
			<contextcondition language="jcl">
				// (select one Target $target from $beliefbase.my_targets
				// order by $beliefbase.my_location.getDistance($target.getLocation()))
				// == $goal.target
				
				!(Target $t2 &amp;&amp; $beliefbase.my_location.getDistance($goal.target.getLocation()) > $beliefbase.my_location.getDistance($t2.getLocation()))
			</contextcondition> -->
			<!-- Drop the goal on mission end. - ->
			<dropcondition language="jcl">
				$beliefbase.missionend
				// (belief (element_has_model.melement_has_name "missionend") (belief_has_fact true))
			</dropcondition>-->

			<deliberation>
				<inhibits ref="move.walk_around"/>
			</deliberation>
			<!-- The goal is reached when the target is analysed. -->
			<targetcondition language="jcl">
				// $beliefbase.getBeliefSet("analysed_targets").containsFact($goal.target)
				$goal.target.getProperty("marked")!=null
				
				// ?rgoal	= (goal (parameterelement_has_parameters ?param_target))
				// ?param_target	= (parameter (parameter_has_value ?target))
				// (beliefset (element_has_model ?mbel_analysedtargets) (beliefset_has_facts $?p ?target $?q))
				// ?mbel_analysedtargets = (mbeliefset (melement_has_name "analysed_targets"))
 
				// ?rgoal	= (goal (parameterelement_has_parameters["target"].parameter_has_value ?target))
				// (beliefset (element_has_model.melement_has_name "analysed_targets") (beliefset_has_facts contains ?target))
 			</targetcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Analyse a target. -->
		<plan name="do_analyse">
			<parameter name="target" class="ISpaceObject">
				<goalmapping ref="analyse_target.target"/>
			</parameter>
			<body class="AnalyseTargetPlan"/>
			<trigger>
				<goal ref="analyse_target"/>
			</trigger>
		</plan>

		<!-- Add a new target when new info available. - ->
		<plan name="add_target">
			<body class="AddTargetPlan"/>
			<trigger>
				<messageevent ref="target_inform"/>
			</trigger>
		</plan>-->
	</plans>

	<events>
		<!-- Other agents inform the sentries about discovered
			potential ore resources. - ->
		<messageevent name="target_inform" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
			<match>$content instanceof Target</match>
		</messageevent>

		<messageevent name="request_producer" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
		</messageevent>-->
	</events>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Create a goal for walking around. -->
				<initialgoal ref="move.walk_around"/>
			</goals>
		</configuration>
	</configurations>

</agent>
