<!--
	<H3>Sentry agent for finding ore..</H3>

	This agent move to positons to check for minerals.
	Then calls the Production Agent to produce the ore.
	After all locations have been visited the Agent moves home.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Sentry"
	package="jadex.bdi.examples.marsworld.sentry">

	<imports>
		<import>jadex.bdi.examples.marsworld.*</import>
		<import>jadex.bdi.examples.marsworld.movement.*</import>
		<import>jadex.adapter.base.fipa.*</import>
		<import>java.util.logging.*</import>
	</imports>

	<capabilities>
		<!-- Include the df capability as dfcap for finding other agents
			and registering the sentry service. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="jadex.bdi.examples.marsworld.movement.Movement" />
	</capabilities>

	<beliefs>

		<!-- The seen targets. -->
		<beliefset name="my_targets" class="Target"/>

		<!-- The seen targets. -->
		<beliefset name="analysed_targets" class="Target"/>

		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>
	</beliefs>

  	<goals>
		<!-- Look for targets. -->
		<achievegoal name="find_targets">
 			<dropcondition>
				// $beliefbase.missionend
				(belief (element_has_model.melement_has_name "missionend") (belief_has_fact true))
			</dropcondition>
		</achievegoal>

		<!-- Analyse a target.-->
		<achievegoal name="analyse_target" retry="false">
			<!-- The parameter target is bound to one
				of the facts in the belief my_targets. -->
			<parameter name="target" class="Target">
				<value>?target</value>
			</parameter>
			<unique/>
			<!-- Create a new goal when a target was added
				and the mission is going on. -->
			<creationcondition>
				// unique (?rcapa and ?mgoal are provided internally)
				(not (and
					?adopted	= (goal (element_has_model ?mgoal))
					?rcapa		= (capability (capability_has_goals contains ?adopted))
				))

				// !$beliefbase.missionend
				// Hack should not access subcapability directly!!! 
				(belief (element_has_model ?mbel_missionend) (belief_has_fact false))
				?mbel_missionend	= (mbelief (melement_has_name "missionend"))

				// select $target from $beliefbase.my_targets
				// where !$beliefbase.getBeliefSet("analysed_targets").containsFact($target)
				(beliefset (element_has_model ?mbel_mytargets) (beliefset_has_facts $?x ?target $?y))
				?mbel_mytargets = (mbeliefset (melement_has_name "my_targets"))
				(not
					(and
						(beliefset (element_has_model ?mbel_analysedtargets) (beliefset_has_facts $?p ?target $?q))
						?mbel_analysedtargets = (mbeliefset (melement_has_name "analysed_targets"))
					)
				)
			</creationcondition>
			<!-- Suspend the goal when some other target is nearer to the agent.- ->
			<contextcondition>
				(select one Target $target from $beliefbase.my_targets
				order by $beliefbase.my_location.getDistance($target.getLocation()))
				== $goal.target
			</contextcondition> -->
			<!-- Drop the goal on mission end. -->
			<dropcondition>
				// $beliefbase.missionend
				(belief (element_has_model.melement_has_name "missionend") (belief_has_fact true))
			</dropcondition>

			<deliberation>
				<inhibits ref="move.walk_around"/>
			</deliberation>
			<!-- The goal is reached when the target is analysed. -->
			<targetcondition>
				// ?rgoal	= (goal (parameterelement_has_parameters ?param_target))
				// ?param_target	= (parameter (parameter_has_value ?target))
				// (beliefset (element_has_model ?mbel_analysedtargets) (beliefset_has_facts $?p ?target $?q))
				// ?mbel_analysedtargets = (mbeliefset (melement_has_name "analysed_targets"))
 
				?rgoal	= (goal (parameterelement_has_parameters["target"].parameter_has_value ?target))
				(beliefset (element_has_model.melement_has_name "analysed_targets") (beliefset_has_facts contains ?target))
 			</targetcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Find targets and add them to the targets belief. -->
		<plan name="do_find">
			<body class="SentryFindTargetsPlan"/>
			<trigger>
				<goal ref="find_targets"/>
			</trigger>
		</plan>

		<!-- Analyse a target. -->
		<plan name="do_analyse">
			<parameter name="target" class="Target">
				<goalmapping ref="analyse_target.target"/>
			</parameter>
			<body class="AnalyseTargetPlan"/>
			<trigger>
				<goal ref="analyse_target"/>
			</trigger>
		</plan>

		<!-- Add a new target when new info available. -->
		<plan name="add_target">
			<body class="AddTargetPlan"/>
			<trigger>
				<messageevent ref="target_inform"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- Other agents inform the sentries about discovered
			potential ore resources. -->
		<messageevent name="target_inform" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
			<match>$content instanceof Target</match>
		</messageevent>

		<messageevent name="request_producer" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
		</messageevent>
	</events>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="move.my_type">
					<fact>Environment.SENTRY_AGENT</fact>
				</initialbelief>
				<initialbelief ref="move.my_speed">
					<fact>5.0</fact>
				</initialbelief>
				<initialbelief ref="move.my_vision">
					<fact>0.1</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<!-- Create initial goals. -->
				<initialgoal ref="dfcap.df_register">
					<parameter ref="description">
						<value>
							((IDF)$scope.getPlatform().getService(IDF.class, SFipa.DF_SERVICE))
								.createDFAgentDescription(null, ((IDF)$scope.getPlatform().getService(IDF.class, SFipa.DF_SERVICE))
									.createDFServiceDescription("service_sentry", "service_sentry", "University of Hamburg"))
						</value>
					</parameter>
				</initialgoal>
				<!-- Create a goal for walking around. -->
				<initialgoal ref="move.walk_around"/>
				<!-- Create a goal for finding targets. -->
				<initialgoal ref="find_targets"/>
				<endgoal ref="dfcap.df_deregister"/>
			</goals>
		</configuration>
	</configurations>

</agent>
