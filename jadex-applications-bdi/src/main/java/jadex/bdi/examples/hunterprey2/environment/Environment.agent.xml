<!--
	<H3>Environment Agent for managing the environment object.</H3>
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Environment"
	package="jadex.bdi.examples.hunterprey2.environment">

	<imports>
		<import>jadex.bdi.planlib.starter.StartAgentInfo</import>
		<import>jadex.bridge.IAgentIdentifier</import>
		<import>jadex.bdi.runtime.IFilter</import>
		<import>jadex.adapter.base.fipa.*</import>
		<import>jadex.bdi.planlib.simsupport.common.math.*</import>
		<import>jadex.bdi.planlib.simsupport.environment.simobject.task.*</import>
		<import>jadex.bdi.examples.hunterprey2.*</import>
		<import>jadex.bdi.examples.hunterprey2.engine.*</import>
		<import>jadex.bdi.examples.hunterprey2.environment.*</import>
	</imports>
	
	<capabilities>
		<capability name="envcap" file="jadex.bdi.planlib.simsupport.environment.capability.SimEnvironment"/>
		<capability name="obscap" file="jadex.bdi.planlib.simsupport.observer.capability.SimObserver"/>
		
		<capability name="procap" file="jadex.bdi.planlib.protocols.request.Request"/>
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
		<capability name="amscap" file="jadex.bdi.planlib.ams.AMS"/>
	</capabilities>

	<beliefs>
	
		<!-- The filter for deciding which request messages are handled in this capability. -->
		<beliefref name="rp_filter">
			<concrete ref="procap.rp_filter"/>
		</beliefref>

		<!-- all registered observers -->
		<beliefset name="observers" class="Observer" />
		
		<!-- the discrete hunterprey2 environment -->
		<belief name="environment" class="Environment"/>
		
		<!-- uncomment the following 2 beliefs to enable the old gui -->
		<!--
		<belief name="gui" class="EnvironmentGui" />
		<belief name="gui_show_map" class="Boolean">
			<fact>new Boolean(true)</fact>
		</belief>
		-->
		
		<!-- initial round time -->
		<belief name="roundtime" class="long">
			<fact>1000</fact>
		</belief>
		
		<!-- the simulation (tick) flag -->
		<belief name="tick" class="Boolean">
			<fact>new Boolean(false)</fact>
		</belief>

		<!-- initial number of food objects -->
		<belief name="initial_food" class="Integer">
			<fact>new Integer(10)</fact>
		</belief>
		
		<!-- One food every X rounds -->
		<belief name="initial_food_spawn_rate" class="Integer">
			<fact>new Integer(3)</fact>
		</belief>

		<!-- Maximum number of food objects -->
		<belief name="max_food" class="Integer">
			<fact>new Integer(100)</fact>
		</belief>
		
		<!-- Number of obstacles -->
		<belief name="obstacle_count" class="Integer">
			<fact>new Integer(100)</fact>
		</belief>
		
		<!-- +++++++++++++++++++++++ -->
		<!-- sim engine beliefs      -->
		<!-- +++++++++++++++++++++++ -->
		
		<!-- Name of the simulation environment -->
		<beliefref name="environment_name">
			<concrete ref="envcap.environment_name"/>
		</beliefref>
		
		<!-- The clock service -->
		<beliefref name="clock_service">
			<concrete ref="envcap.clock_service"/>
		</beliefref>
		
		<!-- The simulation engine -->
		<beliefref name="simulation_engine">
			<concrete ref="envcap.simulation_engine"/>
		</beliefref>
		
		<!-- +++++++++++++++++++++++ -->
		<!-- observer beliefs        -->
		<!-- +++++++++++++++++++++++ -->
		
		<!-- Custom plugins to load into the standard GUI. -->
		<beliefsetref name="custom_plugins">
			<concrete ref="obscap.custom_plugins"/>
		</beliefsetref>
		
		<!-- Name of the simulation environment -->
		<beliefref name="environment_name_obs">
			<concrete ref="obscap.environment_name"/>
		</beliefref>
		
		<!-- Preservation of area aspect ratio in the window -->
		<beliefref name="preserve_aspect_ratio">
			<concrete ref="obscap.preserve_aspect_ratio"/>
		</beliefref>
		
		<!-- Y-axis inversion (top-down instead of bottom-up) -->
		<beliefref name="invert_y_axis">
			<concrete ref="obscap.invert_y_axis"/>
		</beliefref>
		
		<!-- Force the use of Java2D -->
		<beliefref name="force_java2d">
			<concrete ref="obscap.force_java2d"/>
		</beliefref>
		
		<!-- List of themes for displaying objects -->
		<beliefref name="object_themes">
			<concrete ref="obscap.object_themes"/>
		</beliefref>
		
		<!-- The pre-layers -->
		<beliefref name="prelayer_themes">
			<concrete ref="obscap.prelayer_themes"/>
		</beliefref>
		
		<!-- The post-layers -->
		<beliefref name="postlayer_themes">
			<concrete ref="obscap.postlayer_themes"/>
		</beliefref>
		
		<!-- The selected start theme -->
		<beliefref name="selected_theme">
			<concrete ref="obscap.selected_theme"/>
		</beliefref>

		<!-- Offer canvas access for building a custom GUI. -->
		<beliefref name="custom_gui">
			<concrete ref="obscap.custom_gui"/>
		</beliefref>
		<beliefref name="worldmap">
			<concrete ref="obscap.canvas"/>
		</beliefref>
		
		<!-- Shift for the objects -->
		<beliefref name="object_shift">
			<concrete ref="obscap.object_shift"/>
		</beliefref>

	</beliefs>

	<goals>
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>

		<achievegoalref name="ams_destroy_agent">
			<concrete ref="amscap.ams_destroy_agent"/>
		</achievegoalref>

		<querygoalref name="rp_decide_request">
			<concrete ref="procap.rp_decide_request"/>
		</querygoalref>
		<achievegoalref name="rp_execute_request">
			<concrete ref="procap.rp_execute_request"/>
		</achievegoalref>
		
		<achievegoalref name="start_agents">
			<concrete ref="startcap.start_agents"/>
		</achievegoalref>
		
		<!-- Destroy the Environment Agent. -->
		<achievegoal name="end_agent">
			<!-- The agent to destroy. -->
			<!-- <parameter name="agentidentifier" class="jadex.bridge.IAgentIdentifier"/> -->
		</achievegoal>
		
		<!-- sim environment start goal -->
		<achievegoalref name="sim_start_environment">
        	<concrete ref="envcap.sim_start_environment"/>
    	</achievegoalref>
    	
    	<!-- sim observer start goal -->
    	<achievegoalref name="simobs_start">
        	<concrete ref="obscap.simobs_start"/>
    	</achievegoalref>

	</goals>

	<plans>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchVisionPlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestVision</match>
				</goal>
				<!--<messageevent ref="request_vision"/>-->
			</trigger>
		</plan>

		<!-- Dispatch the world size to a requester. -->
		<plan name="dispatchworldsize">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchWorldSizePlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestWorldSize</match>
				</goal>
				<!--<messageevent ref="request_worldsize"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="moverequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="MovePlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestMove</match>
				</goal>
				<!--<messageevent ref="request_move"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="eatrequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="EatPlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestEat</match>
				</goal>
				<!--<messageevent ref="request_eat"/>-->
			</trigger>
		</plan>

		<!-- Simulation plan. -->
		<plan name="simticker">
			<body class="SimulationTickerPlan"/>
		</plan>
		
		<!-- Simulation plan. -->
		<plan name="simend">
			<body class="SimulationEndPlan"/>
			<trigger>
				<goal ref="end_agent" />
			</trigger>
		</plan>
		
		<!-- Initialization Plan. -->
    	<plan name="env_initialization">
      		<body class="InitializeEnvironmentPlan"/>
    	</plan>
    	
    	<!-- Initialization Plan. -->
    	<plan name="obs_initialization">
      		<body class="InitializeObserverPlan"/>
    	</plan>
    	
	</plans>

	<events>
		<messageevent name="inform_vision" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>"HunterPreyOntology"</value>
			</parameter>
			<parameter name="content" class="CurrentVision"/>
		</messageevent>

		<!-- Generic simulation event event. -->
    	<internalevent name="simulation_event" posttoall="true">
    		<parameter name="type" class="String"/>
    		<parameter name="task" class="ISimObjectTask"/>
    	</internalevent>
		
	</events>
	
	<expressions>

		<condition name="notasks">
			// $beliefbase.environment.getTaskSize()==0
			
			?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			?mbel_env	= (mbelief (element_has_name "environment"))
			?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (taskSize 0))
		</condition>
		<!--
		<condition name="nosimtasks">
			?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			?mbel_env	= (mbelief (element_has_name "environment"))
			?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (simTaskCounter 0))
		</condition>
		-->
		<!--
		<condition name="nostepgoals">
			// $beliefbase.environment.getStepGoalSize()==0
			
			?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			?mbel_env	= (mbelief (element_has_name "environment"))
			?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (stepGoalSize 0))
		</condition>
		-->
	</expressions>

	<properties>
		<!-- <property name="logging.level">java.util.logging.Level.WARNING</property> -->
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
				<initialbelief ref="selected_theme">
					<fact>"default"</fact>
				</initialbelief>
				<initialbelief ref="custom_gui">
					<fact>new Boolean(false)</fact>
				</initialbelief>
				<initialbelief ref="force_java2d">
					<fact>new Boolean(false)</fact>
				</initialbelief>
				<initialbelief ref="preserve_aspect_ratio">
					<fact>new Boolean(true)</fact>
				</initialbelief>
				<initialbelief ref="invert_y_axis">
					<fact>new Boolean(true)</fact>
				</initialbelief>
				<initialbelief ref="object_shift">
					<fact>new Vector2Double(0.5)</fact>
				</initialbelief>
			</beliefs>
			
			<goals>
				<initialgoal ref="df_register">
					<parameter ref="description">
						<value>
							((IDF)$scope.getPlatform().getService(IDF.class))
								.createDFAgentDescription(null, ((IDF)$scope.getPlatform().getService(IDF.class))
									.createDFServiceDescription("environment-service", "hunter-prey environment", "University of Hamburg",
										new String[]{"nuggets_xml"}, new String[]{"hunterprey"}, new String[]{"fipa-request"}, null))
						</value>
 					</parameter>
				</initialgoal>
				<endgoal ref="df_deregister"/>
			</goals>
			<plans>
				<initialplan ref="env_initialization"/>
				<initialplan ref="obs_initialization"/>
				<initialplan ref="simticker"/>
			</plans>
		</configuration>
	</configurations>

</agent>

