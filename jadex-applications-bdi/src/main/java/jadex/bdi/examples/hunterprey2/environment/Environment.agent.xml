<!--
	<H3>Environment Agent for managing the environment object.</H3>
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="Environment"
	package="jadex.bdi.examples.hunterprey2.environment">

	<imports>
		<import>jadex.bdi.planlib.starter.StartAgentInfo</import>
		<import>jadex.bridge.IAgentIdentifier</import>
		<import>jadex.bdi.runtime.IFilter</import>
		<import>jadex.adapter.base.fipa.*</import>
		<import>jadex.bdi.planlib.simsupport.common.math.IVector1</import>
		<import>jadex.bdi.planlib.simsupport.common.math.Vector1Int</import>
		<import>jadex.bdi.planlib.simsupport.common.math.Vector2Double</import>
		<import>jadex.bdi.examples.hunterprey2.*</import>
		<import>jadex.bdi.examples.hunterprey2.engine.*</import>
		<import>jadex.bdi.examples.hunterprey2.environment.*</import>
	</imports>
	
	<capabilities>
		<capability name="simcap" file="jadex.bdi.planlib.simsupport.simcap.SimAgent"/>
		
		<capability name="startcap" file="jadex.bdi.planlib.starter.StartAgents"/>
		<capability name="procap" file="jadex.bdi.planlib.protocols.request.Request"/>
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
		<capability name="amscap" file="jadex.bdi.planlib.ams.AMS"/>
	</capabilities>

	<beliefs>
	
		<!-- The filter for deciding which request messages are handled in this capability. -->
		<beliefref name="rp_filter">
			<concrete ref="procap.rp_filter"/>
		</beliefref>

		<!-- all registered observers -->
		<beliefset name="observers" class="Observer" />
		
		<!-- the discrete hunterprey2 environment -->
		<belief name="environment" class="Environment" />
		
		<!-- the local gui -->
		<belief name="gui" class="EnvironmentGui" />
		<!-- show a worldmap representation of the world in -->
		<belief name="gui_show_map" class="Boolean">
			<fact>new Boolean(true)</fact>
		</belief>

		<!-- initial round time -->
		<belief name="roundtime" class="long">
			<fact>1000</fact>
		</belief>
		
		<!-- the simulation (tick) flag -->
		<belief name="tick" class="Boolean">
			<fact>new Boolean(false)</fact>
		</belief>

		<!-- initial number of food objects -->
		<belief name="initial_food" class="Integer" exported="true">
			<fact>new Integer(10)</fact>
		</belief>

		<!-- Maximum number of food objects -->
		<belief name="max_food" class="Integer" exported="true">
			<fact>new Integer(100)</fact>
		</belief>
		
		<!-- One food every X rounds -->
		<belief name="food_spawn_rate" class="Integer" exported="true">
			<fact>new Integer(3)</fact>
		</belief>
		
		<!-- Number of obstacles -->
		<belief name="obstacle_count" class="Integer" exported="true">
			<fact>new Integer(100)</fact>
		</belief>
		
	
		<belief name="simagent" class="IAgentIdentifier" />
		<belief name="simagent_info" class="StartAgentInfo" >
			<fact>new StartAgentInfo("jadex/bdi/examples/hunterprey2/engine/SimEngine.agent.xml", "SimEngine", 0, null)</fact>
		</belief>
	 
	</beliefs>

	<goals>
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>

		<achievegoalref name="ams_destroy_agent">
			<concrete ref="amscap.ams_destroy_agent"/>
		</achievegoalref>

		<querygoalref name="rp_decide_request">
			<concrete ref="procap.rp_decide_request"/>
		</querygoalref>
		<achievegoalref name="rp_execute_request">
			<concrete ref="procap.rp_execute_request"/>
		</achievegoalref>
		
		<achievegoalref name="start_agents">
			<concrete ref="startcap.start_agents"/>
		</achievegoalref>
		
		<!-- Destroy the Environment Agent. -->
		<achievegoal name="end_agent">
			<!-- The agent to destroy. -->
			<!-- <parameter name="agentidentifier" class="jadex.bridge.IAgentIdentifier"/> -->
		</achievegoal>

		<!-- +++++++++++++++++++++++ -->
		<!-- object simulation goals -->
		<!-- +++++++++++++++++++++++ -->
		
		<achievegoalref name="sim_create_object">
        	<concrete ref="simcap.sim_create_object"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_destroy_object">
        	<concrete ref="simcap.sim_destroy_object"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_get_position">
        	<concrete ref="simcap.sim_get_position"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_set_position">
        	<concrete ref="simcap.sim_set_position"/>
    	</achievegoalref>
    	
    	<achievegoalref name="sim_set_velocity">
        	<concrete ref="simcap.sim_set_velocity"/>
    	</achievegoalref>
    	
    	<performgoalref name="sim_go_to_destination">
    		<concrete ref="simcap.sim_go_to_destination"/>
		</performgoalref>
		
		<performgoalref name="sim_go_to_precise_destination">
    		<concrete ref="simcap.sim_go_to_precise_destination"/>
		</performgoalref>
		
		<achievegoalref name="sim_remove_task">
    		<concrete ref="simcap.sim_remove_task"/>
		</achievegoalref>
		
		<performgoalref name="sim_perform_action">
    		<concrete ref="simcap.sim_perform_action"/>
		</performgoalref>
		
		<achievegoalref name="sim_get_random_position">
    		<concrete ref="simcap.sim_get_random_position"/>
		</achievegoalref>
		
		<achievegoalref name="sim_add_environment_process">
    		<concrete ref="simcap.sim_add_environment_process"/>
		</achievegoalref>
		
		<achievegoalref name="sim_remove_environment_process">
    		<concrete ref="simcap.sim_remove_environment_process"/>
		</achievegoalref>
		
		<achievegoalref name="sim_connect_environment">
    		<concrete ref="simcap.sim_connect_environment"/>
		</achievegoalref>

	</goals>

	<plans>

		<!-- Dispatch the actual vision to a requester. -->
		<plan name="dispatchvision">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchVisionPlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestVision</match>
				</goal>
				<!--<messageevent ref="request_vision"/>-->
			</trigger>
		</plan>

		<!-- Dispatch the world size to a requester. -->
		<plan name="dispatchworldsize">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="DispatchWorldSizePlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestWorldSize</match>
				</goal>
				<!--<messageevent ref="request_worldsize"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a pickup action succeeds. -->
		<plan name="moverequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="MovePlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestMove</match>
				</goal>
				<!--<messageevent ref="request_move"/>-->
			</trigger>
		</plan>

		<!-- Inform the requester if a drop action succeeds. -->
		<plan name="eatrequest">
			<parameter name="action" class="Object">
				<goalmapping ref="rp_execute_request.action"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="rp_execute_request.result"/>
			</parameter>
			<body class="EatPlan"/>
			<trigger>
				<goal ref="rp_execute_request">
					<match>$goal.getParameter("action").getValue() instanceof RequestEat</match>
				</goal>
				<!--<messageevent ref="request_eat"/>-->
			</trigger>
		</plan>

		<!-- Simulation plan. -->
		<plan name="simticker">
			<body class="SimulationTickerPlan"/>
		</plan>
		
		<!-- Simulation plan. -->
		<plan name="simend">
			<body class="SimulationEndPlan"/>
			<trigger>
				<goal ref="end_agent" />
			</trigger>
		</plan>
		
		<!-- Initialization Plan. -->
    	<plan name="env_initialization">
      		<body class="InitializeEnvironmentPlan"/>
    	</plan>
	</plans>

	<events>
		<messageevent name="inform_vision" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.NUGGETS_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>"HunterPreyOntology"</value>
			</parameter>
			<parameter name="content" class="CurrentVision"/>
		</messageevent>
	</events>
	
	<expressions>
		<condition name="notasks">
			// $beliefbase.environment.getTaskSize()==0
			
			?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			?mbel_env	= (mbelief (element_has_name "environment"))
			?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (taskSize 0))
		</condition>
		<condition name="nogoaltasks">
			// $beliefbase.environment.getTaskSize()==0
			
			?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			?mbel_env	= (mbelief (element_has_name "environment"))
			?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (goalTaskSize 0))
			
			//?rbel_env	= (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
			//?mbel_env	= (mbelief (element_has_name "environment"))
			//?env	= (jadex.bdi.examples.hunterprey2.environment.Environment (goalTaskSize 0))
		</condition>
	</expressions>

	<properties>
		<!-- <property name="logging.level">java.util.logging.Level.WARNING</property> -->
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="rp_filter">
					<fact>IFilter.ALWAYS</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<initialgoal ref="df_register">
					<parameter ref="description">
						<value>
							((IDF)$scope.getPlatform().getService(IDF.class))
								.createDFAgentDescription(null, ((IDF)$scope.getPlatform().getService(IDF.class))
									.createDFServiceDescription("environment-service", "hunter-prey environment", "University of Hamburg",
										new String[]{"nuggets_xml"}, new String[]{"hunterprey"}, new String[]{"fipa-request"}, null))
						</value>
 					</parameter>
				</initialgoal>
				<endgoal ref="df_deregister"/>
			</goals>
			<plans>
				<initialplan ref="env_initialization"/>
				<initialplan ref="simticker"/>
			</plans>
		</configuration>
	</configurations>

</agent>

