<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Commander</H3>

	Coordinates entities to efficiently handle disasters.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="Commander2"
	package="jadex.bdi.examples.disastermanagement.commander2">

	<imports>
		<import>jadex.commons.future.*</import>
		<import>java.util.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.bridge.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.extension.envsupport.environment.*</import>
		<import>jadex.extension.envsupport.environment.space2d.*</import>
		<import>jadex.bdi.runtime.*</import>
		<import>jadex.bdi.examples.disastermanagement.*</import>
		<import>jadex.bdi.examples.disastermanagement.movement.*</import>
	</imports>

	<beliefs>
		<!-- Environment imported inherited from move capability. -->
		<belief name="environment" class="ContinuousSpace2D">
 			<fact class="IFuture">$scope.getParentAccess().getExtension("my2dspace")</fact>
		</belief>
		
		<!-- Required to have disasters in OAV state. -->
 		<beliefset name="disasters" class="ISpaceObject" updaterate="1000">
			<facts>$beliefbase.environment.getSpaceObjectsByType("disaster")</facts>
		</beliefset>

	</beliefs>

	<goals>
		<achievegoal name="handle_disaster" recur="true" recurdelay="1000">
			<parameter name="disaster" class="ISpaceObject">
				<value>$disaster</value>
			</parameter>
			<unique/>
			<!-- Create one goal for each known disaster. -->
			<creationcondition language="jcl">
				ISpaceObject $disaster &amp;&amp; $disaster.getType().equals("disaster") &amp;&amp;
				($disaster.fire!=0 || $disaster.victims!=0 || $disaster.chemicals!=0)
			</creationcondition>
			<deliberation>
				<inhibits ref="handle_disaster">
					$goal.disaster.severe &amp;&amp; $ref.disaster.severe==false
				</inhibits>
			</deliberation>
			<targetcondition>
				$goal.disaster.fire==0 &amp;&amp; $goal.disaster.victims==0 &amp;&amp; $goal.disaster.chemicals==0
			</targetcondition>
		</achievegoal>
		
		<achievegoal name="clear_chemicals" exclude="never">
			<parameter name="disaster" class="ISpaceObject"/>
			<deliberation>
				<inhibits ref="treat_victims">
					$goal.disaster==$ref.disaster
				</inhibits>
			</deliberation>
		</achievegoal>
		
		<achievegoal name="extinguish_fires" exclude="never">
			<parameter name="disaster" class="ISpaceObject"/>
		</achievegoal>
		
		<achievegoal name="treat_victims" exclude="never">
			<parameter name="disaster" class="ISpaceObject"/>
		</achievegoal>
	</goals>
	
	<plans>
		<!-- Plan for handling situations at a disaster. -->
		<plan name="handle_disaster_plan">
			<parameter name="disaster" class="ISpaceObject">
				<goalmapping ref="handle_disaster.disaster"/>
			</parameter>
			<body class="HandleDisasterPlan"/>
			<trigger>
				<goal ref="handle_disaster"/>
			</trigger>
		</plan>
		
		<!-- Plan for calling a clear chemicals service. -->
		<plan name="clear_chemicals_service_call_plan">
			<parameter name="service" class="String">
				<value>"clearchemicalsservices"</value>
			</parameter>
			<parameter name="method" class="String">
				<value>"clearChemicals"</value>
			</parameter>
			<parameter name="args" class="Object[]">
				<value>new Object[]{$goal.disaster}</value>
			</parameter>
			<body class="ServiceCallPlan"/>
			<trigger>
				<goal ref="clear_chemicals"/>
			</trigger>
		</plan>
		
		<!-- Plan for calling a extinguish fire service. -->
		<plan name="extinguis_fire_service_call_plan">
			<parameter name="service" class="String">
				<value>"extinguishfireservices"</value>
			</parameter>
			<parameter name="method" class="String">
				<value>"extinguishFire"</value>
			</parameter>
			<parameter name="args" class="Object[]">
				<value>new Object[]{$goal.disaster}</value>
			</parameter>
			<body class="ServiceCallPlan"/>
			<trigger>
				<goal ref="extinguish_fires"/>
			</trigger>
		</plan>
		
		<!-- Plan for calling a treat victims service. -->
		<plan name="treat_victims_service_call_plan">
			<parameter name="service" class="String">
				<value>"treatvictimservices"</value>
			</parameter>
			<parameter name="method" class="String">
				<value>"treatVictims"</value>
			</parameter>
			<parameter name="args" class="Object[]">
				<value>new Object[]{$goal.disaster}</value>
			</parameter>
			<body class="ServiceCallPlan"/>
			<trigger>
				<goal ref="treat_victims"/>
			</trigger>
		</plan>
	</plans>
	
	<services>
		<requiredservice name="treatvictimservices" class="ITreatVictimsService" multiple="true"/>
		<requiredservice name="extinguishfireservices" class="IExtinguishFireService" multiple="true"/>
		<requiredservice name="clearchemicalsservices" class="IClearChemicalsService" multiple="true"/>
	</services>
</agent>
