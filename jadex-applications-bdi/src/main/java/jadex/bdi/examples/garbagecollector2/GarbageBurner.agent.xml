<!--
  <H3>Garbage burner agent.</H3>

  Sits at a fixed posistion and waits for garbage.
  If garbage occurs it tries to pick it up and burns it.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-2.0.xsd"
	name="GarbageBurner"
	package="jadex.bdi.examples.garbagecollector2">

	<imports>
		<import>jadex.adapter.base.contextservice.*</import>
		<import>jadex.adapter.base.appdescriptor.*</import>
		<import>jadex.adapter.base.envsupport.environment.space2d.*</import>
		<import>jadex.adapter.base.envsupport.environment.*</import>
		<import>jadex.adapter.base.envsupport.math.*</import>
		<import>jadex.bridge.IContextService</import>
	</imports>

	<beliefs>
		<!-- Environment. -->
		<belief name="env" class="Grid2D">
 			<fact>(Grid2D)$scope.getApplicationContext().getSpace("mygc2dspace")</fact>
 		</belief>
 		
 		<!-- Myself. -->
 		<belief name="myself" class="ISpaceObject">
 			<fact>$beliefbase.env.getOwnedObjects($scope.getAgentIdentifier())[0]</fact>
 		</belief>

		<!-- The actual position on the grid world. -->
		<belief name="pos" class="IVector2" evaluationmode="push">
			<fact language="jcl">
				$beliefbase.myself.position
				//$beliefbase.myself.getProperty("position")
			</fact>
 		</belief>
		
		<!-- The garbages at the current posistion. -->
		<beliefset name="garbages" class="ISpaceObject"/>
	</beliefs>

	<goals>
		<!-- The burn waste goal. For every garbage occurring at
			its position a new goal is craeted (see binding).
 			The unique tag avoids creating more than one goal
 			per specific piece of garbage. -->
		<!-- <achievegoal name="burn">
			<parameter name="garbage" class="String">
				<bindingoptions>$beliefbase.garbages</bindingoptions>
			</parameter>
			<unique/>
			<creationcondition>true</creationcondition>
			<deliberation cardinality="1"/>
		</achievegoal> -->
		
		<achievegoal name="burn">
			<parameter name="garbage" class="ISpaceObject">
				<!--  <bindingoptions>$beliefbase.garbages</bindingoptions>-->
				<!-- Bind against variable from creation condition. -->
				<!--  <bindingoptions>"?garbage"</bindingoptions>-->
				<value>?garbage</value>
			</parameter>
			<!-- todo: remove unique support? <unique/> -->
			<creationcondition language="jcl">
				ISpaceObject $garbage &amp;&amp; !$beliefbase.garbages.contains(?garbage)
				
				// ?garbage = (ISpaceObject)
				// ?rbeliefset = (beliefset (element_has_model.melement_has_name "garbages") (beliefset_has_facts contains ?garbage))
			</creationcondition>
			<creationcondition>
				// unique (?rcapa and ?mgoal are provided internally)
				(not (and
					?adopted	= (goal (element_has_model ?mgoal))
					?rcapa		= (capability (capability_has_goals contains ?adopted))
				))

				?rbeliefset = (beliefset (element_has_model.melement_has_name "garbages") (beliefset_has_facts $?x ?garbage $?y))
			</creationcondition>
			<deliberation cardinality="1"/>
		</achievegoal>

		<!-- The goal for picking up waste. Tries endlessly to pick up. -->
		<achievegoal name="pick" exclude="never" retrydelay="100"/>
	</goals>

	<plans>
		<!-- Plan for burning garbage. -->
		<plan name="burn_plan">
			<body class="BurnPlanEnv"/>
			<trigger>
				<goal ref="burn"/>
			</trigger>
		</plan>

		<!-- Plan for trying to pick up waste. -->
		<plan name="pickup_plan">
			<body class="PickUpPlanEnv"/>
			<trigger>
				<goal ref="pick"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<property name="debugging">false</property>
    </properties>

</agent>