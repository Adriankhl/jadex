<!--
	<H3>The garbage collector application descriptor</H3>

	It can be started to launch a garbage collector scenario.
	This example is inspired by the "robot" example
	of the Jason BDI agent engine.
-->

<applicationtype xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:env="http://jadex.sourceforge.net/jadex-env"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-appdescriptor 
	                    http://jadex.sourceforge.net/jadex-appdescriptor.xsd"
	name="GarbageCollectorSpace" package="jadex.bdi.examples.garbagecollector2">
	
	<imports>
		<import>jadex.adapter.base.envsupport.environment.space2d.*</import>
		<import>jadex.adapter.base.envsupport.environment.RoundBasedExecutor</import>
		<import>jadex.adapter.base.envsupport.math.*</import>
		<import>jadex.bridge.IClockService</import>
		<import>jadex.adapter.base.envsupport.dataview.*</import>
	</imports>
	
	<spacetypes>
		<env:envspacetype name="gc2dspace" width="10" height="10" class="Grid2D">
			<env:objecttypes>
				<env:objecttype name="collector">
					<env:property name="rotation" dynamic="true">
						$object.getProperty("lastmove")==null || $object.getProperty("lastmove").equals("right")? null:
						$object.getProperty("lastmove").equals("left")? new Vector3Double(Math.PI,0,Math.PI):
						$object.getProperty("lastmove").equals("up")? new Vector3Double(0,0,Math.PI*3/2):
						new Vector3Double(0,0,Math.PI/2)
					</env:property>
					<env:property name="vision_range">0</env:property>
				</env:objecttype>
				<env:objecttype name="burner">
					<env:property name="vision_range">0</env:property>
				</env:objecttype>
				<env:objecttype name="garbage" />
			</env:objecttypes>
			
			<env:avatarmappings>
				<env:avatarmapping agenttype="Collector" objecttype="collector"/>
				<env:avatarmapping agenttype="Burner" objecttype="burner"/>
			</env:avatarmappings>
		
			<env:actiontypes>
				<env:agentactiontype name="pickup" class="PickupWasteAction" />
				<env:agentactiontype name="drop" class="DropWasteAction" />
				<env:agentactiontype name="burn" class="BurnWasteAction" />
				<env:agentactiontype name="go" class="GoAction" />
			</env:actiontypes>
			
			<env:processtypes>
				<env:processtype name="create" class="CreateWasteProcess" >
					<env:property name="rate">5</env:property>
				</env:processtype>
			</env:processtypes>
			
			<env:perceptgeneratortypes>
				<env:perceptgeneratortype name="burnervisiongen" class="BurnerVisionGenerator"/>
				<env:perceptmapping agenttype="Burner" class="BurnerVisionProcessor">
					<!-- Todo: mapping per percept type? - ->
					<env:percepttype name="garbage_appeared"/>
					<env:percepttype name="garbage_disappeared"/> -->
				</env:perceptmapping>
			</env:perceptgeneratortypes>
			
			<env:views>
				<env:view name="view_all" class="GeneralDataView2D" />
				<env:view name="collector_view" class="LocalDataView2D" objecttype="collector">
					<env:property name="object">$object</env:property>
					<env:property name="range">$object.getProperty("vision_range")</env:property>
				</env:view>
				<env:view name="burner_view" class="LocalDataView2D" objecttype="burner">
					<env:property name="object">$object</env:property>
					<env:property name="range">$object.getProperty("vision_range")</env:property>
				</env:view>
			</env:views>
			
			<env:perspectives>
				<env:perspective name="icons">
					<env:drawable objecttype="collector" width="0.9" height="0.9" rotation="rotation">
						<!--  <env:property name="vision_size" dynamic="true">new Vector2Double($object.getProperty("vision_range")*2+1)</env:property> -->
						<env:texturedrectangle layer="2" x="0" y="-0.1" width="0.9" height="0.9" imagepath="jadex/bdi/examples/garbagecollector2/images/collector.png" />
						<env:texturedrectangle layer="3" width="0.5" height="0.5" x="0.3" y="-0.3" imagepath="jadex/bdi/examples/garbagecollector2/images/garbage.png">
							<env:drawcondition>$object.getProperty("garbage")!=null</env:drawcondition> 
						</env:texturedrectangle>
						<env:text layer="4" x="0.0" y="0.4" color="black" text="$owner$"/>
						<env:rectangle layer="-1" size="vision_size" color="#ffff007f" />
					</env:drawable>
					<env:drawable objecttype="burner" width="0.7" height="0.7">
						<!-- <env:property name="vision_size" dynamic="true">new Vector2Double($object.getProperty("vision_range")*2+1)</env:property> -->
						<env:texturedrectangle layer="1" imagepath="jadex/bdi/examples/garbagecollector2/images/burner.png" />
						<env:text layer="4" x="0.0" y="0.4" color="black" text="$owner$"/>
						<env:rectangle layer="-1" size="vision_size" color="#ffff007f" />
					</env:drawable>
					<env:drawable objecttype="garbage" width="0.7" height="0.7">
						<env:texturedrectangle layer="0" imagepath="jadex/bdi/examples/garbagecollector2/images/garbage.png" />
					</env:drawable>
					<env:prelayers>
						<env:tiledlayer width="3.5" height="3.5" imagepath="jadex/bdi/examples/garbagecollector2/images/bg.jpg" />
						<env:gridlayer width="1.0" height="1.0" color="white" />
					</env:prelayers>
				</env:perspective>
					
				<env:perspective name="abstract">
					<env:drawable objecttype="collector" width="1.0" height="1.0">
						<env:triangle layer="2" color="red" />
						<env:rectangle layer="3" color="yellow" width="0.2" height="0.2">
							<env:drawcondition>$object.getProperty("garbage")!=null</env:drawcondition> 
						</env:rectangle>
						<env:text layer="4" x="0.0" y="0.4" color="white" text="$owner$"/>
					</env:drawable>
					<env:drawable objecttype="burner" width="1.0" height="1.0">
						<env:triangle layer="1" color="green" />
						<env:text layer="4" x="0.0" y="0.4" color="white" text="$owner$"/>
					</env:drawable>
					<env:drawable objecttype="garbage" width="0.7" height="0.7">
						<env:rectangle layer="0" color="yellow" />
					</env:drawable>
					<env:prelayers>
						<env:gridlayer width="1.0" height="1.0" color="white" />
					</env:prelayers>
				</env:perspective>
			</env:perspectives>
			
			<!-- executor -->
			<env:spaceexecutor>new RoundBasedExecutor($space, (IClockService)$platform.getService(IClockService.class))</env:spaceexecutor>
		</env:envspacetype>
	</spacetypes>
	
	<agenttypes>
		<agenttype name="Collector" filename="jadex/bdi/examples/garbagecollector2/GarbageCollector.agent.xml"/>
		<agenttype name="Burner" filename="jadex/bdi/examples/garbagecollector2/GarbageBurner.agent.xml"/>
	</agenttypes>
	
	<applications>
		<application name="One Burner / One Collector">
			<agents>
				<agent name="Collector1" type="Collector"/>
				<agent name="Burner1" type="Burner"/>
			</agents>
			
			<env:envspace name="mygc2dspace" type="gc2dspace">
				<!-- <env:objects>
					<env:object type="collector" owner="Collector1" >
						<env:property name="rotation">
							$object.getProperty("lastmove")==null || $object.getProperty("lastmove").equals("right")? Math.PI:
							$object.getProperty("lastmove").equals("left")? Math.PI:
							$object.getProperty("lastmove").equals("up")? Math.PI/2:
							Math.PI*3/2
						</env:property>
					</env:object>
					<env:object type="burner" owner="Burner1" />
				</env:objects> -->
				
				<env:observers>
					<env:observer name="world" view="view_all" perspective="abstract">
						<env:plugins>
						</env:plugins>
					</env:observer>
				</env:observers>
			</env:envspace>
		</application>
		
		<application name="One Burner / Two Collectors">
			<agents>
				<agent name="Collector2" type="Collector"/>
				<agent name="Collector1" type="Collector"/>
				<agent name="Burner1" type="Burner"/>
			</agents>
			
			<env:envspace name="mygc2dspace" type="gc2dspace">
				<!-- <env:objects>
					<env:object type="collector" owner="Collector1" />
					<env:object type="collector" owner="Collector2" />
					<env:object type="burner" owner="Burner1" />
				</env:objects> -->
				
				<env:observers>
					<env:observer name="world" view="view_all" perspective="abstract">
						<env:plugins>
						</env:plugins>
					</env:observer>
				</env:observers>
			</env:envspace>
		</application>
	</applications>

</applicationtype>
