<!--
	<H3>This agent tests change propagation of beliefs (and goal parameters)</H3>

	When the belief "my_value" is changed to "magic"
	the dependent belief "react_on value" should
	have the value "magic" as well.
	When from the beliefset "my_values" one value
	is deleted the dependent belief "react_on_values"
	should have the value "magic".
-->

<agent xmlns="http://jadex.sourceforge.net/jadex-bdi"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex-bdi
	                    http://jadex.sourceforge.net/jadex-bdi-2.0.xsd"
	name="PropagateChanges"
	package="jadex.bdi.testcases.beliefs">

	<imports>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
	</imports>
	
	<capabilities>
		<capability name="testcap" file="jadex.bdi.planlib.test.Test"/>
	</capabilities>

	<beliefs>
		<beliefref name="timeout"  exported="true">
			<concrete ref="testcap.timeout"/>
		</beliefref>
		<beliefref name="testcenter"  exported="true">
			<concrete ref="testcap.testcenter"/>
		</beliefref>

		<belief name="my_value" class="String">
			<fact>"blurps"</fact>
		</belief>
		<belief name="react_on_value" class="String" evaluationmode="push">
			<fact language="jcl">
 				$beliefbase.my_value.equals("magic")? "magic": "n/a"
 				
 				// Todo: set to "n/a" instead of leaving null
				// (belief (element_has_model ?mbel)
				// 			(belief_has_fact "magic") (belief_has_fact ?ret))
				// ?mbel = (mbelief (melement_has_name "my_value"))
			</fact>
		</belief>

		<beliefset name="my_values" class="int">
			<fact>0</fact>
			<fact>1</fact>
			<fact>2</fact>
		</beliefset>
		<belief name="react_on_values" class="String" evaluationmode="push">
			<fact language="jcl">
 				$beliefbase.my_values.length==2? "magic": "n/a"
 				
 				// Todo: set to "n/a" instead of leaving null
				// (beliefset (element_has_model ?mbelset)
				// 	(beliefset_has_facts ?$facts &amp;:(== (Length ?$facts) 2)) 
				// 	((Identity "magic") ?ret))
				// ?mbelset = (mbeliefset (melement_has_name "my_values"))
			</fact>
		</belief>
	</beliefs>

	<plans>
		<plan name="tester">
			<body class="DependentBeliefPlan"/>
		</plan>
	</plans>

	<properties>
        <property name="debugging">false</property>
    </properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="testcap.testcase_cnt">
					<fact>2</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan ref="tester"/>
			</plans>
		</configuration>
	</configurations>

</agent>

