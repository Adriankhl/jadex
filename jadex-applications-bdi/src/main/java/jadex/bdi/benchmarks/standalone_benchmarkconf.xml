<!--
  Standalone platform properties.
-->
<properties xmlns="http://jadex.sourceforge.net/jadexconf"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadexconf 
	                    http://jadex.sourceforge.net/configuration.xsd"
	name="standalone_conf">
	
	<properties type="platform_standalone" name="lars">
		<property type="platformname">lars</property>
		<property type="platform_shutdown_time">1000</property>
		<property type="welcome">false</property>
		<property type="autoshutdown">true</property>

		<property type="application_factory">
			new jadex.adapter.base.appdescriptor.ApplicationFactory($platform, null)
		</property>
		
		<!-- Platform services. -->
		<properties type="services">			
			<!-- Library service. -->
			<property type="jadex.service.library.ILibraryService" name="library_service">
				new jadex.service.library.LibraryService(new Object[]{"../jadex-applications-bdi/target/classes"})
			</property>
			
			<!-- Threadpool service. -->
			<property type="jadex.service.threadpool.ThreadPoolService" name="threadpool_service">
				new jadex.service.threadpool.ThreadPoolService(
					//new jadex.commons.concurrent.java5.JavaThreadPool()
					new jadex.commons.concurrent.ThreadPool(
						new jadex.commons.concurrent.DefaultThreadPoolStrategy(0, 20, 30000)))
			</property>
			
			<!-- AMS service. -->
			<property type="jadex.bridge.IComponentExecutionService" name="ams_service">
				new jadex.adapter.standalone.service.componentexecution.ComponentExecutionService($platform)
			</property>
						
			<!-- DF service. -->
			<property type="jadex.adapter.base.fipa.IDF" name="df_service">new jadex.adapter.standalone.df.DF($platform)</property>
			
			<!-- Message service. -->
			<property type="jadex.bridge.IMessageService" name="message_service">new jadex.adapter.standalone.MessageService($platform, 
				new jadex.adapter.standalone.transport.ITransport[]
				{
					new jadex.adapter.standalone.transport.localmtp.LocalTransport($platform)
				},
				new jadex.bridge.MessageType[]
				{
					new jadex.adapter.base.fipa.FIPAMessageType()
				})
			</property>
			
			<!-- Clock service. -->
			<property type="jadex.service.clock.IClockService" name="clock_service">
				new jadex.service.clock.ClockService(
					new jadex.service.clock.SystemClock("system_clock", 100,
					$platform.getService(jadex.service.threadpool.ThreadPoolService.class)))
//				new jadex.adapter.base.clock.SimulationEventClock("simulation_clock",
//					System.currentTimeMillis(), 200))
			</property>

			<!-- Simulation service. -->
			<!-- <property type="jadex.adapter.base.ISimulationService" name="simulation_service">
				new jadex.adapter.base.SimulationService($platform)
			</property> -->
		
			<!-- Execution service. -->
			<property type="jadex.service.execution.IExecutionService" name="execution_service">
				new jadex.service.execution.SyncExecutionService(
					$platform.getService(jadex.service.threadpool.ThreadPoolService.class))
			</property>
		</properties>
		
		<!-- Agents. -->
 		<!--  <property type="daemonagent" name="ams">jadex/amsagent/AMS.agent.xml</property>
		<property type="daemonagent" name="df">jadex/dfagent/DF.agent.xml</property>
		<property type="agent" name="jcc">jadex/tools/jccv2/JCC.agent.xml</property>-->
	
		<properties type="kernel" id="kernel_v2_bdi">
			<property type="agent_factory">new jadex.bdi.interpreter.BDIAgentFactory(
				jadex.commons.SUtil.createHashMap(
					new String[]
					{
						"messagetype_fipa", 
						"planexecutor_standard", 
						"standard.timeout", 
						"microplansteps"
					},
					new Object[]
					{
						new jadex.adapter.base.fipa.FIPAMessageType(), 
						new jadex.bdi.runtime.JavaStandardPlanExecutor($platform.getService(jadex.service.threadpool.ThreadPoolService.class)),
						new java.lang.Long(10000),
						Boolean.FALSE
					}
				), $platform)
			</property>
		</properties>
	</properties>
 
</properties>