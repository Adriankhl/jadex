import gui2d.Visualisation;

/**
 * The Move plan implements the action of the game. Namely, to pick a
 * possible move and attempt it. Note that the range of possible moves
 * induces the set of applicable plans, so that if the picked move
 * fails, then an alternative possibility will be tried next.
 */

public plan Move extends Plan 
{
	#uses agent implementing ISokrates sok;

    logical SquareIndex $hole;
    logical SquareIndex $piece;
    
    void indent(String m)
    {
        for(int x = 0; x < ev.depth; x++ )
            System.err.print(" ");
        System.err.println( m );
    }
    
    #handles event NextMove ev;

    static boolean
    relevant(NextMove ev)
    {
        return true;
    }

    #posts event NextMove nm;
    
    #uses data Board board;
    //#uses data Visualisation gui;
 
    context()
    {
        board.possibleMove($piece,$hole);
    }

    #reasoning method
    body()
    {
        indent( "Trying " + $piece + sok.getTriesCnt());
        move( $piece, $hole, false );
        @achieve( board.solution(), nm.next( ev.depth ) );
        indent( "SUCCESS " + $piece );
    }
    
    #reasoning method
    fail()
    {
        indent( "Failed " + $piece );
        move( $hole, $piece, true );
    }

    #reasoning method
    move(logical SquareIndex $from, logical SquareIndex $to,boolean back)
    {
        SquareIndex from = (SquareIndex)$from.getValue();
        SquareIndex to = (SquareIndex)$to.getValue();
        //@waitFor( gui.move( from.x, from.y, to.x, to.y, back ) );
        board.move( $from, $to , back);
    }
}
