/*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*
  This code is generated by JAC version 5.6 by
  Agent Oriented Software. http://www.agent-software.com.au

    DO NOT ALTER THIS CODE AND DO NOT REMOVE THIS COMMENT
 *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*/
import aos.jack.jak.plan.Plan;
import aos.jack.jak.plan.PlanFSM;
import aos.jack.jak.plan.ExMap;
import aos.jack.jak.agent.NameSpace;
import aos.jack.jak.event.PlanChoice;
import aos.jack.jak.event.Event;
import aos.jack.jak.task.Task;
import aos.jack.jak.core.Generator;
import aos.jack.jak.logic.Signature;
import aos.jack.jak.fsm.FSM;
import aos.jack.jak.core.Jak;

/**
 * The ChooseMove plan investgates the options, so that alternate
 * colours are attempted, independent of fail or success, and also
 * show preference for jump moves over step moves.
 *
 */

public class ChooseMove extends aos.jack.jak.plan.Plan {
    static java.lang.String config = "same";
    aos.jack.jak.logic.Signature so_far = null;
    public aos.jack.jak.event.PlanChoice ev;
    public Board board;
    private static aos.jack.jak.plan.ExMap[] __exMap_fail;
    private static java.lang.String[] __tt__fail = {
            "ChooseMove.plan",
            "fail",
            "20",
            "17"};
    private static aos.jack.jak.plan.ExMap[] __exMap_makeChoice;
    private static java.lang.String[] __tt__makeChoice = {
            "ChooseMove.plan",
            "makeChoice",
            "46",
            "49",
            "52",
            "55",
            "56",
            "59",
            "62",
            "42"};
    private static aos.jack.jak.plan.ExMap[] __exMap_configurable;
    private static java.lang.String[] __tt__configurable = {
            "ChooseMove.plan",
            "configurable",
            "68",
            "71",
            "73",
            "76",
            "65"};
    private static aos.jack.jak.plan.ExMap[] __exMap_body;
    private static java.lang.String[] __tt__body = {
            "ChooseMove.plan",
            "body",
            "29",
            "31",
            "31",
            "33",
            "34",
            "34",
            "31",
            "37",
            "38",
            "39",
            "27"};
    private final static java.lang.String[] __planVariableNames = {
            "so_far",
            "config",
            "ev",
            "board"};
    private final static java.lang.String[] __planVariableTypes = {
            "Signature",
            "java.lang.String",
            "aos.jack.jak.event.PlanChoice",
            "Board"};
    private final static java.lang.String[] __reasoningMethods = {
            "body",
            "configurable",
            "fail",
            "makeChoice"};
    private final static java.lang.String[] __fsmVariableNames_makeChoice = {
            "s",
            "p"};
    private final static java.lang.String[] __fsmTypes_makeChoice = {
            "Signature",
            "SquareIndex"};
    private final static java.lang.String[] __fsmLocalNames_makeChoice = {
            "s",
            "__local__1_1"};
    private final static java.lang.String[] __fsmVariableNames_configurable = {
            "p"};
    private final static java.lang.String[] __fsmTypes_configurable = {
            "SquareIndex"};
    private final static java.lang.String[] __fsmLocalNames_configurable = {
            "p"};
    private final static java.lang.String[] __fsmVariableNames_body = {
            "s"};
    private final static java.lang.String[] __fsmTypes_body = {
            "Signature"};
    private final static java.lang.String[] __fsmLocalNames_body = {
            "__local__3_0"};
    public java.lang.String getDocumentation()
    {
        return "/**\n * The ChooseMove plan investgates the options, so that alternate\n * colours are attempted, independent of fail or success, and also\n * show preference for jump moves over step moves.\n *\n */\n";
    }
    
    public ChooseMove()
    {
    }
    
    private ChooseMove(aos.jack.jak.task.Task __t, ChooseMove __env)
    {
        __agent = __env.__agent;
        __ns = __env.__ns;
        __planTask = __t;
        __logic = __t.logic;
        ev = __env.ev;
        board = __env.board;
    }
    
    public boolean init_sentinel(aos.jack.jak.agent.NameSpace __a)
    {
        ev = (aos.jack.jak.event.PlanChoice) __a.findEvent("aos.jack.jak.event.PlanChoice");
        if (ev == null) {
            warning("PlanChoice ev: is not found in the capability/agent this plan comes from");
            return false;
        }
        if (!registerPlanChoice("NextMove")) {
            return false;
        }
        board = (Board) lookupNamedObject("board","Board",0);
        if (board == null) {
            warning("Board board: is not found in the capability/agent this plan comes from");
            return false;
        }
        return true;
    }
    
    public aos.jack.jak.plan.Plan freeze()
    {
        return this;
    }
    
    public aos.jack.jak.plan.Plan unfreeze()
    {
        return this;
    }
    
    public java.lang.Object genObject(int __index)
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Object Construction");
        return null;
    }
    
    public aos.jack.jak.cursor.Cursor genCursor(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal Cursor Construction");
        return null;
    }
    
    public aos.jack.jak.fsm.FSM genFSM(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal FSM Construction");
        return null;
    }
    
    public boolean testCondition(int __index)
        throws java.lang.Exception
    {
        switch (__index) {
        }
        aos.jack.jak.core.Jak.error("illegal test Construction");
        return false;
    }
    
    public aos.jack.jak.plan.PlanFSM fail()
    {
        return new ChooseMove.__failFSM();
    }
    
    public aos.jack.jak.plan.PlanFSM makeChoice(aos.jack.jak.logic.Signature s)
    {
        return new ChooseMove.__makeChoiceFSM(s);
    }
    
    public aos.jack.jak.plan.PlanFSM configurable(SquareIndex p)
    {
        return new ChooseMove.__configurableFSM(p);
    }
    
    public aos.jack.jak.plan.PlanFSM body()
    {
        return new ChooseMove.__bodyFSM();
    }
    
    private ChooseMove(aos.jack.jak.event.PlanChoice __ev, aos.jack.jak.task.Task __t, ChooseMove __env)
    {
        this(__t,__env);
        this.ev = __ev;
    }
    
    protected aos.jack.jak.logic.Signature eventSignature(int __log)
    {
        return ev.getSignature(__log);
    }
    
    public java.lang.String handledEvent()
    {
        return "aos.jack.jak.event.PlanChoice";
    }
    
    public boolean __relevant(aos.jack.jak.event.Event __e)
    {
        return __ns.isEnabled();
    }
    
    public aos.jack.jak.plan.Plan createPlan(aos.jack.jak.event.Event __e, aos.jack.jak.task.Task __t)
    {
        if (!(__e instanceof aos.jack.jak.event.PlanChoice)) 
            return null;
        aos.jack.jak.event.PlanChoice __e1 = (aos.jack.jak.event.PlanChoice) __e;
        return new ChooseMove(__e1,__t,this);
    }
    
    public java.lang.String[] variableNames()
    {
        return __planVariableNames;
    }
    
    public java.lang.String[] variableTypes()
    {
        return __planVariableTypes;
    }
    
    public java.lang.Object getVariable(int n)
    {
        switch (n) {
            case 0: 
            {
                return aos.util.ToObject.box(so_far);
            }
            case 1: 
            {
                return aos.util.ToObject.box(config);
            }
            case 2: 
            {
                return aos.util.ToObject.box(ev);
            }
            case 3: 
            {
                return aos.util.ToObject.box(board);
            }
            default: 
            {
                throw new java.lang.IndexOutOfBoundsException("Plan " + this + " does not have variable number " + n);
            }
        }
    }
    
    public java.lang.String[] reasoningMethods()
    {
        return mergeReasoningMethods(__reasoningMethods,super.reasoningMethods());
    }
    
    class __failFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ChooseMove.fail:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(ChooseMove.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ChooseMove.fail: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (20) 		ev.chosen = ev.applicable.first();
                        case 10: 
                        {
                            __breakLevel = 0;
                            __state = 11;
                            ev.chosen = ev.applicable.first();
                            break;
                        }
                        //* (17)     #reasoning method
                        case 11: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_fail);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "fail";
        }
        
        __failFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__fail[0];
            java.lang.String method = __tt__fail[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__fail[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return ChooseMove.this;
        }
        
        public void enter()
        {
            __trace = agent.trace("ChooseMove.fail");
        }
        
    }
    class __makeChoiceFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        aos.jack.jak.logic.Signature s;
        SquareIndex __local__1_1;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ChooseMove.makeChoice:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(ChooseMove.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ChooseMove.makeChoice: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (46) 		(s.getPlan() instanceof Move);
                        case 10: 
                        {
                            __breakLevel = 0;
                            if ((s.getPlan() instanceof Move)) 
                                __state = 11;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (49) 		SquareIndex p = (SquareIndex)s.getValueOf(s.getLogicalVariable(1)).as_object() ;
                        case 11: 
                        {
                            __local__1_1 = (SquareIndex) s.getValueOf(s.getLogicalVariable(1)).as_object();
                            __state = 12;
                            break;
                        }
                        //* (52) 		configurable(p);
                        case 12: 
                        {
                            __task.push(configurable(__local__1_1));
                            __state = -__state;
                            __subtask_pass = 13;
                            __subtask_fail = 4;
                            return SUBTASK;
                        }
                        //* (55) 		if(so_far == null)
                        case 13: 
                        {
                            if (so_far == null) 
                                __state = 14;
                             else 
                                __state = 15;
                            break;
                        }
                        //* (56) 	    	so_far = s;
                        case 14: 
                        {
                            __state = 15;
                            so_far = s;
                            break;
                        }
                        //* (59) 		board.isJumpMove(p);
                        case 15: 
                        {
                            if (board.isJumpMove(__local__1_1)) 
                                __state = 16;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (62) 		ev.chosen = s;
                        case 16: 
                        {
                            __state = 17;
                            // That's the first choice

                            ev.chosen = s;
                            break;
                        }
                        //* (42)     #reasoning method
                        case 17: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_makeChoice);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "makeChoice";
        }
        
        __makeChoiceFSM(aos.jack.jak.logic.Signature s)
        {
            this.s = s;
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__makeChoice[0];
            java.lang.String method = __tt__makeChoice[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__makeChoice[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return ChooseMove.this;
        }
        
        public void enter()
        {
            __trace = agent.trace("ChooseMove.makeChoice");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(s);
                }
                case 1: 
                {
                    return aos.util.ToObject.box(__local__1_1);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_makeChoice;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_makeChoice;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_makeChoice;
        }
        
    }
    class __configurableFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        SquareIndex p;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ChooseMove.configurable:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(ChooseMove.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ChooseMove.configurable: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (68) 		if(config.equals("same")) 
                        case 10: 
                        {
                            __breakLevel = 0;
                            if (config.equals("same")) 
                                __state = 11;
                             else 
                                __state = 12;
                            break;
                        }
                        //* (71) 	    	(board.get(p) == board.last);
                        case 11: 
                        {
                            __breakLevel = 2;
                            if ((board.get(p) == board.last)) 
                                __state = 14;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (73) 		else if(config.equals("alter")) 
                        case 12: 
                        {
                            if (config.equals("alter")) 
                                __state = 13;
                             else 
                                __state = 14;
                            break;
                        }
                        //* (76) 	    	(board.get(p) != board.last);
                        case 13: 
                        {
                            __breakLevel = 2;
                            if ((board.get(p) != board.last)) 
                                __state = 14;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (65)     #reasoning method
                        case 14: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_configurable);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "configurable";
        }
        
        __configurableFSM(SquareIndex p)
        {
            this.p = p;
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__configurable[0];
            java.lang.String method = __tt__configurable[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__configurable[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return ChooseMove.this;
        }
        
        public void enter()
        {
            __trace = agent.trace("ChooseMove.configurable");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(p);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_configurable;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_configurable;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_configurable;
        }
        
    }
    class __bodyFSM extends aos.jack.jak.plan.PlanFSM implements aos.jack.jak.core.Generator {
        aos.jack.jak.logic.Signature __local__3_0;
        private int __breakLevel = 0;
        public int run(int __status)
            throws java.lang.Throwable
        {
            do {
                try {
                    if (__tothrow != null) 
                        throw __tothrow;
                    if ((aos.jack.jak.core.Jak.debugging & aos.jack.jak.core.Jak.LOG_PLANS) != 0) 
                        aos.util.logging.LogMsg.log(this,aos.jack.jak.core.Jak.LOG_PLANS,__task + "-ChooseMove.body:" + java.lang.Integer.toString(__state));
                    if (__task.nsteps > 0) {
                        __task.nsteps-- ;
                        if (__task.nsteps == 0) 
                            agent.changeFocus();
                    }
                    if (__state < 10) {
                        __status = super.stdrun(ChooseMove.this,__status);
                        if (__status != CONTINUE || agent.changing_focus) 
                            return __status;
                        continue;
                    }
                    __curstate = __state;
                    switch (__state) {
                        default: 
                        {
                            aos.jack.jak.core.Jak.error("ChooseMove.body: Illegal state");
                            return FAILED_STATE;
                        }
                        //* (29) 		!config.equals("none");
                        case 10: 
                        {
                            __breakLevel = 0;
                            if (!config.equals("none")) 
                                __state = 11;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (31) 		for(Signature s = ev.applicable.first(); s != null; s = ev.applicable.next(s)) 
                        case 11: 
                        {
                            __local__3_0 = ev.applicable.first();
                            __state = 12;
                            break;
                        }
                        //* (31) 		for(Signature s = ev.applicable.first(); s != null; s = ev.applicable.next(s)) 
                        case 12: 
                        {
                            if (__local__3_0 != null) 
                                __state = 13;
                             else 
                                __state = 17;
                            break;
                        }
                        //* (33) 	    	if(makeChoice(s))
                        case 13: 
                        {
                            __breakLevel = 4;
                            __task.push(makeChoice(__local__3_0));
                            __state = -__state;
                            __subtask_pass = 14;
                            __subtask_fail = 16;
                            return SUBTASK;
                        }
                        //* (34) 				return true;
                        case 14: 
                        {
                            if (true) 
                                __state = 15;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (34) 				return true;
                        case 15: 
                        {
                            __breakLevel = 0;
                            __state = 20;
                            break;
                        }
                        //* (31) 		for(Signature s = ev.applicable.first(); s != null; s = ev.applicable.next(s)) 
                        case 16: 
                        {
                            __state = 12;
                            __local__3_0 = ev.applicable.next(__local__3_0);
                            break;
                        }
                        //* (37) 		so_far != null;
                        case 17: 
                        {
                            if (so_far != null) 
                                __state = 18;
                             else 
                                throw planfailed;
                            break;
                        }
                        //* (38) 		if(ev.chosen==null)
                        case 18: 
                        {
                            if (ev.chosen == null) 
                                __state = 19;
                             else 
                                __state = 20;
                            break;
                        }
                        //* (39) 			ev.chosen = so_far;
                        case 19: 
                        {
                            __state = 20;
                            ev.chosen = so_far;
                            break;
                        }
                        //* (27)     body()
                        case 20: 
                        {
                            if (__pending == null) 
                                __state = PASSED_STATE;
                            __tothrow = __pending;
                            break;
                        }
                    }
                }
                catch (java.lang.Throwable e) {
                    handleException(e,__exMap_body);
                }
            }
             while (!agent.changing_focus);
            return CONTINUE;
        }
        
        public java.lang.String methodName()
        {
            return "body";
        }
        
        __bodyFSM()
        {
        }
        
        public java.lang.String stateInfo()
        {
            int n = __curstate;
            java.lang.String file = __tt__body[0];
            java.lang.String method = __tt__body[1];
            if (n < 0) 
                n = -n;
            n -= (10 - 2);
            java.lang.String line = (n < 2)?"??":__tt__body[n];
            return file + ":" + line + " " + method + " [" + __curstate + "]";
        }
        
        public java.lang.Object genObject(int __index)
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Object Construction");
            return null;
        }
        
        public aos.jack.jak.cursor.Cursor genCursor(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal Cursor Construction");
            return null;
        }
        
        public aos.jack.jak.fsm.FSM genFSM(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal FSM Construction");
            return null;
        }
        
        public boolean testCondition(int __index)
            throws java.lang.Exception
        {
            switch (__index) {
            }
            aos.jack.jak.core.Jak.error("illegal test Construction");
            return false;
        }
        
        public aos.jack.jak.plan.Plan getPlan()
        {
            return ChooseMove.this;
        }
        
        protected aos.jack.jak.fsm.FSM fail()
        {
            return getPlan().fail();
        }
        
        protected aos.jack.jak.fsm.FSM pass()
        {
            return getPlan().pass();
        }
        
        public void enter()
        {
            __trace = agent.trace("ChooseMove.body");
        }
        
        public java.lang.Object getVariable(int n)
        {
            switch (n) {
                case 0: 
                {
                    return aos.util.ToObject.box(__local__3_0);
                }
                default: 
                {
                    throw new java.lang.IndexOutOfBoundsException("Reasoning Method " + methodName() + " does not have variable number " + n);
                }
            }
        }
        
        public java.lang.String[] variableNames()
        {
            return __fsmVariableNames_body;
        }
        
        public java.lang.String[] variableTypes()
        {
            return __fsmTypes_body;
        }
        
        public java.lang.String[] variableLocalNames()
        {
            return __fsmLocalNames_body;
        }
        
    }
}
