import aos.util.Properties;

/**
 * The ChooseMove plan investgates the options, so that alternate
 * colours are attempted, independent of fail or success, and also
 * show preference for jump moves over step moves.
 *
 */
plan ChooseMove extends Plan 
{
    #handles event PlanChoice ev;

    #chooses for event NextMove;

    #uses data Board board;

    #reasoning method
    fail()
    {
		ev.chosen = ev.applicable.first();
    }

    Signature so_far = null;

    static String config = "same";//"all";"none";"alter";////Properties.getStringProperty( "choice", "none" );

    body()
    {
		!config.equals("none");

		for(Signature s = ev.applicable.first(); s != null; s = ev.applicable.next(s)) 
		{
	    	if(makeChoice(s))
				return true;
		}
	
		so_far != null;
		if(ev.chosen==null)
			ev.chosen = so_far;
    }

    #reasoning method
    makeChoice(Signature s)
    {
		// Ensure that this is a Move plan
		(s.getPlan() instanceof Move);

		// Extract the $piece binding
		SquareIndex p = (SquareIndex)s.getValueOf(s.getLogicalVariable(1)).as_object() ;

		// Apply configurable constraint
		configurable(p);

		// Remember first satisfying configurable constraint
		if(so_far == null)
	    	so_far = s;

		// Apply jump move constraint
		board.isJumpMove(p);
		
		// That's the first choice
		ev.chosen = s;
    }

    #reasoning method
    configurable(SquareIndex p)
    {
		if(config.equals("same")) 
		{
	    	// Ensure it's the same colour as last
	    	(board.get(p) == board.last);
		} 
		else if(config.equals("alter")) 
		{
	    	// Ensure it's the alternate colour
	    	(board.get(p) != board.last);
		}
    }

}
