import java.nio.file.CopyOption
import java.nio.file.FileVisitResult
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.SimpleFileVisitor
import java.nio.file.attribute.BasicFileAttributes


buildscript {
    repositories
    {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven
                {
                    name 'Active Components Nexus'
                    url 'http://www.activecomponents.org/nexus/content/repositories/snapshots/'
                }
    }
    dependencies {
        classpath 'net.sourceforge.jadex:jadex-commons:3.0-SNAPSHOT'
        classpath 'commons-io:commons-io:2.4'
    }
}


//apply plugin: 'java'
//
//sourceCompatibility = 1.8

enum ACTION {serve, build}

defaultTasks 'buildDoc'

task buildDocs (type: MkDocsTask) {
    action=ACTION.build
}

task serveDocs (type: MkDocsTask) {
    action=ACTION.serve
}

task buildPdf (type:PandocTask) {

}

task buildDocsZip (type: Zip, dependsOn: buildDocs) {
    from "site/"
    baseName = 'mkdocs'
    destinationDir = file("$project.projectDir")
    outputs.upToDateWhen { false }
}

class PandocTask extends DockerTask {
    static String PANDOCIMAGE_NAME = 'jadexpandoc'

    @TaskAction
    def action() {
        java.nio.file.Path target = Paths.get(projectDir,"work")

        jadex.commons.SUtil.deleteDirectory(target.toFile())

        org.apache.commons.io.FileUtils.copyDirectory(Paths.get(projectDir, "docs").toFile(), target.toFile())

        List<String> mdFiles = [];

        Files.walkFileTree(target, new SimpleFileVisitor<java.nio.file.Path>() {

            @Override
            FileVisitResult visitFile(java.nio.file.Path file, BasicFileAttributes attrs) throws IOException {
                def fileName = file.toFile().getName().toLowerCase()
                if (fileName.endsWith(".png") || fileName.endsWith(".jpg")) {
                    def targetFile = target.resolve(file.toFile().getName())
                    if (!targetFile.toFile().exists()) {
//                        Files.copy(file, targetFile);
                        Files.move(file, targetFile)
                    }
                } else if (file.toFile().getName().endsWith(".md")) {
                    mdFiles.add(target.relativize(file).toString())
                }
                return super.visitFile(file, attrs)
            }
        })


//        def p = "find work/ -name '*.png' -exec 'mv {} work/' \\;".execute()
//        p.errorStream.eachLine{println it}

        def builder = getPandocProcessBuilder()
        builder.directory(target.toFile().getAbsoluteFile())
        builder.command.addAll(mdFiles)
//        println target.toFile().getAbsoluteFile()
//        def ps = builder.command("ls").start();
//        ps.inputStream.eachLine{println it}
//        ps.waitFor()

        launchDockerProcess(builder)

        def pdfFile = target.resolve("doc.pdf")
        def targetFile = Paths.get(projectDir, "doc.pdf")
        Files.deleteIfExists(targetFile)
        Files.copy(pdfFile, targetFile)
    }

    def ProcessBuilder getPandocProcessBuilder() {
        if ("which pandoc".execute().text.trim().empty
                && docker != null
                && !docker.empty) {
            // remove old image
            println "Removing old pandoc docker image..."
            println "$docker rmi $PANDOCIMAGE_NAME".execute().text
            println "Building pandoc docker image..."
            def p = "$docker build -t $PANDOCIMAGE_NAME .".execute()
            p.inputStream.eachLine{println it}
            p.waitFor()
        }

        def String[] dockerArgs = ["--rm", "-v", "$project.projectDir/work/:/source/"];
        def String[] args = ["-s", "-f", "markdown", "-t", "latex", "-o", "doc.pdf"]
        return getProcessBuilderForCommand("pandoc", args, PANDOCIMAGE_NAME, dockerArgs, false)
    }
}

class MkDocsTask extends DockerTask {

    def ACTION action = ACTION.serve


    @TaskAction
    def action() {
        def String[] dockerArgs = ["--rm", "-p", "8000:8000", "-v", "$project.projectDir/:/workspace/"];
        def builder =  getProcessBuilderForCommand("mkdocs", null, "andrglo/mkdocs:latest", dockerArgs, true)
        if (action == ACTION.serve) {
            builder.command.add("serve")
        } else if (action == ACTION.build) {
            builder.command.add("build")
            builder.command.add("--clean")
        }

        launchDockerProcess(builder)
    }

}


class DockerTask extends DefaultTask {

    protected String docker = "which docker".execute().text.trim()
    private final static String DOCKERCONTAINERNAME = 'jadextempdocker'

    def boolean forceDocker = project.hasProperty('forceDocker') ? project.property('forceDocker') : false

    def launchDockerProcess(builder) {
        println "Executing $builder.command"
        def p = builder.start()
        if (builder.command().first().contains("docker")) {
            Runtime.runtime.addShutdownHook {
                println "shutting down - please be patient"
                def stopProcess = "$docker stop $DOCKERCONTAINERNAME".execute()
                stopProcess.waitFor();
                println stopProcess.text
                if (stopProcess.exitValue() == 0) {
                    println "stopped docker container"
                }
            }
        }
        p.inputStream.eachLine {println it}
        p.errorStream.eachLine {println it}
        p.waitFor();
    }

    def ProcessBuilder getProcessBuilderForCommand(String cmd, String[] args, String dockerimg, String[] dockerArgs, boolean pullFirst = true) {
        def ProcessBuilder result;
        def cmdPath = "which $cmd".execute().text.trim()
        def allArgs

        if (args == null) {
            args = []
        }
        if (cmdPath != null && !cmdPath.empty && !forceDocker) {
            allArgs = [cmdPath]
        } else if (docker != null && !docker.empty) {
            println "No $cmd binary found, but you have docker!"
            if (pullFirst) {
                println "Downloading $dockerimg docker image..."
                pullDockerImage(dockerimg);
            }

            allArgs = [docker, 'run', '--name=' + DOCKERCONTAINERNAME]
            allArgs.addAll(dockerArgs)
            allArgs.add(dockerimg)
        } else {
            System.err.println("No $cmd binary or docker found! Install $cmd or docker to continue.")
        }

        allArgs.addAll(args)
        result = new ProcessBuilder(allArgs);
        result.redirectErrorStream(true)
        result.directory(project.projectDir)
        return result;
    }

    def void pullDockerImage(dockerimg) {
        def builder = new ProcessBuilder(docker, 'pull', dockerimg)
        builder.redirectErrorStream(true)
        def p = builder.start()
        p.waitFor()
        if (p.exitValue() != 0) {
            println p.text
            System.exit(p.exitValue())
        }
    }

}




