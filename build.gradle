if(file('gradle.properties').exists())
{
	apply from: "gradle.properties"
}

//if(gradle.startParameter.taskRequests.args.size()>0 && gradle.startParameter.taskRequests.args[0].contains("upload"))
//{
//	println("upload detected")
//}

def stdexcl = ['-backup', '-management', '-maven', '-servletfilter-', '-jmonkey', 
	'-launch', '-web', '-distribution-', '-webservice', '-securetransport', '-relay', '-android'] //*:*-relay-standalone

def proexcl = ['-jmonkey', '-launch', '-web', '-distribution-', '-backup', '-android']

apply plugin: 'java-library-distribution'

buildscript {
    repositories
    {
        mavenCentral()
    }
    dependencies
    {
        classpath 'com.android.tools.build:gradle:0.14.0'
    }
}

allprojects
{
    version = '2.5-SNAPSHOT'
    group = 'net.sourceforge.jadex'
    
    configurations
    {
        deployerJars
    }

    dependencies
    {
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }

    repositories
    {
        mavenCentral()
        //maven
        //{
        //    name 'www1'
        //    url 'http://www1.activecomponents.org/nexus/content/repositories/snapshots/'
        //    credentials
        //    {
        //        username 'deployment'
        //        password 'laxlax'
        //    }
        //}
    }
}

configurations
{
	excludeset
}

subprojects
{
    def mainSrcDir  = 'src/main/java'
    def testSrcDir  = 'src/test/java'
    def junit       = 'junit:junit:4.11'
    def allSource   = ''

    if (isAndroidProject(project)) {
        if (isAndroidLibraryProject(project)) {
            apply plugin: 'android-library'
        } else {
            apply plugin: 'android'
        }
        allSource   = android.sourceSets.main.java.srcDirs //.java.srcDirs
        dependencies
        {
            androidTestCompile junit
        }
    } else {
        apply plugin: 'java'
        apply plugin: 'java-library-distribution'
        allSource   = sourceSets.main.allSource
        sourceSets.main.resources.srcDirs    mainSrcDir
        sourceSets.test.resources.srcDirs    testSrcDir
        dependencies
        {
            testCompile junit
        }
    }

    apply plugin: 'maven'
    //apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = 1.6

    task sourcesJar(type: Jar, dependsOn: 'classes') {
        classifier 'sources'
        from allSource
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        classifier = 'javadoc'
        from new File(projectDir, 'build/docs')
    }

    javadocJar.onlyIf { gradle.startParameter.taskRequests.args.size()>0 && gradle.startParameter.taskRequests.args[0].contains("upload") }

	//sourcesJar.onlyIf { gradle.startParameter.taskRequests.args.size()>0 && gradle.startParameter.taskRequests.args[0].contains("upload") }

    artifacts
    {
        archives sourcesJar
        archives javadocJar
    }

	signing
	{
		if(project.hasProperty("ext.signing.keyId"))
		{
	    	sign configurations.archives
		}
	}

	// cannot sign with maven-publish :-( http://stackoverflow.com/questions/16560235/how-to-sign-maven-publications-with-gradle
    // publishing
    // {
    //    publications
    //    {
    //        mavenJava(MavenPublication)
    //        {
    //			from components.java
    //		
    //			artifact sourceJar {
    //            	classifier "sources"
    //        	}
    //		}
    //	}
   	//}

    //uploadArchives
    //{
    //    repositories
    //    {
    //        add project.repositories.www1
    //    }
    //}

    uploadArchives
    {
        repositories.mavenDeployer
        {
        	beforeDeployment
        	{
        		MavenDeployment deployment -> signing.signPom(deployment)
        	}
        	
            configuration = configurations.deployerJars
            
            snapshotRepository(url: "http://www2.activecomponents.org/nexus/content/repositories/snapshots/")
            {
                authentication(userName: "deployment", password: "laxlax")
            }
            repository(url: "http://www2.activecomponents.org/nexus/content/repositories/releases/")
            {
                authentication(userName: "deployment", password: "laxlax")
            }
        }
    }
}

// additional android config
subprojects {
    if(isAndroidProject(project))
    {
        android {
            compileSdkVersion 8
            buildToolsVersion "19.1.0" //"21.1"

            defaultConfig {
                minSdkVersion 8
                targetSdkVersion 8
                versionCode 1
                versionName project.version
            }

            sourceSets {
                main {
                    manifest.srcFile 'AndroidManifest.xml'
                    resources.srcDirs = ['src/main/java']
                    aidl.srcDirs = ['src/main/java']
                    res.srcDirs = ['res']
                }
            }

            buildTypes {
                release {
                    // runProguard true
                    // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
                }
            }

            packagingOptions {
                exclude 'LICENSE.txt'
                exclude 'META-INF/license.txt'
                exclude 'META-INF/notice.txt'
            }

            lintOptions {
                abortOnError false
            }
        }

        configurations {
            // add new configuration to define provided deps
            provided {
                dependencies.all { dep ->
                    configurations.default.exclude group: dep.group, module: dep.name
                }
            }
            compile.extendsFrom provided
            // exclude transitive deps that are not supported on android
            all*.exclude group:'org.javassist', module:'javassist'
            all*.exclude group:'javax.mail', module:'mail'
            all*.exclude group:'org.antlr', module:'antlr-runtime'
            all*.exclude group:'bouncycastle', module:'bcprov-jdk15'
            all*.exclude group:'org.ow2.asm', module:'asm-all'
            runtime.exclude module:'junit' // no junit in runtime classpath
        }

        // include 'provided' configuration only in compile classpath:
//        if (isAndroidLibraryProject(project)) {
//            android.libraryVariants.each { variant ->
//                variant.compile.classpath += configurations.provided
//            }
//        } else {
//            android.applicationVariants.each { variant ->
//                variant.compile.classpath += configurations.provided
//            }
//        }

        // library definitions to be used in subprojects
        ext.libraries = [
                android_support: "com.google.android:support-v4:r7",
                android_compat: "com.android.support:appcompat-v7:19.0.1",
                android: 'com.google.android:android:2.2.1',
                android_test: "com.google.android:android-test:2.2.1",
                protobuf: "com.google.protobuf:protobuf-java:2.4.1",
                junit: 'junit:junit:4.11'
        ]

        // general dependencies for all android modules
        dependencies {
            compile libraries.android
            androidTestCompile 'com.pivotallabs:robolectric:1.0'
            provided 'org.javassist:javassist:3.14.0-GA'
            provided 'javax.mail:mail:1.4.5'
            provided 'org.antlr:antlr-runtime:3.1.3'
            provided 'bouncycastle:bcprov-jdk15:140'
        }

        // dummy tasks to allow dependencies on tasks that are missing in android-plugin
        task jar(type:Jar) {

        }

        task javadoc(type:Javadoc) {

        }

        task classes(dependsOn: 'compileDebugSources') {

        }

    }
}

def isAndroidProject(project) {
    project.hasProperty("androidProject") && project.property("androidProject") == 'true'
}

def isAndroidLibraryProject(project) {
    project.hasProperty("androidLibraryProject") && project.property("androidLibraryProject") == 'true'
}

def getSourceDir(project) {
    if (isAndroidProject(project)) {
        project.android.sourceSets.main.java.srcDirs
    } else {
        project.sourceSets.main.allJava
    }
}

def getResourcesDir(project) {
    if (isAndroidProject(project)) {
        project.android.sourceSets.main.res.srcDirs
    } else {
        project.sourceSets.main.resources
    }
}

def getCompileClassPath(project) {
    if (isAndroidProject(project)) {
        if (isAndroidLibraryProject(project)) {
            project.android.libraryVariants.javaCompile.classpath
        } else {
            project.android.applicationVariants.javaCompile.classpath
        }
    } else {
        project.sourceSets.main.compileClasspath
    }
}

task docs(type: Javadoc) {
    source subprojects.collect {project -> getSourceDir(project)}
    classpath = files(subprojects.collect {project -> getCompileClassPath(project)})
    destinationDir = new File(projectDir, 'build/docs')
    options.links("http://docs.oracle.com/javase/7/docs/api/")
}

task srcZip(type: Zip) {
	buildDistributionSource(srcZip, stdexcl)
}

task srcZipPro(type: Zip) {
	buildDistributionSource(srcZipPro, proexcl)
}

task srcZip3d(type: Zip) {
	archiveName = 'sources3d.zip'
    classifier = 'src'
    
    def pr = project(":jadex-kernel-extension-envsupport-jmonkey")
    from(pr.projectDir.name) { include 'build.gradle' into 'sources/'+pr.projectDir.name }
	from(pr.sourceSets.main.java) { into 'sources/'+pr.projectDir.name+'/src/main/java' }
	from(pr.sourceSets.main.resources) { into 'sources/'+pr.projectDir.name+'/src/main/resources' }
}

def buildDistributionSource(task, excl) {
	task.archiveName = 'sources.zip'
    task.classifier = 'src'
    
    //from(sourceSets.main.allSource){}
    //from sourceSets*.allSource.srcDirs*.collect { relativePath(it) }.flatten()
    
    task.from('build.gradle'){ into('sources') }
    task.from('settings.gradle'){ into('sources') }
    
    subprojects.each {subproject ->
    	if(!isExcluded(excl, subproject.name))
		{
			task.from(subproject.projectDir.name) { include 'build.gradle' into 'sources/'+subproject.projectDir.name }
			task.from(getSourceDir(subproject)) { into 'sources/'+subproject.projectDir.name+'/src/main/java' }
			task.from(getResourcesDir(subproject)) { into 'sources/'+subproject.projectDir.name+'/src/main/resources' }
		}
	} 
	
	task.from('jadex-kernel-extension-envsupport-opengl/lib/gluegen-rt.jar') { into('sources/jadex-kernel-extension-envsupport-opengl/lib') }
	task.from('jadex-kernel-extension-envsupport-opengl/lib/jogl.jar') { into('sources/jadex-kernel-extension-envsupport-opengl/lib') }
}

def buildDistribution(task, excl) {
	println("diststart"+excl)

	task.duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	subprojects.each {subproject ->
		if(!isExcluded(excl, subproject.name))
		{
			task.from(subproject.configurations.runtime) { into('lib') }
			task.from(subproject.jar) { into('lib') }
		}
		else
		{
			println("Excluded: "+subproject.name)
		}
	}
	 	
    //from(subprojects.configurations.runtime){ into('lib') }
    //from('subprojects.jar'){ into('lib') }
    //from('sourceSets.main.allSource') { into('src') }
    task.from('docs/junit-3.8.1.jar'){ into('lib') }
    
    task.from('docs/junit-3.8.1.jar'){ into('lib') }
    task.from(project(":jadex-platform-standalone-launch").jar) { into('lib') }
    task.from('build/jadex-example-project.zip')
    task.from('docs/readme.txt')
    task.from('docs/license.txt')
    task.from('docs/api-changes.txt')
    task.from('docs/jcc.settings.xml') 
    task.from('docs/default.settings.xml')
    task.from('docs/jadex.bat')
    task.from('docs/jadex_no_awareness.bat') 
    task.from('docs/jadex.sh')
    task.from('docs/jadex_no_awareness.sh')
    task.from('docs/bpmn_editor.bat')
    task.from('docs/bpmn_editor.sh')
    task.from('docs/howtostart.txt')
    println("distend")
}

task buildDist(type: Zip, dependsOn: srcZip) {
	buildDistribution(buildDist, stdexcl)
	from(srcZip.archivePath)
}

task buildDistPro(type: Zip, dependsOn: srcZipPro) {
	buildDistribution(buildDistPro, proexcl)
	from(srcZipPro.archivePath)
	from('jadex-platform-extension-management/win') { into('win') }
}

task buildDist3d(type: Zip, dependsOn: srcZip3d) {
	archiveName = '3d.zip'
	
	println(project(":jadex-kernel-extension-envsupport-jmonkey"))
	println(project(":jadex-kernel-extension-envsupport-jmonkey").jar)
	
	from(project(":jadex-kernel-extension-envsupport-jmonkey").jar) { into('lib') }
	buildDistribution(buildDistPro, proexcl)
	from(srcZip3d.archivePath)
	from('docs/readme-3d.txt')
}

def isExcluded(excl, name)
{
	boolean ret = false;
	if(excl!=null)
	{
		for(ex in excl)
		{
			if(name.indexOf(ex)!=-1)
			{
				ret = true;
				break;
			}
		}
	}
	return ret;
}
