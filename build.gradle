import java.util.regex.Matcher

apply plugin: 'signing'
//apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish' // publishToMavenLocal
apply plugin: 'maven' // use gradle install to install in local .m2 
//apply plugin: 'net.researchgate.release'
// gradle install -x test -i    for fast local install without tests (-x test i program args)

def date = new Date()
def timestamp = date.format('yyyyMMdd.HHmmss')

def maindistsuffix = ''
gradle.ext.selecteddists.each { dname ->
	maindistsuffix += '-' + dname
}

project.ext.mainres = ['src/main/java', 'src/main/resources']
project.ext.testres = ['src/test/java', 'src/test/resources']

project.ext.subprojectmap  = new HashMap()
subprojects.each { sp ->
	project.ext.subprojectmap.put(sp.name, sp)
}

project.ext.jadex_build_version=jadex_build_version
project.ext.jadex_lastbuild_version=jadex_lastbuild_version
project.ext.timestamp=timestamp

buildscript 
{
    apply from: 'util.gradle'
}

allprojects
{
    version = jadex_build_version // Set the project version property, otherwise install does not work
    group = 'net.sourceforge.jadex'

    repositories
    {
        mavenCentral()
    }
}

subprojects
{
    def mainSrcDir  = 'src/main/java'
    def testSrcDir  = 'src/test/java'
    def junit       = 'junit:junit:4.11'
    def allSource   = ''

    if(isAndroidProject(project))
    {
        if (isAndroidLibraryProject(project)) 
        {
            apply plugin: 'android-library'
            aarProjects.add project.name
        } 
        else 
        {
            apply plugin: 'com.android.application'
        }
        // include all resources that are placed inside src dirs
        android.sourceSets.main.resources.srcDirs mainSrcDir
        android.sourceSets.test.resources.srcDirs testSrcDir
        allSource   = android.sourceSets.main.java.srcDirs
        dependencies
        {
            androidTestCompile junit
        }
    }
    else 
    {
        apply plugin: 'java'
        compileJava.options.encoding = 'UTF-8'
        allSource   = sourceSets.main.allSource
        // include all resources that are placed inside src dirs
        sourceSets.main.resources.srcDirs    mainSrcDir
        sourceSets.test.resources.srcDirs    testSrcDir
        
        dependencies
        {
            testCompile junit
        }
    }

    apply plugin: 'maven'
    sourceCompatibility = 1.6
}

task exampleZips << {
	String outputdir = project.distsDir.getCanonicalPath() + '/exampleprojects/'
	gradle.ext.maindistartifacts.each { artname ->
		Project sp = subprojectmap.get(artname)
		File exdir = new File(sp.projectDir.getCanonicalPath() + File.separator + 'dist/exampleprojects')
		if (exdir.exists() && exdir.isDirectory()) {
			exdir.listFiles().each { ex ->
				def ant = new groovy.util.AntBuilder()
				ant.zip(destfile: outputdir + ex.getName() + '.zip',
				basedir: exdir.getCanonicalPath(),
				includes: ex.getName() + '/**')
			}
		}
	}
}

// Hack, helper to generate dep-tree
task genDepList << {
	def out = new PrintStream(project.projectDir.getCanonicalPath() + '/dependencies.conf', 'UTF-8')
	project.subprojects.each { sp ->
		out. println ('### ' + sp.getName())
		def founddeps = new HashSet<String>()
		sp.configurations.each { conf ->
			conf.getAllDependencies().withType(org.gradle.api.artifacts.ProjectDependency).each { dep ->
				if (!founddeps.contains(dep.getName()))
					out.println dep.getName()
				founddeps.add(dep.getName())
			}
		}
	}
	out.close()
}

task srcZip << {
	createSrcZip(maindistsuffix.substring(1), gradle.ext.maindistartifacts)
}

task srcZips << {
	gradle.ext.selecteddists.each { selecteddist ->
		def arts = gradle.ext.distartmap.get(selecteddist)
		createSrcZip(selecteddist, arts)
	}
}

task distZip(dependsOn: [subprojects.build, srcZip, exampleZips]) << {
	def isaddon = true
	gradle.ext.selecteddists.each { dist ->
		isaddon &= dist.startsWith('addon')
	}
	createDistZip(maindistsuffix.substring(1), gradle.ext.maindistartifacts, isaddon)
}

task distZips(dependsOn: [subprojects.build, srcZips, exampleZips]) << {
	
	gradle.ext.selecteddists.each { selecteddist ->
		Set<String> arts = gradle.ext.distartmap.get(selecteddist)
		createDistZip(selecteddist, arts, selecteddist.startsWith('addon'))
	}
}

def createDistZip(distname, arts, isaddon)
{
	def filterfiles = '*.xml,*.xsd,*.bat,*.sh,*.txt'
	def preprocessdirfile = new File(project.distsDir.getCanonicalPath() + '/preprocess')
	preprocessdirfile.mkdirs()
	def preprocessdir = preprocessdirfile.getCanonicalPath()
	def foldername = 'jadex-'  + jadex_build_version
	def zipfilename = project.distsDir.getCanonicalPath() + '/' + 'jadex-'  + distname  + '-' + jadex_build_version + '.zip'
	def distdir = project.distsDir.getCanonicalPath()
	def subprojectmap = project.ext.subprojectmap;
	def ant = new groovy.util.AntBuilder()
	
	ant.sequential {
		ant.copy todir: preprocessdir,
		{
			resources
			{
				arts.each { artname ->
					Project sp = subprojectmap.get(artname)
					fileset dir: sp.projectDir.getCanonicalPath() + '/dist/files', includes: filterfiles, erroronmissingdir: false
				}
			}
			
			filterset begintoken: '${', endtoken: '}',
			{
				filter token: 'jadex_build_version', value: jadex_build_version
			}
		}
		if (isaddon)
		{
			ant.copy file: project.distsDir.getCanonicalPath() + '/' + 'jadex-'  + distname  + '-' + jadex_build_version + '-sources.zip', tofile: preprocessdir + '/sources-' + distname + '.zip'
		}
		else
		{
			ant.copy file: project.distsDir.getCanonicalPath() + '/' + 'jadex-'  + distname  + '-' + jadex_build_version + '-sources.zip', tofile: preprocessdir + '/sources.zip'
		}
		ant.zip destfile: zipfilename,
		{
			arts.each { artname ->
				def sp = subprojectmap.get(artname)
				def spbdir = sp.buildDir.getCanonicalPath()
				
				zipfileset dir: spbdir + '/libs', prefix: foldername + '/lib/', includes: '*.jar,*.war', excludes: '*-sources.jar,jadex-distribution-*.jar', erroronmissingdir: false

				zipfileset dir: spbdir + '/dist/files', prefix: foldername + '/', excludes: filterfiles, erroronmissingdir: false

				
				def exdir = new File(sp.projectDir.getCanonicalPath() + File.separator + 'dist/exampleprojects')
				if (exdir.exists() && exdir.isDirectory()) {
					exdir.listFiles().each { ex ->
						zipfileset dir: project.distsDir.getCanonicalPath() + '/exampleprojects/', prefix: foldername + '/', includes: ex.getName() + '.zip'
					}
				}
			}
			
			zipfileset dir: preprocessdir, prefix: foldername + '/', erroronmissingdir: false
		}
		ant.delete dir: preprocessdir
	}
}

def createSrcZip(distname, arts)
{
	String maindir = project.projectDir.getCanonicalPath()
	String zipfilename = project.distsDir.getCanonicalPath() + '/jadex-'  + distname + '-' + jadex_build_version + '-sources.zip'
	def ant = new groovy.util.AntBuilder()
	ant.sequential {
		zip destfile: zipfilename,
		{
			project.ext.mainres.each { rsdir ->
				arts.each { artname ->
					Project sp = subprojectmap.get(artname)
					zipfileset dir: sp.projectDir.getCanonicalPath() + '/' + rsdir, prefix: 'sources/' + sp.projectDir.getName() +'/' + rsdir,  erroronmissingdir: false
				}
			}
			
			arts.each { artname ->
				Project sp = subprojectmap.get(artname)
				zipfileset dir: sp.projectDir.getCanonicalPath(), prefix: 'sources/' + sp.projectDir.getName(), includes: '*.gradle',  erroronmissingdir: false
			}
			
			zipfileset dir: maindir, prefix: 'sources/', includes: '*.gradle', excludes: '.gradle'
			zipfileset dir: maindir, prefix: 'sources/', includes: 'buildconfigs.csv'
			zipfileset dir: maindir, prefix: 'sources/', includes: 'dependencies.conf'
		}
	}
}
