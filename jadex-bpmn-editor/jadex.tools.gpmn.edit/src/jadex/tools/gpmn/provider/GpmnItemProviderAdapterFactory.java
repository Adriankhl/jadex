/**
 * Copyright (c) 2009, Universität Hamburg
 * All rights reserved. This program and the accompanying 
 * materials are made available under the terms of the 
 * ###_LICENSE_REPLACEMENT_MARKER_###
 * which accompanies this distribution, and is available at
 * ###_LICENSE_URL_REPLACEMENT_MARKER_###
 *
 * $Id$
 */
package jadex.tools.gpmn.provider;

import jadex.tools.gpmn.GpmnPackage;

import jadex.tools.gpmn.util.GpmnAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GpmnItemProviderAdapterFactory extends GpmnAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable,
		IChildCreationExtender
{
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright (c) 2009, Universität Hamburg\nAll rights reserved. This program and the accompanying \nmaterials are made available under the terms of the \n###_LICENSE_REPLACEMENT_MARKER_###\nwhich accompanies this distribution, and is available at\n###_LICENSE_URL_REPLACEMENT_MARKER_###";

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(GpmnEditPlugin.INSTANCE, GpmnPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GpmnItemProviderAdapterFactory()
	{
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.AchieveGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AchieveGoalItemProvider achieveGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.AchieveGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAchieveGoalAdapter()
	{
		if (achieveGoalItemProvider == null)
		{
			achieveGoalItemProvider = new AchieveGoalItemProvider(this);
		}

		return achieveGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Artifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactItemProvider artifactItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Artifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactAdapter()
	{
		if (artifactItemProvider == null)
		{
			artifactItemProvider = new ArtifactItemProvider(this);
		}

		return artifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ArtifactsContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactsContainerItemProvider artifactsContainerItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ArtifactsContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactsContainerAdapter()
	{
		if (artifactsContainerItemProvider == null)
		{
			artifactsContainerItemProvider = new ArtifactsContainerItemProvider(this);
		}

		return artifactsContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter()
	{
		if (associationItemProvider == null)
		{
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.AssociationTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationTargetItemProvider associationTargetItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.AssociationTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationTargetAdapter()
	{
		if (associationTargetItemProvider == null)
		{
			associationTargetItemProvider = new AssociationTargetItemProvider(this);
		}

		return associationTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Context} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextItemProvider contextItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Context}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextAdapter()
	{
		if (contextItemProvider == null)
		{
			contextItemProvider = new ContextItemProvider(this);
		}

		return contextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ContextElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextElementItemProvider contextElementItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ContextElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextElementAdapter()
	{
		if (contextElementItemProvider == null)
		{
			contextElementItemProvider = new ContextElementItemProvider(this);
		}

		return contextElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.DataObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataObjectItemProvider dataObjectItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.DataObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataObjectAdapter()
	{
		if (dataObjectItemProvider == null)
		{
			dataObjectItemProvider = new DataObjectItemProvider(this);
		}

		return dataObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Edge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeItemProvider edgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Edge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeAdapter()
	{
		if (edgeItemProvider == null)
		{
			edgeItemProvider = new EdgeItemProvider(this);
		}

		return edgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Goal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoalItemProvider goalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Goal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoalAdapter()
	{
		if (goalItemProvider == null)
		{
			goalItemProvider = new GoalItemProvider(this);
		}

		return goalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.GpmnDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpmnDiagramItemProvider gpmnDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.GpmnDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpmnDiagramAdapter()
	{
		if (gpmnDiagramItemProvider == null)
		{
			gpmnDiagramItemProvider = new GpmnDiagramItemProvider(this);
		}

		return gpmnDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Graph} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphItemProvider graphItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Graph}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphAdapter()
	{
		if (graphItemProvider == null)
		{
			graphItemProvider = new GraphItemProvider(this);
		}

		return graphItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Group} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GroupItemProvider groupItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Group}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGroupAdapter()
	{
		if (groupItemProvider == null)
		{
			groupItemProvider = new GroupItemProvider(this);
		}

		return groupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Identifiable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifiableItemProvider identifiableItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Identifiable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifiableAdapter()
	{
		if (identifiableItemProvider == null)
		{
			identifiableItemProvider = new IdentifiableItemProvider(this);
		}

		return identifiableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.InterGraphEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterGraphEdgeItemProvider interGraphEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.InterGraphEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterGraphEdgeAdapter()
	{
		if (interGraphEdgeItemProvider == null)
		{
			interGraphEdgeItemProvider = new InterGraphEdgeItemProvider(this);
		}

		return interGraphEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.InterGraphVertex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterGraphVertexItemProvider interGraphVertexItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.InterGraphVertex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterGraphVertexAdapter()
	{
		if (interGraphVertexItemProvider == null)
		{
			interGraphVertexItemProvider = new InterGraphVertexItemProvider(this);
		}

		return interGraphVertexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.MaintainGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaintainGoalItemProvider maintainGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.MaintainGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaintainGoalAdapter()
	{
		if (maintainGoalItemProvider == null)
		{
			maintainGoalItemProvider = new MaintainGoalItemProvider(this);
		}

		return maintainGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.MessageGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageGoalItemProvider messageGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.MessageGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageGoalAdapter()
	{
		if (messageGoalItemProvider == null)
		{
			messageGoalItemProvider = new MessageGoalItemProvider(this);
		}

		return messageGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.MessagingEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessagingEdgeItemProvider messagingEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.MessagingEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessagingEdgeAdapter()
	{
		if (messagingEdgeItemProvider == null)
		{
			messagingEdgeItemProvider = new MessagingEdgeItemProvider(this);
		}

		return messagingEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.NamedObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedObjectItemProvider namedObjectItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.NamedObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedObjectAdapter()
	{
		if (namedObjectItemProvider == null)
		{
			namedObjectItemProvider = new NamedObjectItemProvider(this);
		}

		return namedObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ParallelGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParallelGoalItemProvider parallelGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ParallelGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParallelGoalAdapter()
	{
		if (parallelGoalItemProvider == null)
		{
			parallelGoalItemProvider = new ParallelGoalItemProvider(this);
		}

		return parallelGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter()
	{
		if (parameterItemProvider == null)
		{
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ParameterizedEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterizedEdgeItemProvider parameterizedEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ParameterizedEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterizedEdgeAdapter()
	{
		if (parameterizedEdgeItemProvider == null)
		{
			parameterizedEdgeItemProvider = new ParameterizedEdgeItemProvider(this);
		}

		return parameterizedEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.ParameterizedVertex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterizedVertexItemProvider parameterizedVertexItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.ParameterizedVertex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterizedVertexAdapter()
	{
		if (parameterizedVertexItemProvider == null)
		{
			parameterizedVertexItemProvider = new ParameterizedVertexItemProvider(this);
		}

		return parameterizedVertexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.PerformGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerformGoalItemProvider performGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.PerformGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerformGoalAdapter()
	{
		if (performGoalItemProvider == null)
		{
			performGoalItemProvider = new PerformGoalItemProvider(this);
		}

		return performGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Plan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanItemProvider planItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Plan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanAdapter()
	{
		if (planItemProvider == null)
		{
			planItemProvider = new PlanItemProvider(this);
		}

		return planItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.PlanEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlanEdgeItemProvider planEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.PlanEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlanEdgeAdapter()
	{
		if (planEdgeItemProvider == null)
		{
			planEdgeItemProvider = new PlanEdgeItemProvider(this);
		}

		return planEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter()
	{
		if (processItemProvider == null)
		{
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.QueryGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryGoalItemProvider queryGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.QueryGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryGoalAdapter()
	{
		if (queryGoalItemProvider == null)
		{
			queryGoalItemProvider = new QueryGoalItemProvider(this);
		}

		return queryGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.SequentialGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequentialGoalItemProvider sequentialGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.SequentialGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequentialGoalAdapter()
	{
		if (sequentialGoalItemProvider == null)
		{
			sequentialGoalItemProvider = new SequentialGoalItemProvider(this);
		}

		return sequentialGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.SubGoalEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubGoalEdgeItemProvider subGoalEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.SubGoalEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubGoalEdgeAdapter()
	{
		if (subGoalEdgeItemProvider == null)
		{
			subGoalEdgeItemProvider = new SubGoalEdgeItemProvider(this);
		}

		return subGoalEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.SubProcessGoal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubProcessGoalItemProvider subProcessGoalItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.SubProcessGoal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubProcessGoalAdapter()
	{
		if (subProcessGoalItemProvider == null)
		{
			subProcessGoalItemProvider = new SubProcessGoalItemProvider(this);
		}

		return subProcessGoalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.TextAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextAnnotationItemProvider textAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.TextAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAnnotationAdapter()
	{
		if (textAnnotationItemProvider == null)
		{
			textAnnotationItemProvider = new TextAnnotationItemProvider(this);
		}

		return textAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.Vertex} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VertexItemProvider vertexItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.Vertex}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVertexAdapter()
	{
		if (vertexItemProvider == null)
		{
			vertexItemProvider = new VertexItemProvider(this);
		}

		return vertexItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.GenericGpmnElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericGpmnElementItemProvider genericGpmnElementItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.GenericGpmnElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericGpmnElementAdapter() {
		if (genericGpmnElementItemProvider == null)
		{
			genericGpmnElementItemProvider = new GenericGpmnElementItemProvider(this);
		}

		return genericGpmnElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jadex.tools.gpmn.GenericGpmnEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericGpmnEdgeItemProvider genericGpmnEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link jadex.tools.gpmn.GenericGpmnEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericGpmnEdgeAdapter() {
		if (genericGpmnEdgeItemProvider == null)
		{
			genericGpmnEdgeItemProvider = new GenericGpmnEdgeItemProvider(this);
		}

		return genericGpmnEdgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory()
	{
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory)
	{
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type)
	{
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type)
	{
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type)
	{
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders()
	{
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object,
			EditingDomain editingDomain)
	{
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator()
	{
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener)
	{
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification)
	{
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose()
	{
		if (achieveGoalItemProvider != null) achieveGoalItemProvider.dispose();
		if (artifactItemProvider != null) artifactItemProvider.dispose();
		if (artifactsContainerItemProvider != null) artifactsContainerItemProvider.dispose();
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (associationTargetItemProvider != null) associationTargetItemProvider.dispose();
		if (contextItemProvider != null) contextItemProvider.dispose();
		if (contextElementItemProvider != null) contextElementItemProvider.dispose();
		if (dataObjectItemProvider != null) dataObjectItemProvider.dispose();
		if (edgeItemProvider != null) edgeItemProvider.dispose();
		if (goalItemProvider != null) goalItemProvider.dispose();
		if (gpmnDiagramItemProvider != null) gpmnDiagramItemProvider.dispose();
		if (graphItemProvider != null) graphItemProvider.dispose();
		if (groupItemProvider != null) groupItemProvider.dispose();
		if (identifiableItemProvider != null) identifiableItemProvider.dispose();
		if (interGraphEdgeItemProvider != null) interGraphEdgeItemProvider.dispose();
		if (interGraphVertexItemProvider != null) interGraphVertexItemProvider.dispose();
		if (maintainGoalItemProvider != null) maintainGoalItemProvider.dispose();
		if (messageGoalItemProvider != null) messageGoalItemProvider.dispose();
		if (messagingEdgeItemProvider != null) messagingEdgeItemProvider.dispose();
		if (namedObjectItemProvider != null) namedObjectItemProvider.dispose();
		if (parallelGoalItemProvider != null) parallelGoalItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (parameterizedEdgeItemProvider != null) parameterizedEdgeItemProvider.dispose();
		if (parameterizedVertexItemProvider != null) parameterizedVertexItemProvider.dispose();
		if (performGoalItemProvider != null) performGoalItemProvider.dispose();
		if (planItemProvider != null) planItemProvider.dispose();
		if (planEdgeItemProvider != null) planEdgeItemProvider.dispose();
		if (processItemProvider != null) processItemProvider.dispose();
		if (queryGoalItemProvider != null) queryGoalItemProvider.dispose();
		if (sequentialGoalItemProvider != null) sequentialGoalItemProvider.dispose();
		if (subGoalEdgeItemProvider != null) subGoalEdgeItemProvider.dispose();
		if (subProcessGoalItemProvider != null) subProcessGoalItemProvider.dispose();
		if (textAnnotationItemProvider != null) textAnnotationItemProvider.dispose();
		if (vertexItemProvider != null) vertexItemProvider.dispose();
		if (genericGpmnElementItemProvider != null) genericGpmnElementItemProvider.dispose();
		if (genericGpmnEdgeItemProvider != null) genericGpmnEdgeItemProvider.dispose();
	}

}
