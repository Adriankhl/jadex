buildscript {
    repositories
    {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

def isAndroidProject(project) {
    project.hasProperty("androidProject") && project.property("androidProject") == 'true'
}

def isAndroidLibraryProject(project) {
    project.hasProperty("androidLibraryProject") && project.property("androidLibraryProject") == 'true'
}

def getReleaseVariant(project) {
    if (isAndroidLibraryProject(project)) {
        project.android.libraryVariants.each {variant ->
            if (variant.buildType.name.equals(com.android.builder.core.BuilderConstants.RELEASE)) {
                return variant
            }
        }
    } else {
        project.android.applicationVariants.each {variant ->
            if (variant.buildType.name.equals(com.android.builder.core.BuilderConstants.RELEASE)) {
                return variant
            }
        }
    }
}

def getVariants(project) {
	if (isAndroidLibraryProject(project)) {
		return project.android.libraryVariants
	} else {
		project.android.applicationVariants
	}
}

def getSourceDir(project) {
    if (isAndroidProject(project)) {
        project.android.sourceSets.main.java.srcDirs
    } else {
        project.sourceSets.main.allJava
    }
}

// only return java sources 
// (getSourceDir includes xml, bpmn, aidl, ... which is wrong for javadoc generation)
def getOnlyJavaSources(project) {
    if (isAndroidProject(project)) {
    	getReleaseVariant(project).javaCompile.source
    } else {
        project.sourceSets.main.allJava
    }
}

def getResourcesDir(project) {
    if (isAndroidProject(project)) {
        project.android.sourceSets.main.res.srcDirs
    } else {
        project.sourceSets.main.resources
    }
}

def getCompileClassPath(project) {
    if (isAndroidProject(project)) {
        if (isAndroidLibraryProject(project)) {
            project.android.libraryVariants.javaCompile.classpath
        } else {
            project.android.applicationVariants.javaCompile.classpath
        }
    } else {
        project.sourceSets.main.compileClasspath
    }
}

def isExcluded(excl, name)
{
    boolean ret = false;
    if(excl!=null)
    {
        for(ex in excl)
        {
            if(name.indexOf(ex)!=-1)
            {
                ret = true;
                break;
            }
        }
    }
    return ret;
}

def calledWithTask(fulltaskname)
{
    def result = gradle.startParameter.taskNames.any {taskName -> taskName.contains(fulltaskname)}
    return result
}

// make functions externally visible

ext {
    isAndroidProject = this.&isAndroidProject
    isAndroidLibraryProject = this.&isAndroidLibraryProject
    getReleaseVariant = this.&getReleaseVariant
    getVariants = this.&getVariants
    getSourceDir = this.&getSourceDir
    getOnlyJavaSources = this.&getOnlyJavaSources
    getResourcesDir = this.&getResourcesDir
    getCompileClassPath = this.&getCompileClassPath
    isExcluded = this.&isExcluded
    calledWithTask = this.&calledWithTask
}