package jadex.quickstart.cleanerworld.gui;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Collection;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;

import jadex.bridge.IComponentIdentifier;
import jadex.bridge.IInternalAccess;
import jadex.bridge.component.impl.ExecutionComponentFeature;
import jadex.bridge.service.types.cms.CMSStatusEvent;
import jadex.bridge.service.types.cms.CMSStatusEvent.CMSTerminatedEvent;
import jadex.bridge.service.types.cms.SComponentManagementService;
import jadex.commons.future.IIntermediateResultListener;
import jadex.commons.gui.SGUI;
import jadex.quickstart.cleanerworld.environment.SensorActuator;


/**
 *  The GUI for the cleaner world example.
 *  Shows the world from the viewpoint of a single agent.
 */
public class SensorGui	extends JFrame
{
	// generated by eclipse
	private static final long serialVersionUID = -7606576685809940049L;

	//-------- constructors --------

	/**
	 *  Shows the gui, and updates it when beliefs change.
	 */
	public SensorGui(SensorActuator sensor)
	{
		super(sensor.getSelf().getId());
		final JPanel map = new SensorPanel(sensor);

		getContentPane().add(BorderLayout.CENTER, map);
		setSize(300, 300);
		setLocation(SGUI.calculateMiddlePosition(this));
		setVisible(true);
		
		// Repaint every 50 ms.
		final Timer	timer	= new Timer(50, new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				map.invalidate();
				map.repaint();
			}
		});
		timer.start();
		
		final IComponentIdentifier	cid	= sensor.getSelf().getAgentIdentifier();
		IInternalAccess	agent	= ExecutionComponentFeature.LOCAL.get();
		
		// Close window on agent kill.
		SComponentManagementService.listenToComponent(cid, agent)
			.addResultListener(new IIntermediateResultListener<CMSStatusEvent>()
		{
			@Override
			public void intermediateResultAvailable(CMSStatusEvent cse)
			{
				if(cse instanceof CMSTerminatedEvent)
				{
					SwingUtilities.invokeLater(new Runnable()
					{
						public void run()
						{
							timer.stop();
							dispose();
						}
					});
				}
			}
			
			@Override
			public void finished()
			{
			}
			
			@Override
			public void exceptionOccurred(Exception exception)
			{
			}
			
			@Override
			public void resultAvailable(Collection<CMSStatusEvent> result)
			{
			}
		});

		// Kill agent on window close.
		addWindowListener(new WindowAdapter()
		{
			public void windowClosing(WindowEvent e)
			{
				agent.getExternalAccess().killComponent();
			}
		});
	}		
}